/**
 * @license Angular v10.0.2
 * Copyright Google LLC All Rights Reserved.
 * License: MIT
 */

let $deferred;
function define(modules, callback) {
  $deferred = {modules, callback};
}
module.exports = function(provided) {
  const ts = provided['typescript'];
  if (!ts) {
    throw new Error('Caller does not provide typescript module');
  }
  const results = {};
  const resolvedModules = $deferred.modules.map(m => {
    if (m === 'exports') {
      return results;
    }
    if (m === 'typescript' || m === 'typescript/lib/tsserverlibrary') {
      return ts;
    }
    return require(m);
  });
  $deferred.callback(...resolvedModules);
  return results;
};

define(['exports', 'os', '@microsoft/typescript-etw', 'fs', 'path', 'crypto', 'buffer', 'module', 'inspector', 'constants', 'stream', 'util', 'assert', 'jsonfile', 'typescript/lib/tsserverlibrary'], function (exports, os, typescriptEtw, fs$3, path$1, crypto, buffer$1, module, inspector, constants, stream, util$1, assert$1, jsonfile$1, ts$1) { 'use strict';

    var os__default = 'default' in os ? os['default'] : os;
    typescriptEtw = typescriptEtw && typescriptEtw.hasOwnProperty('default') ? typescriptEtw['default'] : typescriptEtw;
    var fs$3__default = 'default' in fs$3 ? fs$3['default'] : fs$3;
    var path$1__default = 'default' in path$1 ? path$1['default'] : path$1;
    crypto = crypto && crypto.hasOwnProperty('default') ? crypto['default'] : crypto;
    buffer$1 = buffer$1 && buffer$1.hasOwnProperty('default') ? buffer$1['default'] : buffer$1;
    module = module && module.hasOwnProperty('default') ? module['default'] : module;
    inspector = inspector && inspector.hasOwnProperty('default') ? inspector['default'] : inspector;
    constants = constants && constants.hasOwnProperty('default') ? constants['default'] : constants;
    stream = stream && stream.hasOwnProperty('default') ? stream['default'] : stream;
    util$1 = util$1 && util$1.hasOwnProperty('default') ? util$1['default'] : util$1;
    assert$1 = assert$1 && assert$1.hasOwnProperty('default') ? assert$1['default'] : assert$1;
    jsonfile$1 = jsonfile$1 && jsonfile$1.hasOwnProperty('default') ? jsonfile$1['default'] : jsonfile$1;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
    }

    function unwrapExports (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

    /**
     * Encode an integer in the range of 0 to 63 to a single base 64 digit.
     */
    var encode = function (number) {
      if (0 <= number && number < intToCharMap.length) {
        return intToCharMap[number];
      }
      throw new TypeError("Must be between 0 and 63: " + number);
    };

    /**
     * Decode a single base 64 character code digit to an integer. Returns -1 on
     * failure.
     */
    var decode = function (charCode) {
      var bigA = 65;     // 'A'
      var bigZ = 90;     // 'Z'

      var littleA = 97;  // 'a'
      var littleZ = 122; // 'z'

      var zero = 48;     // '0'
      var nine = 57;     // '9'

      var plus = 43;     // '+'
      var slash = 47;    // '/'

      var littleOffset = 26;
      var numberOffset = 52;

      // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
      if (bigA <= charCode && charCode <= bigZ) {
        return (charCode - bigA);
      }

      // 26 - 51: abcdefghijklmnopqrstuvwxyz
      if (littleA <= charCode && charCode <= littleZ) {
        return (charCode - littleA + littleOffset);
      }

      // 52 - 61: 0123456789
      if (zero <= charCode && charCode <= nine) {
        return (charCode - zero + numberOffset);
      }

      // 62: +
      if (charCode == plus) {
        return 62;
      }

      // 63: /
      if (charCode == slash) {
        return 63;
      }

      // Invalid base64 digit.
      return -1;
    };

    var base64 = {
    	encode: encode,
    	decode: decode
    };

    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     *
     * Based on the Base 64 VLQ implementation in Closure Compiler:
     * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
     *
     * Copyright 2011 The Closure Compiler Authors. All rights reserved.
     * Redistribution and use in source and binary forms, with or without
     * modification, are permitted provided that the following conditions are
     * met:
     *
     *  * Redistributions of source code must retain the above copyright
     *    notice, this list of conditions and the following disclaimer.
     *  * Redistributions in binary form must reproduce the above
     *    copyright notice, this list of conditions and the following
     *    disclaimer in the documentation and/or other materials provided
     *    with the distribution.
     *  * Neither the name of Google Inc. nor the names of its
     *    contributors may be used to endorse or promote products derived
     *    from this software without specific prior written permission.
     *
     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
     * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
     * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
     * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
     * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
     * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
     * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
     * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
     * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
     * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
     */



    // A single base 64 digit can contain 6 bits of data. For the base 64 variable
    // length quantities we use in the source map spec, the first bit is the sign,
    // the next four bits are the actual value, and the 6th bit is the
    // continuation bit. The continuation bit tells us whether there are more
    // digits in this value following this digit.
    //
    //   Continuation
    //   |    Sign
    //   |    |
    //   V    V
    //   101011

    var VLQ_BASE_SHIFT = 5;

    // binary: 100000
    var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

    // binary: 011111
    var VLQ_BASE_MASK = VLQ_BASE - 1;

    // binary: 100000
    var VLQ_CONTINUATION_BIT = VLQ_BASE;

    /**
     * Converts from a two-complement value to a value where the sign bit is
     * placed in the least significant bit.  For example, as decimals:
     *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
     *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
     */
    function toVLQSigned(aValue) {
      return aValue < 0
        ? ((-aValue) << 1) + 1
        : (aValue << 1) + 0;
    }

    /**
     * Converts to a two-complement value from a value where the sign bit is
     * placed in the least significant bit.  For example, as decimals:
     *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
     *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
     */
    function fromVLQSigned(aValue) {
      var isNegative = (aValue & 1) === 1;
      var shifted = aValue >> 1;
      return isNegative
        ? -shifted
        : shifted;
    }

    /**
     * Returns the base 64 VLQ encoded value.
     */
    var encode$1 = function base64VLQ_encode(aValue) {
      var encoded = "";
      var digit;

      var vlq = toVLQSigned(aValue);

      do {
        digit = vlq & VLQ_BASE_MASK;
        vlq >>>= VLQ_BASE_SHIFT;
        if (vlq > 0) {
          // There are still more digits in this value, so we must make sure the
          // continuation bit is marked.
          digit |= VLQ_CONTINUATION_BIT;
        }
        encoded += base64.encode(digit);
      } while (vlq > 0);

      return encoded;
    };

    /**
     * Decodes the next base 64 VLQ value from the given string and returns the
     * value and the rest of the string via the out parameter.
     */
    var decode$1 = function base64VLQ_decode(aStr, aIndex, aOutParam) {
      var strLen = aStr.length;
      var result = 0;
      var shift = 0;
      var continuation, digit;

      do {
        if (aIndex >= strLen) {
          throw new Error("Expected more digits in base 64 VLQ value.");
        }

        digit = base64.decode(aStr.charCodeAt(aIndex++));
        if (digit === -1) {
          throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
        }

        continuation = !!(digit & VLQ_CONTINUATION_BIT);
        digit &= VLQ_BASE_MASK;
        result = result + (digit << shift);
        shift += VLQ_BASE_SHIFT;
      } while (continuation);

      aOutParam.value = fromVLQSigned(result);
      aOutParam.rest = aIndex;
    };

    var base64Vlq = {
    	encode: encode$1,
    	decode: decode$1
    };

    var util = createCommonjsModule(function (module, exports) {
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    /**
     * This is a helper function for getting values from parameter/options
     * objects.
     *
     * @param args The object we are extracting values from
     * @param name The name of the property we are getting.
     * @param defaultValue An optional value to return if the property is missing
     * from the object. If this is not specified and the property is missing, an
     * error will be thrown.
     */
    function getArg(aArgs, aName, aDefaultValue) {
      if (aName in aArgs) {
        return aArgs[aName];
      } else if (arguments.length === 3) {
        return aDefaultValue;
      } else {
        throw new Error('"' + aName + '" is a required argument.');
      }
    }
    exports.getArg = getArg;

    var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
    var dataUrlRegexp = /^data:.+\,.+$/;

    function urlParse(aUrl) {
      var match = aUrl.match(urlRegexp);
      if (!match) {
        return null;
      }
      return {
        scheme: match[1],
        auth: match[2],
        host: match[3],
        port: match[4],
        path: match[5]
      };
    }
    exports.urlParse = urlParse;

    function urlGenerate(aParsedUrl) {
      var url = '';
      if (aParsedUrl.scheme) {
        url += aParsedUrl.scheme + ':';
      }
      url += '//';
      if (aParsedUrl.auth) {
        url += aParsedUrl.auth + '@';
      }
      if (aParsedUrl.host) {
        url += aParsedUrl.host;
      }
      if (aParsedUrl.port) {
        url += ":" + aParsedUrl.port;
      }
      if (aParsedUrl.path) {
        url += aParsedUrl.path;
      }
      return url;
    }
    exports.urlGenerate = urlGenerate;

    /**
     * Normalizes a path, or the path portion of a URL:
     *
     * - Replaces consecutive slashes with one slash.
     * - Removes unnecessary '.' parts.
     * - Removes unnecessary '<dir>/..' parts.
     *
     * Based on code in the Node.js 'path' core module.
     *
     * @param aPath The path or url to normalize.
     */
    function normalize(aPath) {
      var path = aPath;
      var url = urlParse(aPath);
      if (url) {
        if (!url.path) {
          return aPath;
        }
        path = url.path;
      }
      var isAbsolute = exports.isAbsolute(path);

      var parts = path.split(/\/+/);
      for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
        part = parts[i];
        if (part === '.') {
          parts.splice(i, 1);
        } else if (part === '..') {
          up++;
        } else if (up > 0) {
          if (part === '') {
            // The first part is blank if the path is absolute. Trying to go
            // above the root is a no-op. Therefore we can remove all '..' parts
            // directly after the root.
            parts.splice(i + 1, up);
            up = 0;
          } else {
            parts.splice(i, 2);
            up--;
          }
        }
      }
      path = parts.join('/');

      if (path === '') {
        path = isAbsolute ? '/' : '.';
      }

      if (url) {
        url.path = path;
        return urlGenerate(url);
      }
      return path;
    }
    exports.normalize = normalize;

    /**
     * Joins two paths/URLs.
     *
     * @param aRoot The root path or URL.
     * @param aPath The path or URL to be joined with the root.
     *
     * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
     *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
     *   first.
     * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
     *   is updated with the result and aRoot is returned. Otherwise the result
     *   is returned.
     *   - If aPath is absolute, the result is aPath.
     *   - Otherwise the two paths are joined with a slash.
     * - Joining for example 'http://' and 'www.example.com' is also supported.
     */
    function join(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }
      if (aPath === "") {
        aPath = ".";
      }
      var aPathUrl = urlParse(aPath);
      var aRootUrl = urlParse(aRoot);
      if (aRootUrl) {
        aRoot = aRootUrl.path || '/';
      }

      // `join(foo, '//www.example.org')`
      if (aPathUrl && !aPathUrl.scheme) {
        if (aRootUrl) {
          aPathUrl.scheme = aRootUrl.scheme;
        }
        return urlGenerate(aPathUrl);
      }

      if (aPathUrl || aPath.match(dataUrlRegexp)) {
        return aPath;
      }

      // `join('http://', 'www.example.com')`
      if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
        aRootUrl.host = aPath;
        return urlGenerate(aRootUrl);
      }

      var joined = aPath.charAt(0) === '/'
        ? aPath
        : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

      if (aRootUrl) {
        aRootUrl.path = joined;
        return urlGenerate(aRootUrl);
      }
      return joined;
    }
    exports.join = join;

    exports.isAbsolute = function (aPath) {
      return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
    };

    /**
     * Make a path relative to a URL or another path.
     *
     * @param aRoot The root path or URL.
     * @param aPath The path or URL to be made relative to aRoot.
     */
    function relative(aRoot, aPath) {
      if (aRoot === "") {
        aRoot = ".";
      }

      aRoot = aRoot.replace(/\/$/, '');

      // It is possible for the path to be above the root. In this case, simply
      // checking whether the root is a prefix of the path won't work. Instead, we
      // need to remove components from the root one by one, until either we find
      // a prefix that fits, or we run out of components to remove.
      var level = 0;
      while (aPath.indexOf(aRoot + '/') !== 0) {
        var index = aRoot.lastIndexOf("/");
        if (index < 0) {
          return aPath;
        }

        // If the only part of the root that is left is the scheme (i.e. http://,
        // file:///, etc.), one or more slashes (/), or simply nothing at all, we
        // have exhausted all components, so the path is not relative to the root.
        aRoot = aRoot.slice(0, index);
        if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
          return aPath;
        }

        ++level;
      }

      // Make sure we add a "../" for each component we removed from the root.
      return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
    }
    exports.relative = relative;

    var supportsNullProto = (function () {
      var obj = Object.create(null);
      return !('__proto__' in obj);
    }());

    function identity (s) {
      return s;
    }

    /**
     * Because behavior goes wacky when you set `__proto__` on objects, we
     * have to prefix all the strings in our set with an arbitrary character.
     *
     * See https://github.com/mozilla/source-map/pull/31 and
     * https://github.com/mozilla/source-map/issues/30
     *
     * @param String aStr
     */
    function toSetString(aStr) {
      if (isProtoString(aStr)) {
        return '$' + aStr;
      }

      return aStr;
    }
    exports.toSetString = supportsNullProto ? identity : toSetString;

    function fromSetString(aStr) {
      if (isProtoString(aStr)) {
        return aStr.slice(1);
      }

      return aStr;
    }
    exports.fromSetString = supportsNullProto ? identity : fromSetString;

    function isProtoString(s) {
      if (!s) {
        return false;
      }

      var length = s.length;

      if (length < 9 /* "__proto__".length */) {
        return false;
      }

      if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
          s.charCodeAt(length - 2) !== 95  /* '_' */ ||
          s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
          s.charCodeAt(length - 4) !== 116 /* 't' */ ||
          s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
          s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
          s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
          s.charCodeAt(length - 8) !== 95  /* '_' */ ||
          s.charCodeAt(length - 9) !== 95  /* '_' */) {
        return false;
      }

      for (var i = length - 10; i >= 0; i--) {
        if (s.charCodeAt(i) !== 36 /* '$' */) {
          return false;
        }
      }

      return true;
    }

    /**
     * Comparator between two mappings where the original positions are compared.
     *
     * Optionally pass in `true` as `onlyCompareGenerated` to consider two
     * mappings with the same original source/line/column, but different generated
     * line and column the same. Useful when searching for a mapping with a
     * stubbed out mapping.
     */
    function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
      var cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }

      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }

      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0 || onlyCompareOriginal) {
        return cmp;
      }

      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }

      cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }

      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByOriginalPositions = compareByOriginalPositions;

    /**
     * Comparator between two mappings with deflated source and name indices where
     * the generated positions are compared.
     *
     * Optionally pass in `true` as `onlyCompareGenerated` to consider two
     * mappings with the same generated line and column, but different
     * source/name/original line and column the same. Useful when searching for a
     * mapping with a stubbed out mapping.
     */
    function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }

      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0 || onlyCompareGenerated) {
        return cmp;
      }

      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }

      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }

      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }

      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

    function strcmp(aStr1, aStr2) {
      if (aStr1 === aStr2) {
        return 0;
      }

      if (aStr1 === null) {
        return 1; // aStr2 !== null
      }

      if (aStr2 === null) {
        return -1; // aStr1 !== null
      }

      if (aStr1 > aStr2) {
        return 1;
      }

      return -1;
    }

    /**
     * Comparator between two mappings with inflated source and name strings where
     * the generated positions are compared.
     */
    function compareByGeneratedPositionsInflated(mappingA, mappingB) {
      var cmp = mappingA.generatedLine - mappingB.generatedLine;
      if (cmp !== 0) {
        return cmp;
      }

      cmp = mappingA.generatedColumn - mappingB.generatedColumn;
      if (cmp !== 0) {
        return cmp;
      }

      cmp = strcmp(mappingA.source, mappingB.source);
      if (cmp !== 0) {
        return cmp;
      }

      cmp = mappingA.originalLine - mappingB.originalLine;
      if (cmp !== 0) {
        return cmp;
      }

      cmp = mappingA.originalColumn - mappingB.originalColumn;
      if (cmp !== 0) {
        return cmp;
      }

      return strcmp(mappingA.name, mappingB.name);
    }
    exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

    /**
     * Strip any JSON XSSI avoidance prefix from the string (as documented
     * in the source maps specification), and then parse the string as
     * JSON.
     */
    function parseSourceMapInput(str) {
      return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
    }
    exports.parseSourceMapInput = parseSourceMapInput;

    /**
     * Compute the URL of a source given the the source root, the source's
     * URL, and the source map's URL.
     */
    function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
      sourceURL = sourceURL || '';

      if (sourceRoot) {
        // This follows what Chrome does.
        if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
          sourceRoot += '/';
        }
        // The spec says:
        //   Line 4: An optional source root, useful for relocating source
        //   files on a server or removing repeated values in the
        //   “sources” entry.  This value is prepended to the individual
        //   entries in the “source” field.
        sourceURL = sourceRoot + sourceURL;
      }

      // Historically, SourceMapConsumer did not take the sourceMapURL as
      // a parameter.  This mode is still somewhat supported, which is why
      // this code block is conditional.  However, it's preferable to pass
      // the source map URL to SourceMapConsumer, so that this function
      // can implement the source URL resolution algorithm as outlined in
      // the spec.  This block is basically the equivalent of:
      //    new URL(sourceURL, sourceMapURL).toString()
      // ... except it avoids using URL, which wasn't available in the
      // older releases of node still supported by this library.
      //
      // The spec says:
      //   If the sources are not absolute URLs after prepending of the
      //   “sourceRoot”, the sources are resolved relative to the
      //   SourceMap (like resolving script src in a html document).
      if (sourceMapURL) {
        var parsed = urlParse(sourceMapURL);
        if (!parsed) {
          throw new Error("sourceMapURL could not be parsed");
        }
        if (parsed.path) {
          // Strip the last path component, but keep the "/".
          var index = parsed.path.lastIndexOf('/');
          if (index >= 0) {
            parsed.path = parsed.path.substring(0, index + 1);
          }
        }
        sourceURL = join(urlGenerate(parsed), sourceURL);
      }

      return normalize(sourceURL);
    }
    exports.computeSourceURL = computeSourceURL;
    });
    var util_1 = util.getArg;
    var util_2 = util.urlParse;
    var util_3 = util.urlGenerate;
    var util_4 = util.normalize;
    var util_5 = util.join;
    var util_6 = util.isAbsolute;
    var util_7 = util.relative;
    var util_8 = util.toSetString;
    var util_9 = util.fromSetString;
    var util_10 = util.compareByOriginalPositions;
    var util_11 = util.compareByGeneratedPositionsDeflated;
    var util_12 = util.compareByGeneratedPositionsInflated;
    var util_13 = util.parseSourceMapInput;
    var util_14 = util.computeSourceURL;

    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */


    var has = Object.prototype.hasOwnProperty;
    var hasNativeMap = typeof Map !== "undefined";

    /**
     * A data structure which is a combination of an array and a set. Adding a new
     * member is O(1), testing for membership is O(1), and finding the index of an
     * element is O(1). Removing elements from the set is not supported. Only
     * strings are supported for membership.
     */
    function ArraySet() {
      this._array = [];
      this._set = hasNativeMap ? new Map() : Object.create(null);
    }

    /**
     * Static method for creating ArraySet instances from an existing array.
     */
    ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
      var set = new ArraySet();
      for (var i = 0, len = aArray.length; i < len; i++) {
        set.add(aArray[i], aAllowDuplicates);
      }
      return set;
    };

    /**
     * Return how many unique items are in this ArraySet. If duplicates have been
     * added, than those do not count towards the size.
     *
     * @returns Number
     */
    ArraySet.prototype.size = function ArraySet_size() {
      return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
    };

    /**
     * Add the given string to this set.
     *
     * @param String aStr
     */
    ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
      var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
      var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
      var idx = this._array.length;
      if (!isDuplicate || aAllowDuplicates) {
        this._array.push(aStr);
      }
      if (!isDuplicate) {
        if (hasNativeMap) {
          this._set.set(aStr, idx);
        } else {
          this._set[sStr] = idx;
        }
      }
    };

    /**
     * Is the given string a member of this set?
     *
     * @param String aStr
     */
    ArraySet.prototype.has = function ArraySet_has(aStr) {
      if (hasNativeMap) {
        return this._set.has(aStr);
      } else {
        var sStr = util.toSetString(aStr);
        return has.call(this._set, sStr);
      }
    };

    /**
     * What is the index of the given string in the array?
     *
     * @param String aStr
     */
    ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
      if (hasNativeMap) {
        var idx = this._set.get(aStr);
        if (idx >= 0) {
            return idx;
        }
      } else {
        var sStr = util.toSetString(aStr);
        if (has.call(this._set, sStr)) {
          return this._set[sStr];
        }
      }

      throw new Error('"' + aStr + '" is not in the set.');
    };

    /**
     * What is the element at the given index?
     *
     * @param Number aIdx
     */
    ArraySet.prototype.at = function ArraySet_at(aIdx) {
      if (aIdx >= 0 && aIdx < this._array.length) {
        return this._array[aIdx];
      }
      throw new Error('No element indexed by ' + aIdx);
    };

    /**
     * Returns the array representation of this set (which has the proper indices
     * indicated by indexOf). Note that this is a copy of the internal array used
     * for storing the members so that no one can mess with internal state.
     */
    ArraySet.prototype.toArray = function ArraySet_toArray() {
      return this._array.slice();
    };

    var ArraySet_1 = ArraySet;

    var arraySet = {
    	ArraySet: ArraySet_1
    };

    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2014 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */



    /**
     * Determine whether mappingB is after mappingA with respect to generated
     * position.
     */
    function generatedPositionAfter(mappingA, mappingB) {
      // Optimized for most common case
      var lineA = mappingA.generatedLine;
      var lineB = mappingB.generatedLine;
      var columnA = mappingA.generatedColumn;
      var columnB = mappingB.generatedColumn;
      return lineB > lineA || lineB == lineA && columnB >= columnA ||
             util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
    }

    /**
     * A data structure to provide a sorted view of accumulated mappings in a
     * performance conscious manner. It trades a neglibable overhead in general
     * case for a large speedup in case of mappings being added in order.
     */
    function MappingList() {
      this._array = [];
      this._sorted = true;
      // Serves as infimum
      this._last = {generatedLine: -1, generatedColumn: 0};
    }

    /**
     * Iterate through internal items. This method takes the same arguments that
     * `Array.prototype.forEach` takes.
     *
     * NOTE: The order of the mappings is NOT guaranteed.
     */
    MappingList.prototype.unsortedForEach =
      function MappingList_forEach(aCallback, aThisArg) {
        this._array.forEach(aCallback, aThisArg);
      };

    /**
     * Add the given source mapping.
     *
     * @param Object aMapping
     */
    MappingList.prototype.add = function MappingList_add(aMapping) {
      if (generatedPositionAfter(this._last, aMapping)) {
        this._last = aMapping;
        this._array.push(aMapping);
      } else {
        this._sorted = false;
        this._array.push(aMapping);
      }
    };

    /**
     * Returns the flat, sorted array of mappings. The mappings are sorted by
     * generated position.
     *
     * WARNING: This method returns internal data without copying, for
     * performance. The return value must NOT be mutated, and should be treated as
     * an immutable borrow. If you want to take ownership, you must make your own
     * copy.
     */
    MappingList.prototype.toArray = function MappingList_toArray() {
      if (!this._sorted) {
        this._array.sort(util.compareByGeneratedPositionsInflated);
        this._sorted = true;
      }
      return this._array;
    };

    var MappingList_1 = MappingList;

    var mappingList = {
    	MappingList: MappingList_1
    };

    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */



    var ArraySet$1 = arraySet.ArraySet;
    var MappingList$1 = mappingList.MappingList;

    /**
     * An instance of the SourceMapGenerator represents a source map which is
     * being built incrementally. You may pass an object with the following
     * properties:
     *
     *   - file: The filename of the generated source.
     *   - sourceRoot: A root for all relative URLs in this source map.
     */
    function SourceMapGenerator(aArgs) {
      if (!aArgs) {
        aArgs = {};
      }
      this._file = util.getArg(aArgs, 'file', null);
      this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
      this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
      this._sources = new ArraySet$1();
      this._names = new ArraySet$1();
      this._mappings = new MappingList$1();
      this._sourcesContents = null;
    }

    SourceMapGenerator.prototype._version = 3;

    /**
     * Creates a new SourceMapGenerator based on a SourceMapConsumer
     *
     * @param aSourceMapConsumer The SourceMap.
     */
    SourceMapGenerator.fromSourceMap =
      function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
        var sourceRoot = aSourceMapConsumer.sourceRoot;
        var generator = new SourceMapGenerator({
          file: aSourceMapConsumer.file,
          sourceRoot: sourceRoot
        });
        aSourceMapConsumer.eachMapping(function (mapping) {
          var newMapping = {
            generated: {
              line: mapping.generatedLine,
              column: mapping.generatedColumn
            }
          };

          if (mapping.source != null) {
            newMapping.source = mapping.source;
            if (sourceRoot != null) {
              newMapping.source = util.relative(sourceRoot, newMapping.source);
            }

            newMapping.original = {
              line: mapping.originalLine,
              column: mapping.originalColumn
            };

            if (mapping.name != null) {
              newMapping.name = mapping.name;
            }
          }

          generator.addMapping(newMapping);
        });
        aSourceMapConsumer.sources.forEach(function (sourceFile) {
          var sourceRelative = sourceFile;
          if (sourceRoot !== null) {
            sourceRelative = util.relative(sourceRoot, sourceFile);
          }

          if (!generator._sources.has(sourceRelative)) {
            generator._sources.add(sourceRelative);
          }

          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            generator.setSourceContent(sourceFile, content);
          }
        });
        return generator;
      };

    /**
     * Add a single mapping from original source line and column to the generated
     * source's line and column for this source map being created. The mapping
     * object should have the following properties:
     *
     *   - generated: An object with the generated line and column positions.
     *   - original: An object with the original line and column positions.
     *   - source: The original source file (relative to the sourceRoot).
     *   - name: An optional original token name for this mapping.
     */
    SourceMapGenerator.prototype.addMapping =
      function SourceMapGenerator_addMapping(aArgs) {
        var generated = util.getArg(aArgs, 'generated');
        var original = util.getArg(aArgs, 'original', null);
        var source = util.getArg(aArgs, 'source', null);
        var name = util.getArg(aArgs, 'name', null);

        if (!this._skipValidation) {
          this._validateMapping(generated, original, source, name);
        }

        if (source != null) {
          source = String(source);
          if (!this._sources.has(source)) {
            this._sources.add(source);
          }
        }

        if (name != null) {
          name = String(name);
          if (!this._names.has(name)) {
            this._names.add(name);
          }
        }

        this._mappings.add({
          generatedLine: generated.line,
          generatedColumn: generated.column,
          originalLine: original != null && original.line,
          originalColumn: original != null && original.column,
          source: source,
          name: name
        });
      };

    /**
     * Set the source content for a source file.
     */
    SourceMapGenerator.prototype.setSourceContent =
      function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
        var source = aSourceFile;
        if (this._sourceRoot != null) {
          source = util.relative(this._sourceRoot, source);
        }

        if (aSourceContent != null) {
          // Add the source content to the _sourcesContents map.
          // Create a new _sourcesContents map if the property is null.
          if (!this._sourcesContents) {
            this._sourcesContents = Object.create(null);
          }
          this._sourcesContents[util.toSetString(source)] = aSourceContent;
        } else if (this._sourcesContents) {
          // Remove the source file from the _sourcesContents map.
          // If the _sourcesContents map is empty, set the property to null.
          delete this._sourcesContents[util.toSetString(source)];
          if (Object.keys(this._sourcesContents).length === 0) {
            this._sourcesContents = null;
          }
        }
      };

    /**
     * Applies the mappings of a sub-source-map for a specific source file to the
     * source map being generated. Each mapping to the supplied source file is
     * rewritten using the supplied source map. Note: The resolution for the
     * resulting mappings is the minimium of this map and the supplied map.
     *
     * @param aSourceMapConsumer The source map to be applied.
     * @param aSourceFile Optional. The filename of the source file.
     *        If omitted, SourceMapConsumer's file property will be used.
     * @param aSourceMapPath Optional. The dirname of the path to the source map
     *        to be applied. If relative, it is relative to the SourceMapConsumer.
     *        This parameter is needed when the two source maps aren't in the same
     *        directory, and the source map to be applied contains relative source
     *        paths. If so, those relative source paths need to be rewritten
     *        relative to the SourceMapGenerator.
     */
    SourceMapGenerator.prototype.applySourceMap =
      function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
        var sourceFile = aSourceFile;
        // If aSourceFile is omitted, we will use the file property of the SourceMap
        if (aSourceFile == null) {
          if (aSourceMapConsumer.file == null) {
            throw new Error(
              'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
              'or the source map\'s "file" property. Both were omitted.'
            );
          }
          sourceFile = aSourceMapConsumer.file;
        }
        var sourceRoot = this._sourceRoot;
        // Make "sourceFile" relative if an absolute Url is passed.
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        // Applying the SourceMap can add and remove items from the sources and
        // the names array.
        var newSources = new ArraySet$1();
        var newNames = new ArraySet$1();

        // Find mappings for the "sourceFile"
        this._mappings.unsortedForEach(function (mapping) {
          if (mapping.source === sourceFile && mapping.originalLine != null) {
            // Check if it can be mapped by the source map, then update the mapping.
            var original = aSourceMapConsumer.originalPositionFor({
              line: mapping.originalLine,
              column: mapping.originalColumn
            });
            if (original.source != null) {
              // Copy mapping
              mapping.source = original.source;
              if (aSourceMapPath != null) {
                mapping.source = util.join(aSourceMapPath, mapping.source);
              }
              if (sourceRoot != null) {
                mapping.source = util.relative(sourceRoot, mapping.source);
              }
              mapping.originalLine = original.line;
              mapping.originalColumn = original.column;
              if (original.name != null) {
                mapping.name = original.name;
              }
            }
          }

          var source = mapping.source;
          if (source != null && !newSources.has(source)) {
            newSources.add(source);
          }

          var name = mapping.name;
          if (name != null && !newNames.has(name)) {
            newNames.add(name);
          }

        }, this);
        this._sources = newSources;
        this._names = newNames;

        // Copy sourcesContents of applied map.
        aSourceMapConsumer.sources.forEach(function (sourceFile) {
          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            if (aSourceMapPath != null) {
              sourceFile = util.join(aSourceMapPath, sourceFile);
            }
            if (sourceRoot != null) {
              sourceFile = util.relative(sourceRoot, sourceFile);
            }
            this.setSourceContent(sourceFile, content);
          }
        }, this);
      };

    /**
     * A mapping can have one of the three levels of data:
     *
     *   1. Just the generated position.
     *   2. The Generated position, original position, and original source.
     *   3. Generated and original position, original source, as well as a name
     *      token.
     *
     * To maintain consistency, we validate that any new mapping being added falls
     * in to one of these categories.
     */
    SourceMapGenerator.prototype._validateMapping =
      function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
                                                  aName) {
        // When aOriginal is truthy but has empty values for .line and .column,
        // it is most likely a programmer error. In this case we throw a very
        // specific error message to try to guide them the right way.
        // For example: https://github.com/Polymer/polymer-bundler/pull/519
        if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
            throw new Error(
                'original.line and original.column are not numbers -- you probably meant to omit ' +
                'the original mapping entirely and only map the generated position. If so, pass ' +
                'null for the original mapping instead of an object with empty or null values.'
            );
        }

        if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
            && aGenerated.line > 0 && aGenerated.column >= 0
            && !aOriginal && !aSource && !aName) {
          // Case 1.
          return;
        }
        else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
                 && aOriginal && 'line' in aOriginal && 'column' in aOriginal
                 && aGenerated.line > 0 && aGenerated.column >= 0
                 && aOriginal.line > 0 && aOriginal.column >= 0
                 && aSource) {
          // Cases 2 and 3.
          return;
        }
        else {
          throw new Error('Invalid mapping: ' + JSON.stringify({
            generated: aGenerated,
            source: aSource,
            original: aOriginal,
            name: aName
          }));
        }
      };

    /**
     * Serialize the accumulated mappings in to the stream of base 64 VLQs
     * specified by the source map format.
     */
    SourceMapGenerator.prototype._serializeMappings =
      function SourceMapGenerator_serializeMappings() {
        var previousGeneratedColumn = 0;
        var previousGeneratedLine = 1;
        var previousOriginalColumn = 0;
        var previousOriginalLine = 0;
        var previousName = 0;
        var previousSource = 0;
        var result = '';
        var next;
        var mapping;
        var nameIdx;
        var sourceIdx;

        var mappings = this._mappings.toArray();
        for (var i = 0, len = mappings.length; i < len; i++) {
          mapping = mappings[i];
          next = '';

          if (mapping.generatedLine !== previousGeneratedLine) {
            previousGeneratedColumn = 0;
            while (mapping.generatedLine !== previousGeneratedLine) {
              next += ';';
              previousGeneratedLine++;
            }
          }
          else {
            if (i > 0) {
              if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
                continue;
              }
              next += ',';
            }
          }

          next += base64Vlq.encode(mapping.generatedColumn
                                     - previousGeneratedColumn);
          previousGeneratedColumn = mapping.generatedColumn;

          if (mapping.source != null) {
            sourceIdx = this._sources.indexOf(mapping.source);
            next += base64Vlq.encode(sourceIdx - previousSource);
            previousSource = sourceIdx;

            // lines are stored 0-based in SourceMap spec version 3
            next += base64Vlq.encode(mapping.originalLine - 1
                                       - previousOriginalLine);
            previousOriginalLine = mapping.originalLine - 1;

            next += base64Vlq.encode(mapping.originalColumn
                                       - previousOriginalColumn);
            previousOriginalColumn = mapping.originalColumn;

            if (mapping.name != null) {
              nameIdx = this._names.indexOf(mapping.name);
              next += base64Vlq.encode(nameIdx - previousName);
              previousName = nameIdx;
            }
          }

          result += next;
        }

        return result;
      };

    SourceMapGenerator.prototype._generateSourcesContent =
      function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
        return aSources.map(function (source) {
          if (!this._sourcesContents) {
            return null;
          }
          if (aSourceRoot != null) {
            source = util.relative(aSourceRoot, source);
          }
          var key = util.toSetString(source);
          return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
            ? this._sourcesContents[key]
            : null;
        }, this);
      };

    /**
     * Externalize the source map.
     */
    SourceMapGenerator.prototype.toJSON =
      function SourceMapGenerator_toJSON() {
        var map = {
          version: this._version,
          sources: this._sources.toArray(),
          names: this._names.toArray(),
          mappings: this._serializeMappings()
        };
        if (this._file != null) {
          map.file = this._file;
        }
        if (this._sourceRoot != null) {
          map.sourceRoot = this._sourceRoot;
        }
        if (this._sourcesContents) {
          map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
        }

        return map;
      };

    /**
     * Render the source map being generated to a string.
     */
    SourceMapGenerator.prototype.toString =
      function SourceMapGenerator_toString() {
        return JSON.stringify(this.toJSON());
      };

    var SourceMapGenerator_1 = SourceMapGenerator;

    var sourceMapGenerator = {
    	SourceMapGenerator: SourceMapGenerator_1
    };

    var binarySearch = createCommonjsModule(function (module, exports) {
    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    exports.GREATEST_LOWER_BOUND = 1;
    exports.LEAST_UPPER_BOUND = 2;

    /**
     * Recursive implementation of binary search.
     *
     * @param aLow Indices here and lower do not contain the needle.
     * @param aHigh Indices here and higher do not contain the needle.
     * @param aNeedle The element being searched for.
     * @param aHaystack The non-empty array being searched.
     * @param aCompare Function which takes two elements and returns -1, 0, or 1.
     * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
     *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
     *     closest element that is smaller than or greater than the one we are
     *     searching for, respectively, if the exact element cannot be found.
     */
    function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
      // This function terminates when one of the following is true:
      //
      //   1. We find the exact element we are looking for.
      //
      //   2. We did not find the exact element, but we can return the index of
      //      the next-closest element.
      //
      //   3. We did not find the exact element, and there is no next-closest
      //      element than the one we are searching for, so we return -1.
      var mid = Math.floor((aHigh - aLow) / 2) + aLow;
      var cmp = aCompare(aNeedle, aHaystack[mid], true);
      if (cmp === 0) {
        // Found the element we are looking for.
        return mid;
      }
      else if (cmp > 0) {
        // Our needle is greater than aHaystack[mid].
        if (aHigh - mid > 1) {
          // The element is in the upper half.
          return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
        }

        // The exact needle element was not found in this haystack. Determine if
        // we are in termination case (3) or (2) and return the appropriate thing.
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return aHigh < aHaystack.length ? aHigh : -1;
        } else {
          return mid;
        }
      }
      else {
        // Our needle is less than aHaystack[mid].
        if (mid - aLow > 1) {
          // The element is in the lower half.
          return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
        }

        // we are in termination case (3) or (2) and return the appropriate thing.
        if (aBias == exports.LEAST_UPPER_BOUND) {
          return mid;
        } else {
          return aLow < 0 ? -1 : aLow;
        }
      }
    }

    /**
     * This is an implementation of binary search which will always try and return
     * the index of the closest element if there is no exact hit. This is because
     * mappings between original and generated line/col pairs are single points,
     * and there is an implicit region between each of them, so a miss just means
     * that you aren't on the very start of a region.
     *
     * @param aNeedle The element you are looking for.
     * @param aHaystack The array that is being searched.
     * @param aCompare A function which takes the needle and an element in the
     *     array and returns -1, 0, or 1 depending on whether the needle is less
     *     than, equal to, or greater than the element, respectively.
     * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
     *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
     *     closest element that is smaller than or greater than the one we are
     *     searching for, respectively, if the exact element cannot be found.
     *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
     */
    exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
      if (aHaystack.length === 0) {
        return -1;
      }

      var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
                                  aCompare, aBias || exports.GREATEST_LOWER_BOUND);
      if (index < 0) {
        return -1;
      }

      // We have found either the exact element, or the next-closest element than
      // the one we are searching for. However, there may be more than one such
      // element. Make sure we always return the smallest of these.
      while (index - 1 >= 0) {
        if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
          break;
        }
        --index;
      }

      return index;
    };
    });
    var binarySearch_1 = binarySearch.GREATEST_LOWER_BOUND;
    var binarySearch_2 = binarySearch.LEAST_UPPER_BOUND;
    var binarySearch_3 = binarySearch.search;

    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    // It turns out that some (most?) JavaScript engines don't self-host
    // `Array.prototype.sort`. This makes sense because C++ will likely remain
    // faster than JS when doing raw CPU-intensive sorting. However, when using a
    // custom comparator function, calling back and forth between the VM's C++ and
    // JIT'd JS is rather slow *and* loses JIT type information, resulting in
    // worse generated code for the comparator function than would be optimal. In
    // fact, when sorting with a comparator, these costs outweigh the benefits of
    // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
    // a ~3500ms mean speed-up in `bench/bench.html`.

    /**
     * Swap the elements indexed by `x` and `y` in the array `ary`.
     *
     * @param {Array} ary
     *        The array.
     * @param {Number} x
     *        The index of the first item.
     * @param {Number} y
     *        The index of the second item.
     */
    function swap(ary, x, y) {
      var temp = ary[x];
      ary[x] = ary[y];
      ary[y] = temp;
    }

    /**
     * Returns a random integer within the range `low .. high` inclusive.
     *
     * @param {Number} low
     *        The lower bound on the range.
     * @param {Number} high
     *        The upper bound on the range.
     */
    function randomIntInRange(low, high) {
      return Math.round(low + (Math.random() * (high - low)));
    }

    /**
     * The Quick Sort algorithm.
     *
     * @param {Array} ary
     *        An array to sort.
     * @param {function} comparator
     *        Function to use to compare two items.
     * @param {Number} p
     *        Start index of the array
     * @param {Number} r
     *        End index of the array
     */
    function doQuickSort(ary, comparator, p, r) {
      // If our lower bound is less than our upper bound, we (1) partition the
      // array into two pieces and (2) recurse on each half. If it is not, this is
      // the empty array and our base case.

      if (p < r) {
        // (1) Partitioning.
        //
        // The partitioning chooses a pivot between `p` and `r` and moves all
        // elements that are less than or equal to the pivot to the before it, and
        // all the elements that are greater than it after it. The effect is that
        // once partition is done, the pivot is in the exact place it will be when
        // the array is put in sorted order, and it will not need to be moved
        // again. This runs in O(n) time.

        // Always choose a random pivot so that an input array which is reverse
        // sorted does not cause O(n^2) running time.
        var pivotIndex = randomIntInRange(p, r);
        var i = p - 1;

        swap(ary, pivotIndex, r);
        var pivot = ary[r];

        // Immediately after `j` is incremented in this loop, the following hold
        // true:
        //
        //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
        //
        //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
        for (var j = p; j < r; j++) {
          if (comparator(ary[j], pivot) <= 0) {
            i += 1;
            swap(ary, i, j);
          }
        }

        swap(ary, i + 1, j);
        var q = i + 1;

        // (2) Recurse on each half.

        doQuickSort(ary, comparator, p, q - 1);
        doQuickSort(ary, comparator, q + 1, r);
      }
    }

    /**
     * Sort the given array in-place with the given comparator function.
     *
     * @param {Array} ary
     *        An array to sort.
     * @param {function} comparator
     *        Function to use to compare two items.
     */
    var quickSort_1 = function (ary, comparator) {
      doQuickSort(ary, comparator, 0, ary.length - 1);
    };

    var quickSort = {
    	quickSort: quickSort_1
    };

    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */



    var ArraySet$2 = arraySet.ArraySet;

    var quickSort$1 = quickSort.quickSort;

    function SourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === 'string') {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }

      return sourceMap.sections != null
        ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)
        : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
    }

    SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
      return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
    };

    /**
     * The version of the source mapping spec that we are consuming.
     */
    SourceMapConsumer.prototype._version = 3;

    // `__generatedMappings` and `__originalMappings` are arrays that hold the
    // parsed mapping coordinates from the source map's "mappings" attribute. They
    // are lazily instantiated, accessed via the `_generatedMappings` and
    // `_originalMappings` getters respectively, and we only parse the mappings
    // and create these arrays once queried for a source location. We jump through
    // these hoops because there can be many thousands of mappings, and parsing
    // them is expensive, so we only want to do it if we must.
    //
    // Each object in the arrays is of the form:
    //
    //     {
    //       generatedLine: The line number in the generated code,
    //       generatedColumn: The column number in the generated code,
    //       source: The path to the original source file that generated this
    //               chunk of code,
    //       originalLine: The line number in the original source that
    //                     corresponds to this chunk of generated code,
    //       originalColumn: The column number in the original source that
    //                       corresponds to this chunk of generated code,
    //       name: The name of the original symbol which generated this chunk of
    //             code.
    //     }
    //
    // All properties except for `generatedLine` and `generatedColumn` can be
    // `null`.
    //
    // `_generatedMappings` is ordered by the generated positions.
    //
    // `_originalMappings` is ordered by the original positions.

    SourceMapConsumer.prototype.__generatedMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
      configurable: true,
      enumerable: true,
      get: function () {
        if (!this.__generatedMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }

        return this.__generatedMappings;
      }
    });

    SourceMapConsumer.prototype.__originalMappings = null;
    Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
      configurable: true,
      enumerable: true,
      get: function () {
        if (!this.__originalMappings) {
          this._parseMappings(this._mappings, this.sourceRoot);
        }

        return this.__originalMappings;
      }
    });

    SourceMapConsumer.prototype._charIsMappingSeparator =
      function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
        var c = aStr.charAt(index);
        return c === ";" || c === ",";
      };

    /**
     * Parse the mappings in a string in to a data structure which we can easily
     * query (the ordered arrays in the `this.__generatedMappings` and
     * `this.__originalMappings` properties).
     */
    SourceMapConsumer.prototype._parseMappings =
      function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        throw new Error("Subclasses must implement _parseMappings");
      };

    SourceMapConsumer.GENERATED_ORDER = 1;
    SourceMapConsumer.ORIGINAL_ORDER = 2;

    SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
    SourceMapConsumer.LEAST_UPPER_BOUND = 2;

    /**
     * Iterate over each mapping between an original source/line/column and a
     * generated line/column in this source map.
     *
     * @param Function aCallback
     *        The function that is called with each mapping.
     * @param Object aContext
     *        Optional. If specified, this object will be the value of `this` every
     *        time that `aCallback` is called.
     * @param aOrder
     *        Either `SourceMapConsumer.GENERATED_ORDER` or
     *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
     *        iterate over the mappings sorted by the generated file's line/column
     *        order or the original's source/line/column order, respectively. Defaults to
     *        `SourceMapConsumer.GENERATED_ORDER`.
     */
    SourceMapConsumer.prototype.eachMapping =
      function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
        var context = aContext || null;
        var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

        var mappings;
        switch (order) {
        case SourceMapConsumer.GENERATED_ORDER:
          mappings = this._generatedMappings;
          break;
        case SourceMapConsumer.ORIGINAL_ORDER:
          mappings = this._originalMappings;
          break;
        default:
          throw new Error("Unknown order of iteration.");
        }

        var sourceRoot = this.sourceRoot;
        mappings.map(function (mapping) {
          var source = mapping.source === null ? null : this._sources.at(mapping.source);
          source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
          return {
            source: source,
            generatedLine: mapping.generatedLine,
            generatedColumn: mapping.generatedColumn,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: mapping.name === null ? null : this._names.at(mapping.name)
          };
        }, this).forEach(aCallback, context);
      };

    /**
     * Returns all generated line and column information for the original source,
     * line, and column provided. If no column is provided, returns all mappings
     * corresponding to a either the line we are searching for or the next
     * closest line that has any mappings. Otherwise, returns all mappings
     * corresponding to the given line and either the column we are searching for
     * or the next closest column that has any offsets.
     *
     * The only argument is an object with the following properties:
     *
     *   - source: The filename of the original source.
     *   - line: The line number in the original source.  The line number is 1-based.
     *   - column: Optional. the column number in the original source.
     *    The column number is 0-based.
     *
     * and an array of objects is returned, each with the following properties:
     *
     *   - line: The line number in the generated source, or null.  The
     *    line number is 1-based.
     *   - column: The column number in the generated source, or null.
     *    The column number is 0-based.
     */
    SourceMapConsumer.prototype.allGeneratedPositionsFor =
      function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
        var line = util.getArg(aArgs, 'line');

        // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
        // returns the index of the closest mapping less than the needle. By
        // setting needle.originalColumn to 0, we thus find the last mapping for
        // the given line, provided such a mapping exists.
        var needle = {
          source: util.getArg(aArgs, 'source'),
          originalLine: line,
          originalColumn: util.getArg(aArgs, 'column', 0)
        };

        needle.source = this._findSourceIndex(needle.source);
        if (needle.source < 0) {
          return [];
        }

        var mappings = [];

        var index = this._findMapping(needle,
                                      this._originalMappings,
                                      "originalLine",
                                      "originalColumn",
                                      util.compareByOriginalPositions,
                                      binarySearch.LEAST_UPPER_BOUND);
        if (index >= 0) {
          var mapping = this._originalMappings[index];

          if (aArgs.column === undefined) {
            var originalLine = mapping.originalLine;

            // Iterate until either we run out of mappings, or we run into
            // a mapping for a different line than the one we found. Since
            // mappings are sorted, this is guaranteed to find all mappings for
            // the line we found.
            while (mapping && mapping.originalLine === originalLine) {
              mappings.push({
                line: util.getArg(mapping, 'generatedLine', null),
                column: util.getArg(mapping, 'generatedColumn', null),
                lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
              });

              mapping = this._originalMappings[++index];
            }
          } else {
            var originalColumn = mapping.originalColumn;

            // Iterate until either we run out of mappings, or we run into
            // a mapping for a different line than the one we were searching for.
            // Since mappings are sorted, this is guaranteed to find all mappings for
            // the line we are searching for.
            while (mapping &&
                   mapping.originalLine === line &&
                   mapping.originalColumn == originalColumn) {
              mappings.push({
                line: util.getArg(mapping, 'generatedLine', null),
                column: util.getArg(mapping, 'generatedColumn', null),
                lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
              });

              mapping = this._originalMappings[++index];
            }
          }
        }

        return mappings;
      };

    var SourceMapConsumer_1 = SourceMapConsumer;

    /**
     * A BasicSourceMapConsumer instance represents a parsed source map which we can
     * query for information about the original file positions by giving it a file
     * position in the generated source.
     *
     * The first parameter is the raw source map (either as a JSON string, or
     * already parsed to an object). According to the spec, source maps have the
     * following attributes:
     *
     *   - version: Which version of the source map spec this map is following.
     *   - sources: An array of URLs to the original source files.
     *   - names: An array of identifiers which can be referrenced by individual mappings.
     *   - sourceRoot: Optional. The URL root from which all sources are relative.
     *   - sourcesContent: Optional. An array of contents of the original source files.
     *   - mappings: A string of base64 VLQs which contain the actual mappings.
     *   - file: Optional. The generated file this source map is associated with.
     *
     * Here is an example source map, taken from the source map spec[0]:
     *
     *     {
     *       version : 3,
     *       file: "out.js",
     *       sourceRoot : "",
     *       sources: ["foo.js", "bar.js"],
     *       names: ["src", "maps", "are", "fun"],
     *       mappings: "AA,AB;;ABCDE;"
     *     }
     *
     * The second parameter, if given, is a string whose value is the URL
     * at which the source map was found.  This URL is used to compute the
     * sources array.
     *
     * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
     */
    function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === 'string') {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }

      var version = util.getArg(sourceMap, 'version');
      var sources = util.getArg(sourceMap, 'sources');
      // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
      // requires the array) to play nice here.
      var names = util.getArg(sourceMap, 'names', []);
      var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
      var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
      var mappings = util.getArg(sourceMap, 'mappings');
      var file = util.getArg(sourceMap, 'file', null);

      // Once again, Sass deviates from the spec and supplies the version as a
      // string rather than a number, so we use loose equality checking here.
      if (version != this._version) {
        throw new Error('Unsupported version: ' + version);
      }

      if (sourceRoot) {
        sourceRoot = util.normalize(sourceRoot);
      }

      sources = sources
        .map(String)
        // Some source maps produce relative source paths like "./foo.js" instead of
        // "foo.js".  Normalize these first so that future comparisons will succeed.
        // See bugzil.la/1090768.
        .map(util.normalize)
        // Always ensure that absolute sources are internally stored relative to
        // the source root, if the source root is absolute. Not doing this would
        // be particularly problematic when the source root is a prefix of the
        // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
        .map(function (source) {
          return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
            ? util.relative(sourceRoot, source)
            : source;
        });

      // Pass `true` below to allow duplicate names and sources. While source maps
      // are intended to be compressed and deduplicated, the TypeScript compiler
      // sometimes generates source maps with duplicates in them. See Github issue
      // #72 and bugzil.la/889492.
      this._names = ArraySet$2.fromArray(names.map(String), true);
      this._sources = ArraySet$2.fromArray(sources, true);

      this._absoluteSources = this._sources.toArray().map(function (s) {
        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
      });

      this.sourceRoot = sourceRoot;
      this.sourcesContent = sourcesContent;
      this._mappings = mappings;
      this._sourceMapURL = aSourceMapURL;
      this.file = file;
    }

    BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

    /**
     * Utility function to find the index of a source.  Returns -1 if not
     * found.
     */
    BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
      var relativeSource = aSource;
      if (this.sourceRoot != null) {
        relativeSource = util.relative(this.sourceRoot, relativeSource);
      }

      if (this._sources.has(relativeSource)) {
        return this._sources.indexOf(relativeSource);
      }

      // Maybe aSource is an absolute URL as returned by |sources|.  In
      // this case we can't simply undo the transform.
      var i;
      for (i = 0; i < this._absoluteSources.length; ++i) {
        if (this._absoluteSources[i] == aSource) {
          return i;
        }
      }

      return -1;
    };

    /**
     * Create a BasicSourceMapConsumer from a SourceMapGenerator.
     *
     * @param SourceMapGenerator aSourceMap
     *        The source map that will be consumed.
     * @param String aSourceMapURL
     *        The URL at which the source map can be found (optional)
     * @returns BasicSourceMapConsumer
     */
    BasicSourceMapConsumer.fromSourceMap =
      function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
        var smc = Object.create(BasicSourceMapConsumer.prototype);

        var names = smc._names = ArraySet$2.fromArray(aSourceMap._names.toArray(), true);
        var sources = smc._sources = ArraySet$2.fromArray(aSourceMap._sources.toArray(), true);
        smc.sourceRoot = aSourceMap._sourceRoot;
        smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
                                                                smc.sourceRoot);
        smc.file = aSourceMap._file;
        smc._sourceMapURL = aSourceMapURL;
        smc._absoluteSources = smc._sources.toArray().map(function (s) {
          return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
        });

        // Because we are modifying the entries (by converting string sources and
        // names to indices into the sources and names ArraySets), we have to make
        // a copy of the entry or else bad things happen. Shared mutable state
        // strikes again! See github issue #191.

        var generatedMappings = aSourceMap._mappings.toArray().slice();
        var destGeneratedMappings = smc.__generatedMappings = [];
        var destOriginalMappings = smc.__originalMappings = [];

        for (var i = 0, length = generatedMappings.length; i < length; i++) {
          var srcMapping = generatedMappings[i];
          var destMapping = new Mapping;
          destMapping.generatedLine = srcMapping.generatedLine;
          destMapping.generatedColumn = srcMapping.generatedColumn;

          if (srcMapping.source) {
            destMapping.source = sources.indexOf(srcMapping.source);
            destMapping.originalLine = srcMapping.originalLine;
            destMapping.originalColumn = srcMapping.originalColumn;

            if (srcMapping.name) {
              destMapping.name = names.indexOf(srcMapping.name);
            }

            destOriginalMappings.push(destMapping);
          }

          destGeneratedMappings.push(destMapping);
        }

        quickSort$1(smc.__originalMappings, util.compareByOriginalPositions);

        return smc;
      };

    /**
     * The version of the source mapping spec that we are consuming.
     */
    BasicSourceMapConsumer.prototype._version = 3;

    /**
     * The list of original sources.
     */
    Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
      get: function () {
        return this._absoluteSources.slice();
      }
    });

    /**
     * Provide the JIT with a nice shape / hidden class.
     */
    function Mapping() {
      this.generatedLine = 0;
      this.generatedColumn = 0;
      this.source = null;
      this.originalLine = null;
      this.originalColumn = null;
      this.name = null;
    }

    /**
     * Parse the mappings in a string in to a data structure which we can easily
     * query (the ordered arrays in the `this.__generatedMappings` and
     * `this.__originalMappings` properties).
     */
    BasicSourceMapConsumer.prototype._parseMappings =
      function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        var generatedLine = 1;
        var previousGeneratedColumn = 0;
        var previousOriginalLine = 0;
        var previousOriginalColumn = 0;
        var previousSource = 0;
        var previousName = 0;
        var length = aStr.length;
        var index = 0;
        var cachedSegments = {};
        var temp = {};
        var originalMappings = [];
        var generatedMappings = [];
        var mapping, str, segment, end, value;

        while (index < length) {
          if (aStr.charAt(index) === ';') {
            generatedLine++;
            index++;
            previousGeneratedColumn = 0;
          }
          else if (aStr.charAt(index) === ',') {
            index++;
          }
          else {
            mapping = new Mapping();
            mapping.generatedLine = generatedLine;

            // Because each offset is encoded relative to the previous one,
            // many segments often have the same encoding. We can exploit this
            // fact by caching the parsed variable length fields of each segment,
            // allowing us to avoid a second parse if we encounter the same
            // segment again.
            for (end = index; end < length; end++) {
              if (this._charIsMappingSeparator(aStr, end)) {
                break;
              }
            }
            str = aStr.slice(index, end);

            segment = cachedSegments[str];
            if (segment) {
              index += str.length;
            } else {
              segment = [];
              while (index < end) {
                base64Vlq.decode(aStr, index, temp);
                value = temp.value;
                index = temp.rest;
                segment.push(value);
              }

              if (segment.length === 2) {
                throw new Error('Found a source, but no line and column');
              }

              if (segment.length === 3) {
                throw new Error('Found a source and line, but no column');
              }

              cachedSegments[str] = segment;
            }

            // Generated column.
            mapping.generatedColumn = previousGeneratedColumn + segment[0];
            previousGeneratedColumn = mapping.generatedColumn;

            if (segment.length > 1) {
              // Original source.
              mapping.source = previousSource + segment[1];
              previousSource += segment[1];

              // Original line.
              mapping.originalLine = previousOriginalLine + segment[2];
              previousOriginalLine = mapping.originalLine;
              // Lines are stored 0-based
              mapping.originalLine += 1;

              // Original column.
              mapping.originalColumn = previousOriginalColumn + segment[3];
              previousOriginalColumn = mapping.originalColumn;

              if (segment.length > 4) {
                // Original name.
                mapping.name = previousName + segment[4];
                previousName += segment[4];
              }
            }

            generatedMappings.push(mapping);
            if (typeof mapping.originalLine === 'number') {
              originalMappings.push(mapping);
            }
          }
        }

        quickSort$1(generatedMappings, util.compareByGeneratedPositionsDeflated);
        this.__generatedMappings = generatedMappings;

        quickSort$1(originalMappings, util.compareByOriginalPositions);
        this.__originalMappings = originalMappings;
      };

    /**
     * Find the mapping that best matches the hypothetical "needle" mapping that
     * we are searching for in the given "haystack" of mappings.
     */
    BasicSourceMapConsumer.prototype._findMapping =
      function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
                                             aColumnName, aComparator, aBias) {
        // To return the position we are searching for, we must first find the
        // mapping for the given position and then return the opposite position it
        // points to. Because the mappings are sorted, we can use binary search to
        // find the best mapping.

        if (aNeedle[aLineName] <= 0) {
          throw new TypeError('Line must be greater than or equal to 1, got '
                              + aNeedle[aLineName]);
        }
        if (aNeedle[aColumnName] < 0) {
          throw new TypeError('Column must be greater than or equal to 0, got '
                              + aNeedle[aColumnName]);
        }

        return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
      };

    /**
     * Compute the last column for each generated mapping. The last column is
     * inclusive.
     */
    BasicSourceMapConsumer.prototype.computeColumnSpans =
      function SourceMapConsumer_computeColumnSpans() {
        for (var index = 0; index < this._generatedMappings.length; ++index) {
          var mapping = this._generatedMappings[index];

          // Mappings do not contain a field for the last generated columnt. We
          // can come up with an optimistic estimate, however, by assuming that
          // mappings are contiguous (i.e. given two consecutive mappings, the
          // first mapping ends where the second one starts).
          if (index + 1 < this._generatedMappings.length) {
            var nextMapping = this._generatedMappings[index + 1];

            if (mapping.generatedLine === nextMapping.generatedLine) {
              mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
              continue;
            }
          }

          // The last mapping for each line spans the entire line.
          mapping.lastGeneratedColumn = Infinity;
        }
      };

    /**
     * Returns the original source, line, and column information for the generated
     * source's line and column positions provided. The only argument is an object
     * with the following properties:
     *
     *   - line: The line number in the generated source.  The line number
     *     is 1-based.
     *   - column: The column number in the generated source.  The column
     *     number is 0-based.
     *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
     *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
     *     closest element that is smaller than or greater than the one we are
     *     searching for, respectively, if the exact element cannot be found.
     *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
     *
     * and an object is returned with the following properties:
     *
     *   - source: The original source file, or null.
     *   - line: The line number in the original source, or null.  The
     *     line number is 1-based.
     *   - column: The column number in the original source, or null.  The
     *     column number is 0-based.
     *   - name: The original identifier, or null.
     */
    BasicSourceMapConsumer.prototype.originalPositionFor =
      function SourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util.getArg(aArgs, 'line'),
          generatedColumn: util.getArg(aArgs, 'column')
        };

        var index = this._findMapping(
          needle,
          this._generatedMappings,
          "generatedLine",
          "generatedColumn",
          util.compareByGeneratedPositionsDeflated,
          util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
        );

        if (index >= 0) {
          var mapping = this._generatedMappings[index];

          if (mapping.generatedLine === needle.generatedLine) {
            var source = util.getArg(mapping, 'source', null);
            if (source !== null) {
              source = this._sources.at(source);
              source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
            }
            var name = util.getArg(mapping, 'name', null);
            if (name !== null) {
              name = this._names.at(name);
            }
            return {
              source: source,
              line: util.getArg(mapping, 'originalLine', null),
              column: util.getArg(mapping, 'originalColumn', null),
              name: name
            };
          }
        }

        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      };

    /**
     * Return true if we have the source content for every source in the source
     * map, false otherwise.
     */
    BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
      function BasicSourceMapConsumer_hasContentsOfAllSources() {
        if (!this.sourcesContent) {
          return false;
        }
        return this.sourcesContent.length >= this._sources.size() &&
          !this.sourcesContent.some(function (sc) { return sc == null; });
      };

    /**
     * Returns the original source content. The only argument is the url of the
     * original source file. Returns null if no original source content is
     * available.
     */
    BasicSourceMapConsumer.prototype.sourceContentFor =
      function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        if (!this.sourcesContent) {
          return null;
        }

        var index = this._findSourceIndex(aSource);
        if (index >= 0) {
          return this.sourcesContent[index];
        }

        var relativeSource = aSource;
        if (this.sourceRoot != null) {
          relativeSource = util.relative(this.sourceRoot, relativeSource);
        }

        var url;
        if (this.sourceRoot != null
            && (url = util.urlParse(this.sourceRoot))) {
          // XXX: file:// URIs and absolute paths lead to unexpected behavior for
          // many users. We can help them out when they expect file:// URIs to
          // behave like it would if they were running a local HTTP server. See
          // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
          var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
          if (url.scheme == "file"
              && this._sources.has(fileUriAbsPath)) {
            return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
          }

          if ((!url.path || url.path == "/")
              && this._sources.has("/" + relativeSource)) {
            return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
          }
        }

        // This function is used recursively from
        // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
        // don't want to throw if we can't find the source - we just want to
        // return null, so we provide a flag to exit gracefully.
        if (nullOnMissing) {
          return null;
        }
        else {
          throw new Error('"' + relativeSource + '" is not in the SourceMap.');
        }
      };

    /**
     * Returns the generated line and column information for the original source,
     * line, and column positions provided. The only argument is an object with
     * the following properties:
     *
     *   - source: The filename of the original source.
     *   - line: The line number in the original source.  The line number
     *     is 1-based.
     *   - column: The column number in the original source.  The column
     *     number is 0-based.
     *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
     *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
     *     closest element that is smaller than or greater than the one we are
     *     searching for, respectively, if the exact element cannot be found.
     *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
     *
     * and an object is returned with the following properties:
     *
     *   - line: The line number in the generated source, or null.  The
     *     line number is 1-based.
     *   - column: The column number in the generated source, or null.
     *     The column number is 0-based.
     */
    BasicSourceMapConsumer.prototype.generatedPositionFor =
      function SourceMapConsumer_generatedPositionFor(aArgs) {
        var source = util.getArg(aArgs, 'source');
        source = this._findSourceIndex(source);
        if (source < 0) {
          return {
            line: null,
            column: null,
            lastColumn: null
          };
        }

        var needle = {
          source: source,
          originalLine: util.getArg(aArgs, 'line'),
          originalColumn: util.getArg(aArgs, 'column')
        };

        var index = this._findMapping(
          needle,
          this._originalMappings,
          "originalLine",
          "originalColumn",
          util.compareByOriginalPositions,
          util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
        );

        if (index >= 0) {
          var mapping = this._originalMappings[index];

          if (mapping.source === needle.source) {
            return {
              line: util.getArg(mapping, 'generatedLine', null),
              column: util.getArg(mapping, 'generatedColumn', null),
              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
            };
          }
        }

        return {
          line: null,
          column: null,
          lastColumn: null
        };
      };

    var BasicSourceMapConsumer_1 = BasicSourceMapConsumer;

    /**
     * An IndexedSourceMapConsumer instance represents a parsed source map which
     * we can query for information. It differs from BasicSourceMapConsumer in
     * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
     * input.
     *
     * The first parameter is a raw source map (either as a JSON string, or already
     * parsed to an object). According to the spec for indexed source maps, they
     * have the following attributes:
     *
     *   - version: Which version of the source map spec this map is following.
     *   - file: Optional. The generated file this source map is associated with.
     *   - sections: A list of section definitions.
     *
     * Each value under the "sections" field has two fields:
     *   - offset: The offset into the original specified at which this section
     *       begins to apply, defined as an object with a "line" and "column"
     *       field.
     *   - map: A source map definition. This source map could also be indexed,
     *       but doesn't have to be.
     *
     * Instead of the "map" field, it's also possible to have a "url" field
     * specifying a URL to retrieve a source map from, but that's currently
     * unsupported.
     *
     * Here's an example source map, taken from the source map spec[0], but
     * modified to omit a section which uses the "url" field.
     *
     *  {
     *    version : 3,
     *    file: "app.js",
     *    sections: [{
     *      offset: {line:100, column:10},
     *      map: {
     *        version : 3,
     *        file: "section.js",
     *        sources: ["foo.js", "bar.js"],
     *        names: ["src", "maps", "are", "fun"],
     *        mappings: "AAAA,E;;ABCDE;"
     *      }
     *    }],
     *  }
     *
     * The second parameter, if given, is a string whose value is the URL
     * at which the source map was found.  This URL is used to compute the
     * sources array.
     *
     * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
     */
    function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
      var sourceMap = aSourceMap;
      if (typeof aSourceMap === 'string') {
        sourceMap = util.parseSourceMapInput(aSourceMap);
      }

      var version = util.getArg(sourceMap, 'version');
      var sections = util.getArg(sourceMap, 'sections');

      if (version != this._version) {
        throw new Error('Unsupported version: ' + version);
      }

      this._sources = new ArraySet$2();
      this._names = new ArraySet$2();

      var lastOffset = {
        line: -1,
        column: 0
      };
      this._sections = sections.map(function (s) {
        if (s.url) {
          // The url field will require support for asynchronicity.
          // See https://github.com/mozilla/source-map/issues/16
          throw new Error('Support for url field in sections not implemented.');
        }
        var offset = util.getArg(s, 'offset');
        var offsetLine = util.getArg(offset, 'line');
        var offsetColumn = util.getArg(offset, 'column');

        if (offsetLine < lastOffset.line ||
            (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
          throw new Error('Section offsets must be ordered and non-overlapping.');
        }
        lastOffset = offset;

        return {
          generatedOffset: {
            // The offset fields are 0-based, but we use 1-based indices when
            // encoding/decoding from VLQ.
            generatedLine: offsetLine + 1,
            generatedColumn: offsetColumn + 1
          },
          consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
        }
      });
    }

    IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
    IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

    /**
     * The version of the source mapping spec that we are consuming.
     */
    IndexedSourceMapConsumer.prototype._version = 3;

    /**
     * The list of original sources.
     */
    Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
      get: function () {
        var sources = [];
        for (var i = 0; i < this._sections.length; i++) {
          for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
            sources.push(this._sections[i].consumer.sources[j]);
          }
        }
        return sources;
      }
    });

    /**
     * Returns the original source, line, and column information for the generated
     * source's line and column positions provided. The only argument is an object
     * with the following properties:
     *
     *   - line: The line number in the generated source.  The line number
     *     is 1-based.
     *   - column: The column number in the generated source.  The column
     *     number is 0-based.
     *
     * and an object is returned with the following properties:
     *
     *   - source: The original source file, or null.
     *   - line: The line number in the original source, or null.  The
     *     line number is 1-based.
     *   - column: The column number in the original source, or null.  The
     *     column number is 0-based.
     *   - name: The original identifier, or null.
     */
    IndexedSourceMapConsumer.prototype.originalPositionFor =
      function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util.getArg(aArgs, 'line'),
          generatedColumn: util.getArg(aArgs, 'column')
        };

        // Find the section containing the generated position we're trying to map
        // to an original position.
        var sectionIndex = binarySearch.search(needle, this._sections,
          function(needle, section) {
            var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
            if (cmp) {
              return cmp;
            }

            return (needle.generatedColumn -
                    section.generatedOffset.generatedColumn);
          });
        var section = this._sections[sectionIndex];

        if (!section) {
          return {
            source: null,
            line: null,
            column: null,
            name: null
          };
        }

        return section.consumer.originalPositionFor({
          line: needle.generatedLine -
            (section.generatedOffset.generatedLine - 1),
          column: needle.generatedColumn -
            (section.generatedOffset.generatedLine === needle.generatedLine
             ? section.generatedOffset.generatedColumn - 1
             : 0),
          bias: aArgs.bias
        });
      };

    /**
     * Return true if we have the source content for every source in the source
     * map, false otherwise.
     */
    IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
      function IndexedSourceMapConsumer_hasContentsOfAllSources() {
        return this._sections.every(function (s) {
          return s.consumer.hasContentsOfAllSources();
        });
      };

    /**
     * Returns the original source content. The only argument is the url of the
     * original source file. Returns null if no original source content is
     * available.
     */
    IndexedSourceMapConsumer.prototype.sourceContentFor =
      function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        for (var i = 0; i < this._sections.length; i++) {
          var section = this._sections[i];

          var content = section.consumer.sourceContentFor(aSource, true);
          if (content) {
            return content;
          }
        }
        if (nullOnMissing) {
          return null;
        }
        else {
          throw new Error('"' + aSource + '" is not in the SourceMap.');
        }
      };

    /**
     * Returns the generated line and column information for the original source,
     * line, and column positions provided. The only argument is an object with
     * the following properties:
     *
     *   - source: The filename of the original source.
     *   - line: The line number in the original source.  The line number
     *     is 1-based.
     *   - column: The column number in the original source.  The column
     *     number is 0-based.
     *
     * and an object is returned with the following properties:
     *
     *   - line: The line number in the generated source, or null.  The
     *     line number is 1-based. 
     *   - column: The column number in the generated source, or null.
     *     The column number is 0-based.
     */
    IndexedSourceMapConsumer.prototype.generatedPositionFor =
      function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
        for (var i = 0; i < this._sections.length; i++) {
          var section = this._sections[i];

          // Only consider this section if the requested source is in the list of
          // sources of the consumer.
          if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
            continue;
          }
          var generatedPosition = section.consumer.generatedPositionFor(aArgs);
          if (generatedPosition) {
            var ret = {
              line: generatedPosition.line +
                (section.generatedOffset.generatedLine - 1),
              column: generatedPosition.column +
                (section.generatedOffset.generatedLine === generatedPosition.line
                 ? section.generatedOffset.generatedColumn - 1
                 : 0)
            };
            return ret;
          }
        }

        return {
          line: null,
          column: null
        };
      };

    /**
     * Parse the mappings in a string in to a data structure which we can easily
     * query (the ordered arrays in the `this.__generatedMappings` and
     * `this.__originalMappings` properties).
     */
    IndexedSourceMapConsumer.prototype._parseMappings =
      function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        for (var i = 0; i < this._sections.length; i++) {
          var section = this._sections[i];
          var sectionMappings = section.consumer._generatedMappings;
          for (var j = 0; j < sectionMappings.length; j++) {
            var mapping = sectionMappings[j];

            var source = section.consumer._sources.at(mapping.source);
            source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
            this._sources.add(source);
            source = this._sources.indexOf(source);

            var name = null;
            if (mapping.name) {
              name = section.consumer._names.at(mapping.name);
              this._names.add(name);
              name = this._names.indexOf(name);
            }

            // The mappings coming from the consumer for the section have
            // generated positions relative to the start of the section, so we
            // need to offset them to be relative to the start of the concatenated
            // generated file.
            var adjustedMapping = {
              source: source,
              generatedLine: mapping.generatedLine +
                (section.generatedOffset.generatedLine - 1),
              generatedColumn: mapping.generatedColumn +
                (section.generatedOffset.generatedLine === mapping.generatedLine
                ? section.generatedOffset.generatedColumn - 1
                : 0),
              originalLine: mapping.originalLine,
              originalColumn: mapping.originalColumn,
              name: name
            };

            this.__generatedMappings.push(adjustedMapping);
            if (typeof adjustedMapping.originalLine === 'number') {
              this.__originalMappings.push(adjustedMapping);
            }
          }
        }

        quickSort$1(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
        quickSort$1(this.__originalMappings, util.compareByOriginalPositions);
      };

    var IndexedSourceMapConsumer_1 = IndexedSourceMapConsumer;

    var sourceMapConsumer = {
    	SourceMapConsumer: SourceMapConsumer_1,
    	BasicSourceMapConsumer: BasicSourceMapConsumer_1,
    	IndexedSourceMapConsumer: IndexedSourceMapConsumer_1
    };

    /* -*- Mode: js; js-indent-level: 2; -*- */
    /*
     * Copyright 2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE or:
     * http://opensource.org/licenses/BSD-3-Clause
     */

    var SourceMapGenerator$1 = sourceMapGenerator.SourceMapGenerator;


    // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
    // operating systems these days (capturing the result).
    var REGEX_NEWLINE = /(\r?\n)/;

    // Newline character code for charCodeAt() comparisons
    var NEWLINE_CODE = 10;

    // Private symbol for identifying `SourceNode`s when multiple versions of
    // the source-map library are loaded. This MUST NOT CHANGE across
    // versions!
    var isSourceNode = "$$$isSourceNode$$$";

    /**
     * SourceNodes provide a way to abstract over interpolating/concatenating
     * snippets of generated JavaScript source code while maintaining the line and
     * column information associated with the original source code.
     *
     * @param aLine The original line number.
     * @param aColumn The original column number.
     * @param aSource The original source's filename.
     * @param aChunks Optional. An array of strings which are snippets of
     *        generated JS, or other SourceNodes.
     * @param aName The original identifier.
     */
    function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
      this.children = [];
      this.sourceContents = {};
      this.line = aLine == null ? null : aLine;
      this.column = aColumn == null ? null : aColumn;
      this.source = aSource == null ? null : aSource;
      this.name = aName == null ? null : aName;
      this[isSourceNode] = true;
      if (aChunks != null) this.add(aChunks);
    }

    /**
     * Creates a SourceNode from generated code and a SourceMapConsumer.
     *
     * @param aGeneratedCode The generated code
     * @param aSourceMapConsumer The SourceMap for the generated code
     * @param aRelativePath Optional. The path that relative sources in the
     *        SourceMapConsumer should be relative to.
     */
    SourceNode.fromStringWithSourceMap =
      function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
        // The SourceNode we want to fill with the generated code
        // and the SourceMap
        var node = new SourceNode();

        // All even indices of this array are one line of the generated code,
        // while all odd indices are the newlines between two adjacent lines
        // (since `REGEX_NEWLINE` captures its match).
        // Processed fragments are accessed by calling `shiftNextLine`.
        var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
        var remainingLinesIndex = 0;
        var shiftNextLine = function() {
          var lineContents = getNextLine();
          // The last line of a file might not have a newline.
          var newLine = getNextLine() || "";
          return lineContents + newLine;

          function getNextLine() {
            return remainingLinesIndex < remainingLines.length ?
                remainingLines[remainingLinesIndex++] : undefined;
          }
        };

        // We need to remember the position of "remainingLines"
        var lastGeneratedLine = 1, lastGeneratedColumn = 0;

        // The generate SourceNodes we need a code range.
        // To extract it current and last mapping is used.
        // Here we store the last mapping.
        var lastMapping = null;

        aSourceMapConsumer.eachMapping(function (mapping) {
          if (lastMapping !== null) {
            // We add the code from "lastMapping" to "mapping":
            // First check if there is a new line in between.
            if (lastGeneratedLine < mapping.generatedLine) {
              // Associate first line with "lastMapping"
              addMappingWithCode(lastMapping, shiftNextLine());
              lastGeneratedLine++;
              lastGeneratedColumn = 0;
              // The remaining code is added without mapping
            } else {
              // There is no new line in between.
              // Associate the code between "lastGeneratedColumn" and
              // "mapping.generatedColumn" with "lastMapping"
              var nextLine = remainingLines[remainingLinesIndex] || '';
              var code = nextLine.substr(0, mapping.generatedColumn -
                                            lastGeneratedColumn);
              remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -
                                                  lastGeneratedColumn);
              lastGeneratedColumn = mapping.generatedColumn;
              addMappingWithCode(lastMapping, code);
              // No more remaining code, continue
              lastMapping = mapping;
              return;
            }
          }
          // We add the generated code until the first mapping
          // to the SourceNode without any mapping.
          // Each line is added as separate string.
          while (lastGeneratedLine < mapping.generatedLine) {
            node.add(shiftNextLine());
            lastGeneratedLine++;
          }
          if (lastGeneratedColumn < mapping.generatedColumn) {
            var nextLine = remainingLines[remainingLinesIndex] || '';
            node.add(nextLine.substr(0, mapping.generatedColumn));
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
          }
          lastMapping = mapping;
        }, this);
        // We have processed all mappings.
        if (remainingLinesIndex < remainingLines.length) {
          if (lastMapping) {
            // Associate the remaining code in the current line with "lastMapping"
            addMappingWithCode(lastMapping, shiftNextLine());
          }
          // and add the remaining lines without any mapping
          node.add(remainingLines.splice(remainingLinesIndex).join(""));
        }

        // Copy sourcesContent into SourceNode
        aSourceMapConsumer.sources.forEach(function (sourceFile) {
          var content = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content != null) {
            if (aRelativePath != null) {
              sourceFile = util.join(aRelativePath, sourceFile);
            }
            node.setSourceContent(sourceFile, content);
          }
        });

        return node;

        function addMappingWithCode(mapping, code) {
          if (mapping === null || mapping.source === undefined) {
            node.add(code);
          } else {
            var source = aRelativePath
              ? util.join(aRelativePath, mapping.source)
              : mapping.source;
            node.add(new SourceNode(mapping.originalLine,
                                    mapping.originalColumn,
                                    source,
                                    code,
                                    mapping.name));
          }
        }
      };

    /**
     * Add a chunk of generated JS to this source node.
     *
     * @param aChunk A string snippet of generated JS code, another instance of
     *        SourceNode, or an array where each member is one of those things.
     */
    SourceNode.prototype.add = function SourceNode_add(aChunk) {
      if (Array.isArray(aChunk)) {
        aChunk.forEach(function (chunk) {
          this.add(chunk);
        }, this);
      }
      else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        if (aChunk) {
          this.children.push(aChunk);
        }
      }
      else {
        throw new TypeError(
          "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
        );
      }
      return this;
    };

    /**
     * Add a chunk of generated JS to the beginning of this source node.
     *
     * @param aChunk A string snippet of generated JS code, another instance of
     *        SourceNode, or an array where each member is one of those things.
     */
    SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
      if (Array.isArray(aChunk)) {
        for (var i = aChunk.length-1; i >= 0; i--) {
          this.prepend(aChunk[i]);
        }
      }
      else if (aChunk[isSourceNode] || typeof aChunk === "string") {
        this.children.unshift(aChunk);
      }
      else {
        throw new TypeError(
          "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
        );
      }
      return this;
    };

    /**
     * Walk over the tree of JS snippets in this node and its children. The
     * walking function is called once for each snippet of JS and is passed that
     * snippet and the its original associated source's line/column location.
     *
     * @param aFn The traversal function.
     */
    SourceNode.prototype.walk = function SourceNode_walk(aFn) {
      var chunk;
      for (var i = 0, len = this.children.length; i < len; i++) {
        chunk = this.children[i];
        if (chunk[isSourceNode]) {
          chunk.walk(aFn);
        }
        else {
          if (chunk !== '') {
            aFn(chunk, { source: this.source,
                         line: this.line,
                         column: this.column,
                         name: this.name });
          }
        }
      }
    };

    /**
     * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
     * each of `this.children`.
     *
     * @param aSep The separator.
     */
    SourceNode.prototype.join = function SourceNode_join(aSep) {
      var newChildren;
      var i;
      var len = this.children.length;
      if (len > 0) {
        newChildren = [];
        for (i = 0; i < len-1; i++) {
          newChildren.push(this.children[i]);
          newChildren.push(aSep);
        }
        newChildren.push(this.children[i]);
        this.children = newChildren;
      }
      return this;
    };

    /**
     * Call String.prototype.replace on the very right-most source snippet. Useful
     * for trimming whitespace from the end of a source node, etc.
     *
     * @param aPattern The pattern to replace.
     * @param aReplacement The thing to replace the pattern with.
     */
    SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
      var lastChild = this.children[this.children.length - 1];
      if (lastChild[isSourceNode]) {
        lastChild.replaceRight(aPattern, aReplacement);
      }
      else if (typeof lastChild === 'string') {
        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
      }
      else {
        this.children.push(''.replace(aPattern, aReplacement));
      }
      return this;
    };

    /**
     * Set the source content for a source file. This will be added to the SourceMapGenerator
     * in the sourcesContent field.
     *
     * @param aSourceFile The filename of the source file
     * @param aSourceContent The content of the source file
     */
    SourceNode.prototype.setSourceContent =
      function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
        this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
      };

    /**
     * Walk over the tree of SourceNodes. The walking function is called for each
     * source file content and is passed the filename and source content.
     *
     * @param aFn The traversal function.
     */
    SourceNode.prototype.walkSourceContents =
      function SourceNode_walkSourceContents(aFn) {
        for (var i = 0, len = this.children.length; i < len; i++) {
          if (this.children[i][isSourceNode]) {
            this.children[i].walkSourceContents(aFn);
          }
        }

        var sources = Object.keys(this.sourceContents);
        for (var i = 0, len = sources.length; i < len; i++) {
          aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
        }
      };

    /**
     * Return the string representation of this source node. Walks over the tree
     * and concatenates all the various snippets together to one string.
     */
    SourceNode.prototype.toString = function SourceNode_toString() {
      var str = "";
      this.walk(function (chunk) {
        str += chunk;
      });
      return str;
    };

    /**
     * Returns the string representation of this source node along with a source
     * map.
     */
    SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
      var generated = {
        code: "",
        line: 1,
        column: 0
      };
      var map = new SourceMapGenerator$1(aArgs);
      var sourceMappingActive = false;
      var lastOriginalSource = null;
      var lastOriginalLine = null;
      var lastOriginalColumn = null;
      var lastOriginalName = null;
      this.walk(function (chunk, original) {
        generated.code += chunk;
        if (original.source !== null
            && original.line !== null
            && original.column !== null) {
          if(lastOriginalSource !== original.source
             || lastOriginalLine !== original.line
             || lastOriginalColumn !== original.column
             || lastOriginalName !== original.name) {
            map.addMapping({
              source: original.source,
              original: {
                line: original.line,
                column: original.column
              },
              generated: {
                line: generated.line,
                column: generated.column
              },
              name: original.name
            });
          }
          lastOriginalSource = original.source;
          lastOriginalLine = original.line;
          lastOriginalColumn = original.column;
          lastOriginalName = original.name;
          sourceMappingActive = true;
        } else if (sourceMappingActive) {
          map.addMapping({
            generated: {
              line: generated.line,
              column: generated.column
            }
          });
          lastOriginalSource = null;
          sourceMappingActive = false;
        }
        for (var idx = 0, length = chunk.length; idx < length; idx++) {
          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
            generated.line++;
            generated.column = 0;
            // Mappings end at eol
            if (idx + 1 === length) {
              lastOriginalSource = null;
              sourceMappingActive = false;
            } else if (sourceMappingActive) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated.line,
                  column: generated.column
                },
                name: original.name
              });
            }
          } else {
            generated.column++;
          }
        }
      });
      this.walkSourceContents(function (sourceFile, sourceContent) {
        map.setSourceContent(sourceFile, sourceContent);
      });

      return { code: generated.code, map: map };
    };

    var SourceNode_1 = SourceNode;

    var sourceNode = {
    	SourceNode: SourceNode_1
    };

    /*
     * Copyright 2009-2011 Mozilla Foundation and contributors
     * Licensed under the New BSD license. See LICENSE.txt or:
     * http://opensource.org/licenses/BSD-3-Clause
     */
    var SourceMapGenerator$2 = sourceMapGenerator.SourceMapGenerator;
    var SourceMapConsumer$1 = sourceMapConsumer.SourceMapConsumer;
    var SourceNode$1 = sourceNode.SourceNode;

    var sourceMap = {
    	SourceMapGenerator: SourceMapGenerator$2,
    	SourceMapConsumer: SourceMapConsumer$1,
    	SourceNode: SourceNode$1
    };

    var toString = Object.prototype.toString;

    var isModern = (
      typeof Buffer.alloc === 'function' &&
      typeof Buffer.allocUnsafe === 'function' &&
      typeof Buffer.from === 'function'
    );

    function isArrayBuffer (input) {
      return toString.call(input).slice(8, -1) === 'ArrayBuffer'
    }

    function fromArrayBuffer (obj, byteOffset, length) {
      byteOffset >>>= 0;

      var maxLength = obj.byteLength - byteOffset;

      if (maxLength < 0) {
        throw new RangeError("'offset' is out of bounds")
      }

      if (length === undefined) {
        length = maxLength;
      } else {
        length >>>= 0;

        if (length > maxLength) {
          throw new RangeError("'length' is out of bounds")
        }
      }

      return isModern
        ? Buffer.from(obj.slice(byteOffset, byteOffset + length))
        : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))
    }

    function fromString (string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      return isModern
        ? Buffer.from(string, encoding)
        : new Buffer(string, encoding)
    }

    function bufferFrom (value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (isArrayBuffer(value)) {
        return fromArrayBuffer(value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(value, encodingOrOffset)
      }

      return isModern
        ? Buffer.from(value)
        : new Buffer(value)
    }

    var bufferFrom_1 = bufferFrom;

    var SourceMapConsumer$2 = sourceMap.SourceMapConsumer;
    var path = path$1__default;

    var fs;
    try {
      fs = fs$3__default;
      if (!fs.existsSync || !fs.readFileSync) {
        // fs doesn't have all methods we need
        fs = null;
      }
    } catch (err) {
      /* nop */
    }



    // Only install once if called multiple times
    var errorFormatterInstalled = false;
    var uncaughtShimInstalled = false;

    // If true, the caches are reset before a stack trace formatting operation
    var emptyCacheBetweenOperations = false;

    // Supports {browser, node, auto}
    var environment = "auto";

    // Maps a file path to a string containing the file contents
    var fileContentsCache = {};

    // Maps a file path to a source map for that file
    var sourceMapCache = {};

    // Regex for detecting source maps
    var reSourceMap = /^data:application\/json[^,]+base64,/;

    // Priority list of retrieve handlers
    var retrieveFileHandlers = [];
    var retrieveMapHandlers = [];

    function isInBrowser() {
      if (environment === "browser")
        return true;
      if (environment === "node")
        return false;
      return ((typeof window !== 'undefined') && (typeof XMLHttpRequest === 'function') && !(window.require && window.module && window.process && window.process.type === "renderer"));
    }

    function hasGlobalProcessEventEmitter() {
      return ((typeof process === 'object') && (process !== null) && (typeof process.on === 'function'));
    }

    function handlerExec(list) {
      return function(arg) {
        for (var i = 0; i < list.length; i++) {
          var ret = list[i](arg);
          if (ret) {
            return ret;
          }
        }
        return null;
      };
    }

    var retrieveFile = handlerExec(retrieveFileHandlers);

    retrieveFileHandlers.push(function(path) {
      // Trim the path to make sure there is no extra whitespace.
      path = path.trim();
      if (/^file:/.test(path)) {
        // existsSync/readFileSync can't handle file protocol, but once stripped, it works
        path = path.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
          return drive ?
            '' : // file:///C:/dir/file -> C:/dir/file
            '/'; // file:///root-dir/file -> /root-dir/file
        });
      }
      if (path in fileContentsCache) {
        return fileContentsCache[path];
      }

      var contents = '';
      try {
        if (!fs) {
          // Use SJAX if we are in the browser
          var xhr = new XMLHttpRequest();
          xhr.open('GET', path, /** async */ false);
          xhr.send(null);
          if (xhr.readyState === 4 && xhr.status === 200) {
            contents = xhr.responseText;
          }
        } else if (fs.existsSync(path)) {
          // Otherwise, use the filesystem
          contents = fs.readFileSync(path, 'utf8');
        }
      } catch (er) {
        /* ignore any errors */
      }

      return fileContentsCache[path] = contents;
    });

    // Support URLs relative to a directory, but be careful about a protocol prefix
    // in case we are in the browser (i.e. directories may start with "http://" or "file:///")
    function supportRelativeURL(file, url) {
      if (!file) return url;
      var dir = path.dirname(file);
      var match = /^\w+:\/\/[^\/]*/.exec(dir);
      var protocol = match ? match[0] : '';
      var startPath = dir.slice(protocol.length);
      if (protocol && /^\/\w\:/.test(startPath)) {
        // handle file:///C:/ paths
        protocol += '/';
        return protocol + path.resolve(dir.slice(protocol.length), url).replace(/\\/g, '/');
      }
      return protocol + path.resolve(dir.slice(protocol.length), url);
    }

    function retrieveSourceMapURL(source) {
      var fileData;

      if (isInBrowser()) {
         try {
           var xhr = new XMLHttpRequest();
           xhr.open('GET', source, false);
           xhr.send(null);
           fileData = xhr.readyState === 4 ? xhr.responseText : null;

           // Support providing a sourceMappingURL via the SourceMap header
           var sourceMapHeader = xhr.getResponseHeader("SourceMap") ||
                                 xhr.getResponseHeader("X-SourceMap");
           if (sourceMapHeader) {
             return sourceMapHeader;
           }
         } catch (e) {
         }
      }

      // Get the URL of the source map
      fileData = retrieveFile(source);
      var re = /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/)[ \t]*$)/mg;
      // Keep executing the search to find the *last* sourceMappingURL to avoid
      // picking up sourceMappingURLs from comments, strings, etc.
      var lastMatch, match;
      while (match = re.exec(fileData)) lastMatch = match;
      if (!lastMatch) return null;
      return lastMatch[1];
    }
    // Can be overridden by the retrieveSourceMap option to install. Takes a
    // generated source filename; returns a {map, optional url} object, or null if
    // there is no source map.  The map field may be either a string or the parsed
    // JSON object (ie, it must be a valid argument to the SourceMapConsumer
    // constructor).
    var retrieveSourceMap = handlerExec(retrieveMapHandlers);
    retrieveMapHandlers.push(function(source) {
      var sourceMappingURL = retrieveSourceMapURL(source);
      if (!sourceMappingURL) return null;

      // Read the contents of the source map
      var sourceMapData;
      if (reSourceMap.test(sourceMappingURL)) {
        // Support source map URL as a data url
        var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(',') + 1);
        sourceMapData = bufferFrom_1(rawData, "base64").toString();
        sourceMappingURL = source;
      } else {
        // Support source map URLs relative to the source URL
        sourceMappingURL = supportRelativeURL(source, sourceMappingURL);
        sourceMapData = retrieveFile(sourceMappingURL);
      }

      if (!sourceMapData) {
        return null;
      }

      return {
        url: sourceMappingURL,
        map: sourceMapData
      };
    });

    function mapSourcePosition(position) {
      var sourceMap = sourceMapCache[position.source];
      if (!sourceMap) {
        // Call the (overrideable) retrieveSourceMap function to get the source map.
        var urlAndMap = retrieveSourceMap(position.source);
        if (urlAndMap) {
          sourceMap = sourceMapCache[position.source] = {
            url: urlAndMap.url,
            map: new SourceMapConsumer$2(urlAndMap.map)
          };

          // Load all sources stored inline with the source map into the file cache
          // to pretend like they are already loaded. They may not exist on disk.
          if (sourceMap.map.sourcesContent) {
            sourceMap.map.sources.forEach(function(source, i) {
              var contents = sourceMap.map.sourcesContent[i];
              if (contents) {
                var url = supportRelativeURL(sourceMap.url, source);
                fileContentsCache[url] = contents;
              }
            });
          }
        } else {
          sourceMap = sourceMapCache[position.source] = {
            url: null,
            map: null
          };
        }
      }

      // Resolve the source URL relative to the URL of the source map
      if (sourceMap && sourceMap.map) {
        var originalPosition = sourceMap.map.originalPositionFor(position);

        // Only return the original position if a matching line was found. If no
        // matching line is found then we return position instead, which will cause
        // the stack trace to print the path and line for the compiled file. It is
        // better to give a precise location in the compiled file than a vague
        // location in the original file.
        if (originalPosition.source !== null) {
          originalPosition.source = supportRelativeURL(
            sourceMap.url, originalPosition.source);
          return originalPosition;
        }
      }

      return position;
    }

    // Parses code generated by FormatEvalOrigin(), a function inside V8:
    // https://code.google.com/p/v8/source/browse/trunk/src/messages.js
    function mapEvalOrigin(origin) {
      // Most eval() calls are in this format
      var match = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
      if (match) {
        var position = mapSourcePosition({
          source: match[2],
          line: +match[3],
          column: match[4] - 1
        });
        return 'eval at ' + match[1] + ' (' + position.source + ':' +
          position.line + ':' + (position.column + 1) + ')';
      }

      // Parse nested eval() calls using recursion
      match = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
      if (match) {
        return 'eval at ' + match[1] + ' (' + mapEvalOrigin(match[2]) + ')';
      }

      // Make sure we still return useful information if we didn't find anything
      return origin;
    }

    // This is copied almost verbatim from the V8 source code at
    // https://code.google.com/p/v8/source/browse/trunk/src/messages.js. The
    // implementation of wrapCallSite() used to just forward to the actual source
    // code of CallSite.prototype.toString but unfortunately a new release of V8
    // did something to the prototype chain and broke the shim. The only fix I
    // could find was copy/paste.
    function CallSiteToString() {
      var fileName;
      var fileLocation = "";
      if (this.isNative()) {
        fileLocation = "native";
      } else {
        fileName = this.getScriptNameOrSourceURL();
        if (!fileName && this.isEval()) {
          fileLocation = this.getEvalOrigin();
          fileLocation += ", ";  // Expecting source position to follow.
        }

        if (fileName) {
          fileLocation += fileName;
        } else {
          // Source code does not originate from a file and is not native, but we
          // can still get the source position inside the source string, e.g. in
          // an eval string.
          fileLocation += "<anonymous>";
        }
        var lineNumber = this.getLineNumber();
        if (lineNumber != null) {
          fileLocation += ":" + lineNumber;
          var columnNumber = this.getColumnNumber();
          if (columnNumber) {
            fileLocation += ":" + columnNumber;
          }
        }
      }

      var line = "";
      var functionName = this.getFunctionName();
      var addSuffix = true;
      var isConstructor = this.isConstructor();
      var isMethodCall = !(this.isToplevel() || isConstructor);
      if (isMethodCall) {
        var typeName = this.getTypeName();
        // Fixes shim to be backward compatable with Node v0 to v4
        if (typeName === "[object Object]") {
          typeName = "null";
        }
        var methodName = this.getMethodName();
        if (functionName) {
          if (typeName && functionName.indexOf(typeName) != 0) {
            line += typeName + ".";
          }
          line += functionName;
          if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
            line += " [as " + methodName + "]";
          }
        } else {
          line += typeName + "." + (methodName || "<anonymous>");
        }
      } else if (isConstructor) {
        line += "new " + (functionName || "<anonymous>");
      } else if (functionName) {
        line += functionName;
      } else {
        line += fileLocation;
        addSuffix = false;
      }
      if (addSuffix) {
        line += " (" + fileLocation + ")";
      }
      return line;
    }

    function cloneCallSite(frame) {
      var object = {};
      Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {
        object[name] = /^(?:is|get)/.test(name) ? function() { return frame[name].call(frame); } : frame[name];
      });
      object.toString = CallSiteToString;
      return object;
    }

    function wrapCallSite(frame) {
      if(frame.isNative()) {
        return frame;
      }

      // Most call sites will return the source file from getFileName(), but code
      // passed to eval() ending in "//# sourceURL=..." will return the source file
      // from getScriptNameOrSourceURL() instead
      var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
      if (source) {
        var line = frame.getLineNumber();
        var column = frame.getColumnNumber() - 1;

        // Fix position in Node where some (internal) code is prepended.
        // See https://github.com/evanw/node-source-map-support/issues/36
        var headerLength = 62;
        if (line === 1 && column > headerLength && !isInBrowser() && !frame.isEval()) {
          column -= headerLength;
        }

        var position = mapSourcePosition({
          source: source,
          line: line,
          column: column
        });
        frame = cloneCallSite(frame);
        var originalFunctionName = frame.getFunctionName;
        frame.getFunctionName = function() { return position.name || originalFunctionName(); };
        frame.getFileName = function() { return position.source; };
        frame.getLineNumber = function() { return position.line; };
        frame.getColumnNumber = function() { return position.column + 1; };
        frame.getScriptNameOrSourceURL = function() { return position.source; };
        return frame;
      }

      // Code called using eval() needs special handling
      var origin = frame.isEval() && frame.getEvalOrigin();
      if (origin) {
        origin = mapEvalOrigin(origin);
        frame = cloneCallSite(frame);
        frame.getEvalOrigin = function() { return origin; };
        return frame;
      }

      // If we get here then we were unable to change the source position
      return frame;
    }

    // This function is part of the V8 stack trace API, for more info see:
    // http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi
    function prepareStackTrace(error, stack) {
      if (emptyCacheBetweenOperations) {
        fileContentsCache = {};
        sourceMapCache = {};
      }

      return error + stack.map(function(frame) {
        return '\n    at ' + wrapCallSite(frame);
      }).join('');
    }

    // Generate position and snippet of original source with pointer
    function getErrorSource(error) {
      var match = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack);
      if (match) {
        var source = match[1];
        var line = +match[2];
        var column = +match[3];

        // Support the inline sourceContents inside the source map
        var contents = fileContentsCache[source];

        // Support files on disk
        if (!contents && fs && fs.existsSync(source)) {
          try {
            contents = fs.readFileSync(source, 'utf8');
          } catch (er) {
            contents = '';
          }
        }

        // Format the line from the original source code like node does
        if (contents) {
          var code = contents.split(/(?:\r\n|\r|\n)/)[line - 1];
          if (code) {
            return source + ':' + line + '\n' + code + '\n' +
              new Array(column).join(' ') + '^';
          }
        }
      }
      return null;
    }

    function printErrorAndExit (error) {
      var source = getErrorSource(error);

      // Ensure error is printed synchronously and not truncated
      if (process.stderr._handle && process.stderr._handle.setBlocking) {
        process.stderr._handle.setBlocking(true);
      }

      if (source) {
        console.error();
        console.error(source);
      }

      console.error(error.stack);
      process.exit(1);
    }

    function shimEmitUncaughtException () {
      var origEmit = process.emit;

      process.emit = function (type) {
        if (type === 'uncaughtException') {
          var hasStack = (arguments[1] && arguments[1].stack);
          var hasListeners = (this.listeners(type).length > 0);

          if (hasStack && !hasListeners) {
            return printErrorAndExit(arguments[1]);
          }
        }

        return origEmit.apply(this, arguments);
      };
    }

    var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
    var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);

    var wrapCallSite_1 = wrapCallSite;
    var getErrorSource_1 = getErrorSource;
    var mapSourcePosition_1 = mapSourcePosition;
    var retrieveSourceMap_1 = retrieveSourceMap;

    var install = function(options) {
      options = options || {};

      if (options.environment) {
        environment = options.environment;
        if (["node", "browser", "auto"].indexOf(environment) === -1) {
          throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}")
        }
      }

      // Allow sources to be found by methods other than reading the files
      // directly from disk.
      if (options.retrieveFile) {
        if (options.overrideRetrieveFile) {
          retrieveFileHandlers.length = 0;
        }

        retrieveFileHandlers.unshift(options.retrieveFile);
      }

      // Allow source maps to be found by methods other than reading the files
      // directly from disk.
      if (options.retrieveSourceMap) {
        if (options.overrideRetrieveSourceMap) {
          retrieveMapHandlers.length = 0;
        }

        retrieveMapHandlers.unshift(options.retrieveSourceMap);
      }

      // Support runtime transpilers that include inline source maps
      if (options.hookRequire && !isInBrowser()) {
        var Module;
        try {
          Module = module;
        } catch (err) {
          // NOP: Loading in catch block to convert webpack error to warning.
        }
        var $compile = Module.prototype._compile;

        if (!$compile.__sourceMapSupport) {
          Module.prototype._compile = function(content, filename) {
            fileContentsCache[filename] = content;
            sourceMapCache[filename] = undefined;
            return $compile.call(this, content, filename);
          };

          Module.prototype._compile.__sourceMapSupport = true;
        }
      }

      // Configure options
      if (!emptyCacheBetweenOperations) {
        emptyCacheBetweenOperations = 'emptyCacheBetweenOperations' in options ?
          options.emptyCacheBetweenOperations : false;
      }

      // Install the error reformatter
      if (!errorFormatterInstalled) {
        errorFormatterInstalled = true;
        Error.prepareStackTrace = prepareStackTrace;
      }

      if (!uncaughtShimInstalled) {
        var installHandler = 'handleUncaughtExceptions' in options ?
          options.handleUncaughtExceptions : true;

        // Provide the option to not install the uncaught exception handler. This is
        // to support other uncaught exception handlers (in test frameworks, for
        // example). If this handler is not installed and there are no other uncaught
        // exception handlers, uncaught exceptions will be caught by node's built-in
        // exception handler and the process will still be terminated. However, the
        // generated JavaScript code will be shown above the stack trace instead of
        // the original source code.
        if (installHandler && hasGlobalProcessEventEmitter()) {
          uncaughtShimInstalled = true;
          shimEmitUncaughtException();
        }
      }
    };

    var resetRetrieveHandlers = function() {
      retrieveFileHandlers.length = 0;
      retrieveMapHandlers.length = 0;

      retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
      retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);
    };

    var sourceMapSupport = {
    	wrapCallSite: wrapCallSite_1,
    	getErrorSource: getErrorSource_1,
    	mapSourcePosition: mapSourcePosition_1,
    	retrieveSourceMap: retrieveSourceMap_1,
    	install: install,
    	resetRetrieveHandlers: resetRetrieveHandlers
    };

    var typescript = createCommonjsModule(function (module) {
    var __spreadArrays = (this && this.__spreadArrays) || function () {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };
    var __assign = (this && this.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    var __generator = (this && this.__generator) || function (thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    };
    var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };
    var __rest = (this && this.__rest) || function (s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    };
    var __extends = (this && this.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    /* @internal */
    var ts;
    (function (ts) {
        function createMapShim() {
            /** Create a MapLike with good performance. */
            function createDictionaryObject() {
                var map = Object.create(/*prototype*/ null); // eslint-disable-line no-null/no-null
                // Using 'delete' on an object causes V8 to put the object in dictionary mode.
                // This disables creation of hidden classes, which are expensive when an object is
                // constantly changing shape.
                map.__ = undefined;
                delete map.__;
                return map;
            }
            var MapIterator = /** @class */ (function () {
                function MapIterator(currentEntry, selector) {
                    this.currentEntry = currentEntry;
                    this.selector = selector;
                }
                MapIterator.prototype.next = function () {
                    // Navigate to the next entry.
                    while (this.currentEntry) {
                        var skipNext = !!this.currentEntry.skipNext;
                        this.currentEntry = this.currentEntry.nextEntry;
                        if (!skipNext) {
                            break;
                        }
                    }
                    if (this.currentEntry) {
                        return { value: this.selector(this.currentEntry.key, this.currentEntry.value), done: false };
                    }
                    else {
                        return { value: undefined, done: true };
                    }
                };
                return MapIterator;
            }());
            return /** @class */ (function () {
                function class_1() {
                    this.data = createDictionaryObject();
                    this.size = 0;
                    // Create a first (stub) map entry that will not contain a key
                    // and value but serves as starting point for iterators.
                    this.firstEntry = {};
                    // When the map is empty, the last entry is the same as the
                    // first one.
                    this.lastEntry = this.firstEntry;
                }
                class_1.prototype.get = function (key) {
                    var entry = this.data[key];
                    return entry && entry.value;
                };
                class_1.prototype.set = function (key, value) {
                    if (!this.has(key)) {
                        this.size++;
                        // Create a new entry that will be appended at the
                        // end of the linked list.
                        var newEntry = {
                            key: key,
                            value: value
                        };
                        this.data[key] = newEntry;
                        // Adjust the references.
                        var previousLastEntry = this.lastEntry;
                        previousLastEntry.nextEntry = newEntry;
                        newEntry.previousEntry = previousLastEntry;
                        this.lastEntry = newEntry;
                    }
                    else {
                        this.data[key].value = value;
                    }
                    return this;
                };
                class_1.prototype.has = function (key) {
                    // eslint-disable-next-line no-in-operator
                    return key in this.data;
                };
                class_1.prototype.delete = function (key) {
                    if (this.has(key)) {
                        this.size--;
                        var entry = this.data[key];
                        delete this.data[key];
                        // Adjust the linked list references of the neighbor entries.
                        var previousEntry = entry.previousEntry;
                        previousEntry.nextEntry = entry.nextEntry;
                        if (entry.nextEntry) {
                            entry.nextEntry.previousEntry = previousEntry;
                        }
                        // When the deleted entry was the last one, we need to
                        // adjust the lastEntry reference.
                        if (this.lastEntry === entry) {
                            this.lastEntry = previousEntry;
                        }
                        // Adjust the forward reference of the deleted entry
                        // in case an iterator still references it. This allows us
                        // to throw away the entry, but when an active iterator
                        // (which points to the current entry) continues, it will
                        // navigate to the entry that originally came before the
                        // current one and skip it.
                        entry.previousEntry = undefined;
                        entry.nextEntry = previousEntry;
                        entry.skipNext = true;
                        return true;
                    }
                    return false;
                };
                class_1.prototype.clear = function () {
                    this.data = createDictionaryObject();
                    this.size = 0;
                    // Reset the linked list. Note that we must adjust the forward
                    // references of the deleted entries to ensure iterators stuck
                    // in the middle of the list don't continue with deleted entries,
                    // but can continue with new entries added after the clear()
                    // operation.
                    var firstEntry = this.firstEntry;
                    var currentEntry = firstEntry.nextEntry;
                    while (currentEntry) {
                        var nextEntry = currentEntry.nextEntry;
                        currentEntry.previousEntry = undefined;
                        currentEntry.nextEntry = firstEntry;
                        currentEntry.skipNext = true;
                        currentEntry = nextEntry;
                    }
                    firstEntry.nextEntry = undefined;
                    this.lastEntry = firstEntry;
                };
                class_1.prototype.keys = function () {
                    return new MapIterator(this.firstEntry, function (key) { return key; });
                };
                class_1.prototype.values = function () {
                    return new MapIterator(this.firstEntry, function (_key, value) { return value; });
                };
                class_1.prototype.entries = function () {
                    return new MapIterator(this.firstEntry, function (key, value) { return [key, value]; });
                };
                class_1.prototype.forEach = function (action) {
                    var iterator = this.entries();
                    while (true) {
                        var iterResult = iterator.next();
                        if (iterResult.done) {
                            break;
                        }
                        var _a = iterResult.value, key = _a[0], value = _a[1];
                        action(value, key);
                    }
                };
                return class_1;
            }());
        }
        ts.createMapShim = createMapShim;
    })(ts || (ts = {}));
    var ts;
    (function (ts) {
        // WARNING: The script `configurePrerelease.ts` uses a regexp to parse out these values.
        // If changing the text in this section, be sure to test `configurePrerelease` too.
        ts.versionMajorMinor = "3.9";
        /** The version of the TypeScript compiler release */
        ts.version = "3.9.5";
        /**
         * Returns the native Map implementation if it is available and compatible (i.e. supports iteration).
         */
        /* @internal */
        function tryGetNativeMap() {
            // eslint-disable-next-line no-in-operator
            return typeof Map !== "undefined" && "entries" in Map.prototype ? Map : undefined;
        }
        ts.tryGetNativeMap = tryGetNativeMap;
        /* @internal */
        ts.Map = tryGetNativeMap() || (function () {
            // NOTE: createMapShim will be defined for typescriptServices.js but not for tsc.js, so we must test for it.
            if (typeof ts.createMapShim === "function") {
                return ts.createMapShim();
            }
            throw new Error("TypeScript requires an environment that provides a compatible native Map implementation.");
        })();
        /* @internal */
        var Comparison;
        (function (Comparison) {
            Comparison[Comparison["LessThan"] = -1] = "LessThan";
            Comparison[Comparison["EqualTo"] = 0] = "EqualTo";
            Comparison[Comparison["GreaterThan"] = 1] = "GreaterThan";
        })(Comparison = ts.Comparison || (ts.Comparison = {}));
    })(ts || (ts = {}));
    /* @internal */
    var ts;
    (function (ts) {
        ts.emptyArray = [];
        /** Create a new map. */
        function createMap() {
            return new ts.Map();
        }
        ts.createMap = createMap;
        /** Create a new map from an array of entries. */
        function createMapFromEntries(entries) {
            var map = createMap();
            for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                var _a = entries_1[_i], key = _a[0], value = _a[1];
                map.set(key, value);
            }
            return map;
        }
        ts.createMapFromEntries = createMapFromEntries;
        /** Create a new map from a template object is provided, the map will copy entries from it. */
        function createMapFromTemplate(template) {
            var map = new ts.Map();
            // Copies keys/values from template. Note that for..in will not throw if
            // template is undefined, and instead will just exit the loop.
            for (var key in template) {
                if (hasOwnProperty.call(template, key)) {
                    map.set(key, template[key]);
                }
            }
            return map;
        }
        ts.createMapFromTemplate = createMapFromTemplate;
        function length(array) {
            return array ? array.length : 0;
        }
        ts.length = length;
        /**
         * Iterates through 'array' by index and performs the callback on each element of array until the callback
         * returns a truthy value, then returns that value.
         * If no such value is found, the callback is applied to each element of array and undefined is returned.
         */
        function forEach(array, callback) {
            if (array) {
                for (var i = 0; i < array.length; i++) {
                    var result = callback(array[i], i);
                    if (result) {
                        return result;
                    }
                }
            }
            return undefined;
        }
        ts.forEach = forEach;
        /**
         * Like `forEach`, but iterates in reverse order.
         */
        function forEachRight(array, callback) {
            if (array) {
                for (var i = array.length - 1; i >= 0; i--) {
                    var result = callback(array[i], i);
                    if (result) {
                        return result;
                    }
                }
            }
            return undefined;
        }
        ts.forEachRight = forEachRight;
        /** Like `forEach`, but suitable for use with numbers and strings (which may be falsy). */
        function firstDefined(array, callback) {
            if (array === undefined) {
                return undefined;
            }
            for (var i = 0; i < array.length; i++) {
                var result = callback(array[i], i);
                if (result !== undefined) {
                    return result;
                }
            }
            return undefined;
        }
        ts.firstDefined = firstDefined;
        function firstDefinedIterator(iter, callback) {
            while (true) {
                var iterResult = iter.next();
                if (iterResult.done) {
                    return undefined;
                }
                var result = callback(iterResult.value);
                if (result !== undefined) {
                    return result;
                }
            }
        }
        ts.firstDefinedIterator = firstDefinedIterator;
        function zipWith(arrayA, arrayB, callback) {
            var result = [];
            ts.Debug.assertEqual(arrayA.length, arrayB.length);
            for (var i = 0; i < arrayA.length; i++) {
                result.push(callback(arrayA[i], arrayB[i], i));
            }
            return result;
        }
        ts.zipWith = zipWith;
        function zipToIterator(arrayA, arrayB) {
            ts.Debug.assertEqual(arrayA.length, arrayB.length);
            var i = 0;
            return {
                next: function () {
                    if (i === arrayA.length) {
                        return { value: undefined, done: true };
                    }
                    i++;
                    return { value: [arrayA[i - 1], arrayB[i - 1]], done: false };
                }
            };
        }
        ts.zipToIterator = zipToIterator;
        function zipToMap(keys, values) {
            ts.Debug.assert(keys.length === values.length);
            var map = createMap();
            for (var i = 0; i < keys.length; ++i) {
                map.set(keys[i], values[i]);
            }
            return map;
        }
        ts.zipToMap = zipToMap;
        /**
         * Iterates through `array` by index and performs the callback on each element of array until the callback
         * returns a falsey value, then returns false.
         * If no such value is found, the callback is applied to each element of array and `true` is returned.
         */
        function every(array, callback) {
            if (array) {
                for (var i = 0; i < array.length; i++) {
                    if (!callback(array[i], i)) {
                        return false;
                    }
                }
            }
            return true;
        }
        ts.every = every;
        function find(array, predicate) {
            for (var i = 0; i < array.length; i++) {
                var value = array[i];
                if (predicate(value, i)) {
                    return value;
                }
            }
            return undefined;
        }
        ts.find = find;
        function findLast(array, predicate) {
            for (var i = array.length - 1; i >= 0; i--) {
                var value = array[i];
                if (predicate(value, i)) {
                    return value;
                }
            }
            return undefined;
        }
        ts.findLast = findLast;
        /** Works like Array.prototype.findIndex, returning `-1` if no element satisfying the predicate is found. */
        function findIndex(array, predicate, startIndex) {
            for (var i = startIndex || 0; i < array.length; i++) {
                if (predicate(array[i], i)) {
                    return i;
                }
            }
            return -1;
        }
        ts.findIndex = findIndex;
        function findLastIndex(array, predicate, startIndex) {
            for (var i = startIndex === undefined ? array.length - 1 : startIndex; i >= 0; i--) {
                if (predicate(array[i], i)) {
                    return i;
                }
            }
            return -1;
        }
        ts.findLastIndex = findLastIndex;
        /**
         * Returns the first truthy result of `callback`, or else fails.
         * This is like `forEach`, but never returns undefined.
         */
        function findMap(array, callback) {
            for (var i = 0; i < array.length; i++) {
                var result = callback(array[i], i);
                if (result) {
                    return result;
                }
            }
            return ts.Debug.fail();
        }
        ts.findMap = findMap;
        function contains(array, value, equalityComparer) {
            if (equalityComparer === void 0) { equalityComparer = equateValues; }
            if (array) {
                for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
                    var v = array_1[_i];
                    if (equalityComparer(v, value)) {
                        return true;
                    }
                }
            }
            return false;
        }
        ts.contains = contains;
        function arraysEqual(a, b, equalityComparer) {
            if (equalityComparer === void 0) { equalityComparer = equateValues; }
            return a.length === b.length && a.every(function (x, i) { return equalityComparer(x, b[i]); });
        }
        ts.arraysEqual = arraysEqual;
        function indexOfAnyCharCode(text, charCodes, start) {
            for (var i = start || 0; i < text.length; i++) {
                if (contains(charCodes, text.charCodeAt(i))) {
                    return i;
                }
            }
            return -1;
        }
        ts.indexOfAnyCharCode = indexOfAnyCharCode;
        function countWhere(array, predicate) {
            var count = 0;
            if (array) {
                for (var i = 0; i < array.length; i++) {
                    var v = array[i];
                    if (predicate(v, i)) {
                        count++;
                    }
                }
            }
            return count;
        }
        ts.countWhere = countWhere;
        function filter(array, f) {
            if (array) {
                var len = array.length;
                var i = 0;
                while (i < len && f(array[i]))
                    i++;
                if (i < len) {
                    var result = array.slice(0, i);
                    i++;
                    while (i < len) {
                        var item = array[i];
                        if (f(item)) {
                            result.push(item);
                        }
                        i++;
                    }
                    return result;
                }
            }
            return array;
        }
        ts.filter = filter;
        function filterMutate(array, f) {
            var outIndex = 0;
            for (var i = 0; i < array.length; i++) {
                if (f(array[i], i, array)) {
                    array[outIndex] = array[i];
                    outIndex++;
                }
            }
            array.length = outIndex;
        }
        ts.filterMutate = filterMutate;
        function clear(array) {
            array.length = 0;
        }
        ts.clear = clear;
        function map(array, f) {
            var result;
            if (array) {
                result = [];
                for (var i = 0; i < array.length; i++) {
                    result.push(f(array[i], i));
                }
            }
            return result;
        }
        ts.map = map;
        function mapIterator(iter, mapFn) {
            return {
                next: function () {
                    var iterRes = iter.next();
                    return iterRes.done ? iterRes : { value: mapFn(iterRes.value), done: false };
                }
            };
        }
        ts.mapIterator = mapIterator;
        function sameMap(array, f) {
            if (array) {
                for (var i = 0; i < array.length; i++) {
                    var item = array[i];
                    var mapped = f(item, i);
                    if (item !== mapped) {
                        var result = array.slice(0, i);
                        result.push(mapped);
                        for (i++; i < array.length; i++) {
                            result.push(f(array[i], i));
                        }
                        return result;
                    }
                }
            }
            return array;
        }
        ts.sameMap = sameMap;
        /**
         * Flattens an array containing a mix of array or non-array elements.
         *
         * @param array The array to flatten.
         */
        function flatten(array) {
            var result = [];
            for (var _i = 0, array_2 = array; _i < array_2.length; _i++) {
                var v = array_2[_i];
                if (v) {
                    if (isArray(v)) {
                        addRange(result, v);
                    }
                    else {
                        result.push(v);
                    }
                }
            }
            return result;
        }
        ts.flatten = flatten;
        /**
         * Maps an array. If the mapped value is an array, it is spread into the result.
         *
         * @param array The array to map.
         * @param mapfn The callback used to map the result into one or more values.
         */
        function flatMap(array, mapfn) {
            var result;
            if (array) {
                for (var i = 0; i < array.length; i++) {
                    var v = mapfn(array[i], i);
                    if (v) {
                        if (isArray(v)) {
                            result = addRange(result, v);
                        }
                        else {
                            result = append(result, v);
                        }
                    }
                }
            }
            return result || ts.emptyArray;
        }
        ts.flatMap = flatMap;
        function flatMapToMutable(array, mapfn) {
            var result = [];
            if (array) {
                for (var i = 0; i < array.length; i++) {
                    var v = mapfn(array[i], i);
                    if (v) {
                        if (isArray(v)) {
                            addRange(result, v);
                        }
                        else {
                            result.push(v);
                        }
                    }
                }
            }
            return result;
        }
        ts.flatMapToMutable = flatMapToMutable;
        function flatMapIterator(iter, mapfn) {
            var first = iter.next();
            if (first.done) {
                return ts.emptyIterator;
            }
            var currentIter = getIterator(first.value);
            return {
                next: function () {
                    while (true) {
                        var currentRes = currentIter.next();
                        if (!currentRes.done) {
                            return currentRes;
                        }
                        var iterRes = iter.next();
                        if (iterRes.done) {
                            return iterRes;
                        }
                        currentIter = getIterator(iterRes.value);
                    }
                },
            };
            function getIterator(x) {
                var res = mapfn(x);
                return res === undefined ? ts.emptyIterator : isArray(res) ? arrayIterator(res) : res;
            }
        }
        ts.flatMapIterator = flatMapIterator;
        function sameFlatMap(array, mapfn) {
            var result;
            if (array) {
                for (var i = 0; i < array.length; i++) {
                    var item = array[i];
                    var mapped = mapfn(item, i);
                    if (result || item !== mapped || isArray(mapped)) {
                        if (!result) {
                            result = array.slice(0, i);
                        }
                        if (isArray(mapped)) {
                            addRange(result, mapped);
                        }
                        else {
                            result.push(mapped);
                        }
                    }
                }
            }
            return result || array;
        }
        ts.sameFlatMap = sameFlatMap;
        function mapAllOrFail(array, mapFn) {
            var result = [];
            for (var i = 0; i < array.length; i++) {
                var mapped = mapFn(array[i], i);
                if (mapped === undefined) {
                    return undefined;
                }
                result.push(mapped);
            }
            return result;
        }
        ts.mapAllOrFail = mapAllOrFail;
        function mapDefined(array, mapFn) {
            var result = [];
            if (array) {
                for (var i = 0; i < array.length; i++) {
                    var mapped = mapFn(array[i], i);
                    if (mapped !== undefined) {
                        result.push(mapped);
                    }
                }
            }
            return result;
        }
        ts.mapDefined = mapDefined;
        function mapDefinedIterator(iter, mapFn) {
            return {
                next: function () {
                    while (true) {
                        var res = iter.next();
                        if (res.done) {
                            return res;
                        }
                        var value = mapFn(res.value);
                        if (value !== undefined) {
                            return { value: value, done: false };
                        }
                    }
                }
            };
        }
        ts.mapDefinedIterator = mapDefinedIterator;
        function mapDefinedMap(map, mapValue, mapKey) {
            if (mapKey === void 0) { mapKey = identity; }
            var result = createMap();
            map.forEach(function (value, key) {
                var mapped = mapValue(value, key);
                if (mapped !== undefined) {
                    result.set(mapKey(key), mapped);
                }
            });
            return result;
        }
        ts.mapDefinedMap = mapDefinedMap;
        ts.emptyIterator = { next: function () { return ({ value: undefined, done: true }); } };
        function singleIterator(value) {
            var done = false;
            return {
                next: function () {
                    var wasDone = done;
                    done = true;
                    return wasDone ? { value: undefined, done: true } : { value: value, done: false };
                }
            };
        }
        ts.singleIterator = singleIterator;
        function spanMap(array, keyfn, mapfn) {
            var result;
            if (array) {
                result = [];
                var len = array.length;
                var previousKey = void 0;
                var key = void 0;
                var start = 0;
                var pos = 0;
                while (start < len) {
                    while (pos < len) {
                        var value = array[pos];
                        key = keyfn(value, pos);
                        if (pos === 0) {
                            previousKey = key;
                        }
                        else if (key !== previousKey) {
                            break;
                        }
                        pos++;
                    }
                    if (start < pos) {
                        var v = mapfn(array.slice(start, pos), previousKey, start, pos);
                        if (v) {
                            result.push(v);
                        }
                        start = pos;
                    }
                    previousKey = key;
                    pos++;
                }
            }
            return result;
        }
        ts.spanMap = spanMap;
        function mapEntries(map, f) {
            if (!map) {
                return undefined;
            }
            var result = createMap();
            map.forEach(function (value, key) {
                var _a = f(key, value), newKey = _a[0], newValue = _a[1];
                result.set(newKey, newValue);
            });
            return result;
        }
        ts.mapEntries = mapEntries;
        function some(array, predicate) {
            if (array) {
                if (predicate) {
                    for (var _i = 0, array_3 = array; _i < array_3.length; _i++) {
                        var v = array_3[_i];
                        if (predicate(v)) {
                            return true;
                        }
                    }
                }
                else {
                    return array.length > 0;
                }
            }
            return false;
        }
        ts.some = some;
        /** Calls the callback with (start, afterEnd) index pairs for each range where 'pred' is true. */
        function getRangesWhere(arr, pred, cb) {
            var start;
            for (var i = 0; i < arr.length; i++) {
                if (pred(arr[i])) {
                    start = start === undefined ? i : start;
                }
                else {
                    if (start !== undefined) {
                        cb(start, i);
                        start = undefined;
                    }
                }
            }
            if (start !== undefined)
                cb(start, arr.length);
        }
        ts.getRangesWhere = getRangesWhere;
        function concatenate(array1, array2) {
            if (!some(array2))
                return array1;
            if (!some(array1))
                return array2;
            return __spreadArrays(array1, array2);
        }
        ts.concatenate = concatenate;
        function selectIndex(_, i) {
            return i;
        }
        function indicesOf(array) {
            return array.map(selectIndex);
        }
        ts.indicesOf = indicesOf;
        function deduplicateRelational(array, equalityComparer, comparer) {
            // Perform a stable sort of the array. This ensures the first entry in a list of
            // duplicates remains the first entry in the result.
            var indices = indicesOf(array);
            stableSortIndices(array, indices, comparer);
            var last = array[indices[0]];
            var deduplicated = [indices[0]];
            for (var i = 1; i < indices.length; i++) {
                var index = indices[i];
                var item = array[index];
                if (!equalityComparer(last, item)) {
                    deduplicated.push(index);
                    last = item;
                }
            }
            // restore original order
            deduplicated.sort();
            return deduplicated.map(function (i) { return array[i]; });
        }
        function deduplicateEquality(array, equalityComparer) {
            var result = [];
            for (var _i = 0, array_4 = array; _i < array_4.length; _i++) {
                var item = array_4[_i];
                pushIfUnique(result, item, equalityComparer);
            }
            return result;
        }
        /**
         * Deduplicates an unsorted array.
         * @param equalityComparer An `EqualityComparer` used to determine if two values are duplicates.
         * @param comparer An optional `Comparer` used to sort entries before comparison, though the
         * result will remain in the original order in `array`.
         */
        function deduplicate(array, equalityComparer, comparer) {
            return array.length === 0 ? [] :
                array.length === 1 ? array.slice() :
                    comparer ? deduplicateRelational(array, equalityComparer, comparer) :
                        deduplicateEquality(array, equalityComparer);
        }
        ts.deduplicate = deduplicate;
        /**
         * Deduplicates an array that has already been sorted.
         */
        function deduplicateSorted(array, comparer) {
            if (array.length === 0)
                return ts.emptyArray;
            var last = array[0];
            var deduplicated = [last];
            for (var i = 1; i < array.length; i++) {
                var next = array[i];
                switch (comparer(next, last)) {
                    // equality comparison
                    case true:
                    // relational comparison
                    // falls through
                    case 0 /* EqualTo */:
                        continue;
                    case -1 /* LessThan */:
                        // If `array` is sorted, `next` should **never** be less than `last`.
                        return ts.Debug.fail("Array is unsorted.");
                }
                deduplicated.push(last = next);
            }
            return deduplicated;
        }
        function insertSorted(array, insert, compare) {
            if (array.length === 0) {
                array.push(insert);
                return;
            }
            var insertIndex = binarySearch(array, insert, identity, compare);
            if (insertIndex < 0) {
                array.splice(~insertIndex, 0, insert);
            }
        }
        ts.insertSorted = insertSorted;
        function sortAndDeduplicate(array, comparer, equalityComparer) {
            return deduplicateSorted(sort(array, comparer), equalityComparer || comparer || compareStringsCaseSensitive);
        }
        ts.sortAndDeduplicate = sortAndDeduplicate;
        function arrayIsEqualTo(array1, array2, equalityComparer) {
            if (equalityComparer === void 0) { equalityComparer = equateValues; }
            if (!array1 || !array2) {
                return array1 === array2;
            }
            if (array1.length !== array2.length) {
                return false;
            }
            for (var i = 0; i < array1.length; i++) {
                if (!equalityComparer(array1[i], array2[i], i)) {
                    return false;
                }
            }
            return true;
        }
        ts.arrayIsEqualTo = arrayIsEqualTo;
        function compact(array) {
            var result;
            if (array) {
                for (var i = 0; i < array.length; i++) {
                    var v = array[i];
                    if (result || !v) {
                        if (!result) {
                            result = array.slice(0, i);
                        }
                        if (v) {
                            result.push(v);
                        }
                    }
                }
            }
            return result || array;
        }
        ts.compact = compact;
        /**
         * Gets the relative complement of `arrayA` with respect to `arrayB`, returning the elements that
         * are not present in `arrayA` but are present in `arrayB`. Assumes both arrays are sorted
         * based on the provided comparer.
         */
        function relativeComplement(arrayA, arrayB, comparer) {
            if (!arrayB || !arrayA || arrayB.length === 0 || arrayA.length === 0)
                return arrayB;
            var result = [];
            loopB: for (var offsetA = 0, offsetB = 0; offsetB < arrayB.length; offsetB++) {
                if (offsetB > 0) {
                    // Ensure `arrayB` is properly sorted.
                    ts.Debug.assertGreaterThanOrEqual(comparer(arrayB[offsetB], arrayB[offsetB - 1]), 0 /* EqualTo */);
                }
                loopA: for (var startA = offsetA; offsetA < arrayA.length; offsetA++) {
                    if (offsetA > startA) {
                        // Ensure `arrayA` is properly sorted. We only need to perform this check if
                        // `offsetA` has changed since we entered the loop.
                        ts.Debug.assertGreaterThanOrEqual(comparer(arrayA[offsetA], arrayA[offsetA - 1]), 0 /* EqualTo */);
                    }
                    switch (comparer(arrayB[offsetB], arrayA[offsetA])) {
                        case -1 /* LessThan */:
                            // If B is less than A, B does not exist in arrayA. Add B to the result and
                            // move to the next element in arrayB without changing the current position
                            // in arrayA.
                            result.push(arrayB[offsetB]);
                            continue loopB;
                        case 0 /* EqualTo */:
                            // If B is equal to A, B exists in arrayA. Move to the next element in
                            // arrayB without adding B to the result or changing the current position
                            // in arrayA.
                            continue loopB;
                        case 1 /* GreaterThan */:
                            // If B is greater than A, we need to keep looking for B in arrayA. Move to
                            // the next element in arrayA and recheck.
                            continue loopA;
                    }
                }
            }
            return result;
        }
        ts.relativeComplement = relativeComplement;
        function sum(array, prop) {
            var result = 0;
            for (var _i = 0, array_5 = array; _i < array_5.length; _i++) {
                var v = array_5[_i];
                result += v[prop];
            }
            return result;
        }
        ts.sum = sum;
        function append(to, value) {
            if (value === undefined)
                return to;
            if (to === undefined)
                return [value];
            to.push(value);
            return to;
        }
        ts.append = append;
        function combine(xs, ys) {
            if (xs === undefined)
                return ys;
            if (ys === undefined)
                return xs;
            if (isArray(xs))
                return isArray(ys) ? concatenate(xs, ys) : append(xs, ys);
            if (isArray(ys))
                return append(ys, xs);
            return [xs, ys];
        }
        ts.combine = combine;
        /**
         * Gets the actual offset into an array for a relative offset. Negative offsets indicate a
         * position offset from the end of the array.
         */
        function toOffset(array, offset) {
            return offset < 0 ? array.length + offset : offset;
        }
        function addRange(to, from, start, end) {
            if (from === undefined || from.length === 0)
                return to;
            if (to === undefined)
                return from.slice(start, end);
            start = start === undefined ? 0 : toOffset(from, start);
            end = end === undefined ? from.length : toOffset(from, end);
            for (var i = start; i < end && i < from.length; i++) {
                if (from[i] !== undefined) {
                    to.push(from[i]);
                }
            }
            return to;
        }
        ts.addRange = addRange;
        /**
         * @return Whether the value was added.
         */
        function pushIfUnique(array, toAdd, equalityComparer) {
            if (contains(array, toAdd, equalityComparer)) {
                return false;
            }
            else {
                array.push(toAdd);
                return true;
            }
        }
        ts.pushIfUnique = pushIfUnique;
        /**
         * Unlike `pushIfUnique`, this can take `undefined` as an input, and returns a new array.
         */
        function appendIfUnique(array, toAdd, equalityComparer) {
            if (array) {
                pushIfUnique(array, toAdd, equalityComparer);
                return array;
            }
            else {
                return [toAdd];
            }
        }
        ts.appendIfUnique = appendIfUnique;
        function stableSortIndices(array, indices, comparer) {
            // sort indices by value then position
            indices.sort(function (x, y) { return comparer(array[x], array[y]) || compareValues(x, y); });
        }
        /**
         * Returns a new sorted array.
         */
        function sort(array, comparer) {
            return (array.length === 0 ? array : array.slice().sort(comparer));
        }
        ts.sort = sort;
        function arrayIterator(array) {
            var i = 0;
            return { next: function () {
                    if (i === array.length) {
                        return { value: undefined, done: true };
                    }
                    else {
                        i++;
                        return { value: array[i - 1], done: false };
                    }
                } };
        }
        ts.arrayIterator = arrayIterator;
        function arrayReverseIterator(array) {
            var i = array.length;
            return {
                next: function () {
                    if (i === 0) {
                        return { value: undefined, done: true };
                    }
                    else {
                        i--;
                        return { value: array[i], done: false };
                    }
                }
            };
        }
        ts.arrayReverseIterator = arrayReverseIterator;
        /**
         * Stable sort of an array. Elements equal to each other maintain their relative position in the array.
         */
        function stableSort(array, comparer) {
            var indices = indicesOf(array);
            stableSortIndices(array, indices, comparer);
            return indices.map(function (i) { return array[i]; });
        }
        ts.stableSort = stableSort;
        function rangeEquals(array1, array2, pos, end) {
            while (pos < end) {
                if (array1[pos] !== array2[pos]) {
                    return false;
                }
                pos++;
            }
            return true;
        }
        ts.rangeEquals = rangeEquals;
        /**
         * Returns the element at a specific offset in an array if non-empty, `undefined` otherwise.
         * A negative offset indicates the element should be retrieved from the end of the array.
         */
        function elementAt(array, offset) {
            if (array) {
                offset = toOffset(array, offset);
                if (offset < array.length) {
                    return array[offset];
                }
            }
            return undefined;
        }
        ts.elementAt = elementAt;
        /**
         * Returns the first element of an array if non-empty, `undefined` otherwise.
         */
        function firstOrUndefined(array) {
            return array.length === 0 ? undefined : array[0];
        }
        ts.firstOrUndefined = firstOrUndefined;
        function first(array) {
            ts.Debug.assert(array.length !== 0);
            return array[0];
        }
        ts.first = first;
        /**
         * Returns the last element of an array if non-empty, `undefined` otherwise.
         */
        function lastOrUndefined(array) {
            return array.length === 0 ? undefined : array[array.length - 1];
        }
        ts.lastOrUndefined = lastOrUndefined;
        function last(array) {
            ts.Debug.assert(array.length !== 0);
            return array[array.length - 1];
        }
        ts.last = last;
        /**
         * Returns the only element of an array if it contains only one element, `undefined` otherwise.
         */
        function singleOrUndefined(array) {
            return array && array.length === 1
                ? array[0]
                : undefined;
        }
        ts.singleOrUndefined = singleOrUndefined;
        function singleOrMany(array) {
            return array && array.length === 1
                ? array[0]
                : array;
        }
        ts.singleOrMany = singleOrMany;
        function replaceElement(array, index, value) {
            var result = array.slice(0);
            result[index] = value;
            return result;
        }
        ts.replaceElement = replaceElement;
        /**
         * Performs a binary search, finding the index at which `value` occurs in `array`.
         * If no such index is found, returns the 2's-complement of first index at which
         * `array[index]` exceeds `value`.
         * @param array A sorted array whose first element must be no larger than number
         * @param value The value to be searched for in the array.
         * @param keySelector A callback used to select the search key from `value` and each element of
         * `array`.
         * @param keyComparer A callback used to compare two keys in a sorted array.
         * @param offset An offset into `array` at which to start the search.
         */
        function binarySearch(array, value, keySelector, keyComparer, offset) {
            return binarySearchKey(array, keySelector(value), keySelector, keyComparer, offset);
        }
        ts.binarySearch = binarySearch;
        /**
         * Performs a binary search, finding the index at which an object with `key` occurs in `array`.
         * If no such index is found, returns the 2's-complement of first index at which
         * `array[index]` exceeds `key`.
         * @param array A sorted array whose first element must be no larger than number
         * @param key The key to be searched for in the array.
         * @param keySelector A callback used to select the search key from each element of `array`.
         * @param keyComparer A callback used to compare two keys in a sorted array.
         * @param offset An offset into `array` at which to start the search.
         */
        function binarySearchKey(array, key, keySelector, keyComparer, offset) {
            if (!some(array)) {
                return -1;
            }
            var low = offset || 0;
            var high = array.length - 1;
            while (low <= high) {
                var middle = low + ((high - low) >> 1);
                var midKey = keySelector(array[middle]);
                switch (keyComparer(midKey, key)) {
                    case -1 /* LessThan */:
                        low = middle + 1;
                        break;
                    case 0 /* EqualTo */:
                        return middle;
                    case 1 /* GreaterThan */:
                        high = middle - 1;
                        break;
                }
            }
            return ~low;
        }
        ts.binarySearchKey = binarySearchKey;
        function reduceLeft(array, f, initial, start, count) {
            if (array && array.length > 0) {
                var size = array.length;
                if (size > 0) {
                    var pos = start === undefined || start < 0 ? 0 : start;
                    var end = count === undefined || pos + count > size - 1 ? size - 1 : pos + count;
                    var result = void 0;
                    if (arguments.length <= 2) {
                        result = array[pos];
                        pos++;
                    }
                    else {
                        result = initial;
                    }
                    while (pos <= end) {
                        result = f(result, array[pos], pos);
                        pos++;
                    }
                    return result;
                }
            }
            return initial;
        }
        ts.reduceLeft = reduceLeft;
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        /**
         * Indicates whether a map-like contains an own property with the specified key.
         *
         * @param map A map-like.
         * @param key A property key.
         */
        function hasProperty(map, key) {
            return hasOwnProperty.call(map, key);
        }
        ts.hasProperty = hasProperty;
        /**
         * Gets the value of an owned property in a map-like.
         *
         * @param map A map-like.
         * @param key A property key.
         */
        function getProperty(map, key) {
            return hasOwnProperty.call(map, key) ? map[key] : undefined;
        }
        ts.getProperty = getProperty;
        /**
         * Gets the owned, enumerable property keys of a map-like.
         */
        function getOwnKeys(map) {
            var keys = [];
            for (var key in map) {
                if (hasOwnProperty.call(map, key)) {
                    keys.push(key);
                }
            }
            return keys;
        }
        ts.getOwnKeys = getOwnKeys;
        function getAllKeys(obj) {
            var result = [];
            do {
                var names = Object.getOwnPropertyNames(obj);
                for (var _i = 0, names_1 = names; _i < names_1.length; _i++) {
                    var name = names_1[_i];
                    pushIfUnique(result, name);
                }
            } while (obj = Object.getPrototypeOf(obj));
            return result;
        }
        ts.getAllKeys = getAllKeys;
        function getOwnValues(sparseArray) {
            var values = [];
            for (var key in sparseArray) {
                if (hasOwnProperty.call(sparseArray, key)) {
                    values.push(sparseArray[key]);
                }
            }
            return values;
        }
        ts.getOwnValues = getOwnValues;
        function arrayFrom(iterator, map) {
            var result = [];
            for (var iterResult = iterator.next(); !iterResult.done; iterResult = iterator.next()) {
                result.push(map ? map(iterResult.value) : iterResult.value);
            }
            return result;
        }
        ts.arrayFrom = arrayFrom;
        function assign(t) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {
                var arg = args_1[_a];
                if (arg === undefined)
                    continue;
                for (var p in arg) {
                    if (hasProperty(arg, p)) {
                        t[p] = arg[p];
                    }
                }
            }
            return t;
        }
        ts.assign = assign;
        /**
         * Performs a shallow equality comparison of the contents of two map-likes.
         *
         * @param left A map-like whose properties should be compared.
         * @param right A map-like whose properties should be compared.
         */
        function equalOwnProperties(left, right, equalityComparer) {
            if (equalityComparer === void 0) { equalityComparer = equateValues; }
            if (left === right)
                return true;
            if (!left || !right)
                return false;
            for (var key in left) {
                if (hasOwnProperty.call(left, key)) {
                    if (!hasOwnProperty.call(right, key))
                        return false;
                    if (!equalityComparer(left[key], right[key]))
                        return false;
                }
            }
            for (var key in right) {
                if (hasOwnProperty.call(right, key)) {
                    if (!hasOwnProperty.call(left, key))
                        return false;
                }
            }
            return true;
        }
        ts.equalOwnProperties = equalOwnProperties;
        function arrayToMap(array, makeKey, makeValue) {
            if (makeValue === void 0) { makeValue = identity; }
            var result = createMap();
            for (var _i = 0, array_6 = array; _i < array_6.length; _i++) {
                var value = array_6[_i];
                var key = makeKey(value);
                if (key !== undefined)
                    result.set(key, makeValue(value));
            }
            return result;
        }
        ts.arrayToMap = arrayToMap;
        function arrayToNumericMap(array, makeKey, makeValue) {
            if (makeValue === void 0) { makeValue = identity; }
            var result = [];
            for (var _i = 0, array_7 = array; _i < array_7.length; _i++) {
                var value = array_7[_i];
                result[makeKey(value)] = makeValue(value);
            }
            return result;
        }
        ts.arrayToNumericMap = arrayToNumericMap;
        function arrayToMultiMap(values, makeKey, makeValue) {
            if (makeValue === void 0) { makeValue = identity; }
            var result = createMultiMap();
            for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
                var value = values_1[_i];
                result.add(makeKey(value), makeValue(value));
            }
            return result;
        }
        ts.arrayToMultiMap = arrayToMultiMap;
        function group(values, getGroupId, resultSelector) {
            if (resultSelector === void 0) { resultSelector = identity; }
            return arrayFrom(arrayToMultiMap(values, getGroupId).values(), resultSelector);
        }
        ts.group = group;
        function clone(object) {
            var result = {};
            for (var id in object) {
                if (hasOwnProperty.call(object, id)) {
                    result[id] = object[id];
                }
            }
            return result;
        }
        ts.clone = clone;
        /**
         * Creates a new object by adding the own properties of `second`, then the own properties of `first`.
         *
         * NOTE: This means that if a property exists in both `first` and `second`, the property in `first` will be chosen.
         */
        function extend(first, second) {
            var result = {};
            for (var id in second) {
                if (hasOwnProperty.call(second, id)) {
                    result[id] = second[id];
                }
            }
            for (var id in first) {
                if (hasOwnProperty.call(first, id)) {
                    result[id] = first[id];
                }
            }
            return result;
        }
        ts.extend = extend;
        function copyProperties(first, second) {
            for (var id in second) {
                if (hasOwnProperty.call(second, id)) {
                    first[id] = second[id];
                }
            }
        }
        ts.copyProperties = copyProperties;
        function maybeBind(obj, fn) {
            return fn ? fn.bind(obj) : undefined;
        }
        ts.maybeBind = maybeBind;
        function mapMap(map, f) {
            var result = createMap();
            map.forEach(function (t, key) { return result.set.apply(result, (f(t, key))); });
            return result;
        }
        ts.mapMap = mapMap;
        function createMultiMap() {
            var map = createMap();
            map.add = multiMapAdd;
            map.remove = multiMapRemove;
            return map;
        }
        ts.createMultiMap = createMultiMap;
        function multiMapAdd(key, value) {
            var values = this.get(key);
            if (values) {
                values.push(value);
            }
            else {
                this.set(key, values = [value]);
            }
            return values;
        }
        function multiMapRemove(key, value) {
            var values = this.get(key);
            if (values) {
                unorderedRemoveItem(values, value);
                if (!values.length) {
                    this.delete(key);
                }
            }
        }
        function createUnderscoreEscapedMultiMap() {
            return createMultiMap();
        }
        ts.createUnderscoreEscapedMultiMap = createUnderscoreEscapedMultiMap;
        /**
         * Tests whether a value is an array.
         */
        function isArray(value) {
            return Array.isArray ? Array.isArray(value) : value instanceof Array;
        }
        ts.isArray = isArray;
        function toArray(value) {
            return isArray(value) ? value : [value];
        }
        ts.toArray = toArray;
        /**
         * Tests whether a value is string
         */
        function isString(text) {
            return typeof text === "string";
        }
        ts.isString = isString;
        function isNumber(x) {
            return typeof x === "number";
        }
        ts.isNumber = isNumber;
        function tryCast(value, test) {
            return value !== undefined && test(value) ? value : undefined;
        }
        ts.tryCast = tryCast;
        function cast(value, test) {
            if (value !== undefined && test(value))
                return value;
            return ts.Debug.fail("Invalid cast. The supplied value " + value + " did not pass the test '" + ts.Debug.getFunctionName(test) + "'.");
        }
        ts.cast = cast;
        /** Does nothing. */
        function noop(_) { }
        ts.noop = noop;
        /** Do nothing and return false */
        function returnFalse() { return false; }
        ts.returnFalse = returnFalse;
        /** Do nothing and return true */
        function returnTrue() { return true; }
        ts.returnTrue = returnTrue;
        /** Do nothing and return undefined */
        function returnUndefined() { return undefined; }
        ts.returnUndefined = returnUndefined;
        /** Returns its argument. */
        function identity(x) { return x; }
        ts.identity = identity;
        /** Returns lower case string */
        function toLowerCase(x) { return x.toLowerCase(); }
        ts.toLowerCase = toLowerCase;
        // We convert the file names to lower case as key for file name on case insensitive file system
        // While doing so we need to handle special characters (eg \u0130) to ensure that we dont convert
        // it to lower case, fileName with its lowercase form can exist along side it.
        // Handle special characters and make those case sensitive instead
        //
        // |-#--|-Unicode--|-Char code-|-Desc-------------------------------------------------------------------|
        // | 1. | i        | 105       | Ascii i                                                                |
        // | 2. | I        | 73        | Ascii I                                                                |
        // |-------- Special characters ------------------------------------------------------------------------|
        // | 3. | \u0130   | 304       | Uppper case I with dot above                                           |
        // | 4. | i,\u0307 | 105,775   | i, followed by 775: Lower case of (3rd item)                           |
        // | 5. | I,\u0307 | 73,775    | I, followed by 775: Upper case of (4th item), lower case is (4th item) |
        // | 6. | \u0131   | 305       | Lower case i without dot, upper case is I (2nd item)                   |
        // | 7. | \u00DF   | 223       | Lower case sharp s                                                     |
        //
        // Because item 3 is special where in its lowercase character has its own
        // upper case form we cant convert its case.
        // Rest special characters are either already in lower case format or
        // they have corresponding upper case character so they dont need special handling
        //
        // But to avoid having to do string building for most common cases, also ignore
        // a-z, 0-9, \u0131, \u00DF, \, /, ., : and space
        var fileNameLowerCaseRegExp = /[^\u0130\u0131\u00DFa-z0-9\\/:\-_\. ]+/g;
        /**
         * Case insensitive file systems have descripencies in how they handle some characters (eg. turkish Upper case I with dot on top - \u0130)
         * This function is used in places where we want to make file name as a key on these systems
         * It is possible on mac to be able to refer to file name with I with dot on top as a fileName with its lower case form
         * But on windows we cannot. Windows can have fileName with I with dot on top next to its lower case and they can not each be referred with the lowercase forms
         * Technically we would want this function to be platform sepcific as well but
         * our api has till now only taken caseSensitive as the only input and just for some characters we dont want to update API and ensure all customers use those api
         * We could use upper case and we would still need to deal with the descripencies but
         * we want to continue using lower case since in most cases filenames are lowercasewe and wont need any case changes and avoid having to store another string for the key
         * So for this function purpose, we go ahead and assume character I with dot on top it as case sensitive since its very unlikely to use lower case form of that special character
         */
        function toFileNameLowerCase(x) {
            return fileNameLowerCaseRegExp.test(x) ?
                x.replace(fileNameLowerCaseRegExp, toLowerCase) :
                x;
        }
        ts.toFileNameLowerCase = toFileNameLowerCase;
        /** Throws an error because a function is not implemented. */
        function notImplemented() {
            throw new Error("Not implemented");
        }
        ts.notImplemented = notImplemented;
        function memoize(callback) {
            var value;
            return function () {
                if (callback) {
                    value = callback();
                    callback = undefined;
                }
                return value;
            };
        }
        ts.memoize = memoize;
        function compose(a, b, c, d, e) {
            if (!!e) {
                var args_2 = [];
                for (var i = 0; i < arguments.length; i++) {
                    args_2[i] = arguments[i];
                }
                return function (t) { return reduceLeft(args_2, function (u, f) { return f(u); }, t); };
            }
            else if (d) {
                return function (t) { return d(c(b(a(t)))); };
            }
            else if (c) {
                return function (t) { return c(b(a(t))); };
            }
            else if (b) {
                return function (t) { return b(a(t)); };
            }
            else if (a) {
                return function (t) { return a(t); };
            }
            else {
                return function (t) { return t; };
            }
        }
        ts.compose = compose;
        var AssertionLevel;
        (function (AssertionLevel) {
            AssertionLevel[AssertionLevel["None"] = 0] = "None";
            AssertionLevel[AssertionLevel["Normal"] = 1] = "Normal";
            AssertionLevel[AssertionLevel["Aggressive"] = 2] = "Aggressive";
            AssertionLevel[AssertionLevel["VeryAggressive"] = 3] = "VeryAggressive";
        })(AssertionLevel = ts.AssertionLevel || (ts.AssertionLevel = {}));
        function equateValues(a, b) {
            return a === b;
        }
        ts.equateValues = equateValues;
        /**
         * Compare the equality of two strings using a case-sensitive ordinal comparison.
         *
         * Case-sensitive comparisons compare both strings one code-point at a time using the integer
         * value of each code-point after applying `toUpperCase` to each string. We always map both
         * strings to their upper-case form as some unicode characters do not properly round-trip to
         * lowercase (such as `ẞ` (German sharp capital s)).
         */
        function equateStringsCaseInsensitive(a, b) {
            return a === b
                || a !== undefined
                    && b !== undefined
                    && a.toUpperCase() === b.toUpperCase();
        }
        ts.equateStringsCaseInsensitive = equateStringsCaseInsensitive;
        /**
         * Compare the equality of two strings using a case-sensitive ordinal comparison.
         *
         * Case-sensitive comparisons compare both strings one code-point at a time using the
         * integer value of each code-point.
         */
        function equateStringsCaseSensitive(a, b) {
            return equateValues(a, b);
        }
        ts.equateStringsCaseSensitive = equateStringsCaseSensitive;
        function compareComparableValues(a, b) {
            return a === b ? 0 /* EqualTo */ :
                a === undefined ? -1 /* LessThan */ :
                    b === undefined ? 1 /* GreaterThan */ :
                        a < b ? -1 /* LessThan */ :
                            1 /* GreaterThan */;
        }
        /**
         * Compare two numeric values for their order relative to each other.
         * To compare strings, use any of the `compareStrings` functions.
         */
        function compareValues(a, b) {
            return compareComparableValues(a, b);
        }
        ts.compareValues = compareValues;
        /**
         * Compare two TextSpans, first by `start`, then by `length`.
         */
        function compareTextSpans(a, b) {
            return compareValues(a === null || a === void 0 ? void 0 : a.start, b === null || b === void 0 ? void 0 : b.start) || compareValues(a === null || a === void 0 ? void 0 : a.length, b === null || b === void 0 ? void 0 : b.length);
        }
        ts.compareTextSpans = compareTextSpans;
        function min(a, b, compare) {
            return compare(a, b) === -1 /* LessThan */ ? a : b;
        }
        ts.min = min;
        /**
         * Compare two strings using a case-insensitive ordinal comparison.
         *
         * Ordinal comparisons are based on the difference between the unicode code points of both
         * strings. Characters with multiple unicode representations are considered unequal. Ordinal
         * comparisons provide predictable ordering, but place "a" after "B".
         *
         * Case-insensitive comparisons compare both strings one code-point at a time using the integer
         * value of each code-point after applying `toUpperCase` to each string. We always map both
         * strings to their upper-case form as some unicode characters do not properly round-trip to
         * lowercase (such as `áºž` (German sharp capital s)).
         */
        function compareStringsCaseInsensitive(a, b) {
            if (a === b)
                return 0 /* EqualTo */;
            if (a === undefined)
                return -1 /* LessThan */;
            if (b === undefined)
                return 1 /* GreaterThan */;
            a = a.toUpperCase();
            b = b.toUpperCase();
            return a < b ? -1 /* LessThan */ : a > b ? 1 /* GreaterThan */ : 0 /* EqualTo */;
        }
        ts.compareStringsCaseInsensitive = compareStringsCaseInsensitive;
        /**
         * Compare two strings using a case-sensitive ordinal comparison.
         *
         * Ordinal comparisons are based on the difference between the unicode code points of both
         * strings. Characters with multiple unicode representations are considered unequal. Ordinal
         * comparisons provide predictable ordering, but place "a" after "B".
         *
         * Case-sensitive comparisons compare both strings one code-point at a time using the integer
         * value of each code-point.
         */
        function compareStringsCaseSensitive(a, b) {
            return compareComparableValues(a, b);
        }
        ts.compareStringsCaseSensitive = compareStringsCaseSensitive;
        function getStringComparer(ignoreCase) {
            return ignoreCase ? compareStringsCaseInsensitive : compareStringsCaseSensitive;
        }
        ts.getStringComparer = getStringComparer;
        /**
         * Creates a string comparer for use with string collation in the UI.
         */
        var createUIStringComparer = (function () {
            var defaultComparer;
            var enUSComparer;
            var stringComparerFactory = getStringComparerFactory();
            return createStringComparer;
            function compareWithCallback(a, b, comparer) {
                if (a === b)
                    return 0 /* EqualTo */;
                if (a === undefined)
                    return -1 /* LessThan */;
                if (b === undefined)
                    return 1 /* GreaterThan */;
                var value = comparer(a, b);
                return value < 0 ? -1 /* LessThan */ : value > 0 ? 1 /* GreaterThan */ : 0 /* EqualTo */;
            }
            function createIntlCollatorStringComparer(locale) {
                // Intl.Collator.prototype.compare is bound to the collator. See NOTE in
                // http://www.ecma-international.org/ecma-402/2.0/#sec-Intl.Collator.prototype.compare
                var comparer = new Intl.Collator(locale, { usage: "sort", sensitivity: "variant" }).compare;
                return function (a, b) { return compareWithCallback(a, b, comparer); };
            }
            function createLocaleCompareStringComparer(locale) {
                // if the locale is not the default locale (`undefined`), use the fallback comparer.
                if (locale !== undefined)
                    return createFallbackStringComparer();
                return function (a, b) { return compareWithCallback(a, b, compareStrings); };
                function compareStrings(a, b) {
                    return a.localeCompare(b);
                }
            }
            function createFallbackStringComparer() {
                // An ordinal comparison puts "A" after "b", but for the UI we want "A" before "b".
                // We first sort case insensitively.  So "Aaa" will come before "baa".
                // Then we sort case sensitively, so "aaa" will come before "Aaa".
                //
                // For case insensitive comparisons we always map both strings to their
                // upper-case form as some unicode characters do not properly round-trip to
                // lowercase (such as `áºž` (German sharp capital s)).
                return function (a, b) { return compareWithCallback(a, b, compareDictionaryOrder); };
                function compareDictionaryOrder(a, b) {
                    return compareStrings(a.toUpperCase(), b.toUpperCase()) || compareStrings(a, b);
                }
                function compareStrings(a, b) {
                    return a < b ? -1 /* LessThan */ : a > b ? 1 /* GreaterThan */ : 0 /* EqualTo */;
                }
            }
            function getStringComparerFactory() {
                // If the host supports Intl, we use it for comparisons using the default locale.
                if (typeof Intl === "object" && typeof Intl.Collator === "function") {
                    return createIntlCollatorStringComparer;
                }
                // If the host does not support Intl, we fall back to localeCompare.
                // localeCompare in Node v0.10 is just an ordinal comparison, so don't use it.
                if (typeof String.prototype.localeCompare === "function" &&
                    typeof String.prototype.toLocaleUpperCase === "function" &&
                    "a".localeCompare("B") < 0) {
                    return createLocaleCompareStringComparer;
                }
                // Otherwise, fall back to ordinal comparison:
                return createFallbackStringComparer;
            }
            function createStringComparer(locale) {
                // Hold onto common string comparers. This avoids constantly reallocating comparers during
                // tests.
                if (locale === undefined) {
                    return defaultComparer || (defaultComparer = stringComparerFactory(locale));
                }
                else if (locale === "en-US") {
                    return enUSComparer || (enUSComparer = stringComparerFactory(locale));
                }
                else {
                    return stringComparerFactory(locale);
                }
            }
        })();
        var uiComparerCaseSensitive;
        var uiLocale;
        function getUILocale() {
            return uiLocale;
        }
        ts.getUILocale = getUILocale;
        function setUILocale(value) {
            if (uiLocale !== value) {
                uiLocale = value;
                uiComparerCaseSensitive = undefined;
            }
        }
        ts.setUILocale = setUILocale;
        /**
         * Compare two strings in a using the case-sensitive sort behavior of the UI locale.
         *
         * Ordering is not predictable between different host locales, but is best for displaying
         * ordered data for UI presentation. Characters with multiple unicode representations may
         * be considered equal.
         *
         * Case-sensitive comparisons compare strings that differ in base characters, or
         * accents/diacritic marks, or case as unequal.
         */
        function compareStringsCaseSensitiveUI(a, b) {
            var comparer = uiComparerCaseSensitive || (uiComparerCaseSensitive = createUIStringComparer(uiLocale));
            return comparer(a, b);
        }
        ts.compareStringsCaseSensitiveUI = compareStringsCaseSensitiveUI;
        function compareProperties(a, b, key, comparer) {
            return a === b ? 0 /* EqualTo */ :
                a === undefined ? -1 /* LessThan */ :
                    b === undefined ? 1 /* GreaterThan */ :
                        comparer(a[key], b[key]);
        }
        ts.compareProperties = compareProperties;
        /** True is greater than false. */
        function compareBooleans(a, b) {
            return compareValues(a ? 1 : 0, b ? 1 : 0);
        }
        ts.compareBooleans = compareBooleans;
        /**
         * Given a name and a list of names that are *not* equal to the name, return a spelling suggestion if there is one that is close enough.
         * Names less than length 3 only check for case-insensitive equality, not Levenshtein distance.
         *
         * If there is a candidate that's the same except for case, return that.
         * If there is a candidate that's within one edit of the name, return that.
         * Otherwise, return the candidate with the smallest Levenshtein distance,
         *    except for candidates:
         *      * With no name
         *      * Whose length differs from the target name by more than 0.34 of the length of the name.
         *      * Whose levenshtein distance is more than 0.4 of the length of the name
         *        (0.4 allows 1 substitution/transposition for every 5 characters,
         *         and 1 insertion/deletion at 3 characters)
         */
        function getSpellingSuggestion(name, candidates, getName) {
            var maximumLengthDifference = Math.min(2, Math.floor(name.length * 0.34));
            var bestDistance = Math.floor(name.length * 0.4) + 1; // If the best result isn't better than this, don't bother.
            var bestCandidate;
            var justCheckExactMatches = false;
            var nameLowerCase = name.toLowerCase();
            for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {
                var candidate = candidates_1[_i];
                var candidateName = getName(candidate);
                if (candidateName !== undefined && Math.abs(candidateName.length - nameLowerCase.length) <= maximumLengthDifference) {
                    var candidateNameLowerCase = candidateName.toLowerCase();
                    if (candidateNameLowerCase === nameLowerCase) {
                        if (candidateName === name) {
                            continue;
                        }
                        return candidate;
                    }
                    if (justCheckExactMatches) {
                        continue;
                    }
                    if (candidateName.length < 3) {
                        // Don't bother, user would have noticed a 2-character name having an extra character
                        continue;
                    }
                    // Only care about a result better than the best so far.
                    var distance = levenshteinWithMax(nameLowerCase, candidateNameLowerCase, bestDistance - 1);
                    if (distance === undefined) {
                        continue;
                    }
                    if (distance < 3) {
                        justCheckExactMatches = true;
                        bestCandidate = candidate;
                    }
                    else {
                        ts.Debug.assert(distance < bestDistance); // Else `levenshteinWithMax` should return undefined
                        bestDistance = distance;
                        bestCandidate = candidate;
                    }
                }
            }
            return bestCandidate;
        }
        ts.getSpellingSuggestion = getSpellingSuggestion;
        function levenshteinWithMax(s1, s2, max) {
            var previous = new Array(s2.length + 1);
            var current = new Array(s2.length + 1);
            /** Represents any value > max. We don't care about the particular value. */
            var big = max + 1;
            for (var i = 0; i <= s2.length; i++) {
                previous[i] = i;
            }
            for (var i = 1; i <= s1.length; i++) {
                var c1 = s1.charCodeAt(i - 1);
                var minJ = i > max ? i - max : 1;
                var maxJ = s2.length > max + i ? max + i : s2.length;
                current[0] = i;
                /** Smallest value of the matrix in the ith column. */
                var colMin = i;
                for (var j = 1; j < minJ; j++) {
                    current[j] = big;
                }
                for (var j = minJ; j <= maxJ; j++) {
                    var dist = c1 === s2.charCodeAt(j - 1)
                        ? previous[j - 1]
                        : Math.min(/*delete*/ previous[j] + 1, /*insert*/ current[j - 1] + 1, /*substitute*/ previous[j - 1] + 2);
                    current[j] = dist;
                    colMin = Math.min(colMin, dist);
                }
                for (var j = maxJ + 1; j <= s2.length; j++) {
                    current[j] = big;
                }
                if (colMin > max) {
                    // Give up -- everything in this column is > max and it can't get better in future columns.
                    return undefined;
                }
                var temp = previous;
                previous = current;
                current = temp;
            }
            var res = previous[s2.length];
            return res > max ? undefined : res;
        }
        function endsWith(str, suffix) {
            var expectedPos = str.length - suffix.length;
            return expectedPos >= 0 && str.indexOf(suffix, expectedPos) === expectedPos;
        }
        ts.endsWith = endsWith;
        function removeSuffix(str, suffix) {
            return endsWith(str, suffix) ? str.slice(0, str.length - suffix.length) : str;
        }
        ts.removeSuffix = removeSuffix;
        function tryRemoveSuffix(str, suffix) {
            return endsWith(str, suffix) ? str.slice(0, str.length - suffix.length) : undefined;
        }
        ts.tryRemoveSuffix = tryRemoveSuffix;
        function stringContains(str, substring) {
            return str.indexOf(substring) !== -1;
        }
        ts.stringContains = stringContains;
        /**
         * Takes a string like "jquery-min.4.2.3" and returns "jquery"
         */
        function removeMinAndVersionNumbers(fileName) {
            // Match a "." or "-" followed by a version number or 'min' at the end of the name
            var trailingMinOrVersion = /[.-]((min)|(\d+(\.\d+)*))$/;
            // The "min" or version may both be present, in either order, so try applying the above twice.
            return fileName.replace(trailingMinOrVersion, "").replace(trailingMinOrVersion, "");
        }
        ts.removeMinAndVersionNumbers = removeMinAndVersionNumbers;
        /** Remove an item from an array, moving everything to its right one space left. */
        function orderedRemoveItem(array, item) {
            for (var i = 0; i < array.length; i++) {
                if (array[i] === item) {
                    orderedRemoveItemAt(array, i);
                    return true;
                }
            }
            return false;
        }
        ts.orderedRemoveItem = orderedRemoveItem;
        /** Remove an item by index from an array, moving everything to its right one space left. */
        function orderedRemoveItemAt(array, index) {
            // This seems to be faster than either `array.splice(i, 1)` or `array.copyWithin(i, i+ 1)`.
            for (var i = index; i < array.length - 1; i++) {
                array[i] = array[i + 1];
            }
            array.pop();
        }
        ts.orderedRemoveItemAt = orderedRemoveItemAt;
        function unorderedRemoveItemAt(array, index) {
            // Fill in the "hole" left at `index`.
            array[index] = array[array.length - 1];
            array.pop();
        }
        ts.unorderedRemoveItemAt = unorderedRemoveItemAt;
        /** Remove the *first* occurrence of `item` from the array. */
        function unorderedRemoveItem(array, item) {
            return unorderedRemoveFirstItemWhere(array, function (element) { return element === item; });
        }
        ts.unorderedRemoveItem = unorderedRemoveItem;
        /** Remove the *first* element satisfying `predicate`. */
        function unorderedRemoveFirstItemWhere(array, predicate) {
            for (var i = 0; i < array.length; i++) {
                if (predicate(array[i])) {
                    unorderedRemoveItemAt(array, i);
                    return true;
                }
            }
            return false;
        }
        function createGetCanonicalFileName(useCaseSensitiveFileNames) {
            return useCaseSensitiveFileNames ? identity : toFileNameLowerCase;
        }
        ts.createGetCanonicalFileName = createGetCanonicalFileName;
        function patternText(_a) {
            var prefix = _a.prefix, suffix = _a.suffix;
            return prefix + "*" + suffix;
        }
        ts.patternText = patternText;
        /**
         * Given that candidate matches pattern, returns the text matching the '*'.
         * E.g.: matchedText(tryParsePattern("foo*baz"), "foobarbaz") === "bar"
         */
        function matchedText(pattern, candidate) {
            ts.Debug.assert(isPatternMatch(pattern, candidate));
            return candidate.substring(pattern.prefix.length, candidate.length - pattern.suffix.length);
        }
        ts.matchedText = matchedText;
        /** Return the object corresponding to the best pattern to match `candidate`. */
        function findBestPatternMatch(values, getPattern, candidate) {
            var matchedValue;
            // use length of prefix as betterness criteria
            var longestMatchPrefixLength = -1;
            for (var _i = 0, values_2 = values; _i < values_2.length; _i++) {
                var v = values_2[_i];
                var pattern = getPattern(v);
                if (isPatternMatch(pattern, candidate) && pattern.prefix.length > longestMatchPrefixLength) {
                    longestMatchPrefixLength = pattern.prefix.length;
                    matchedValue = v;
                }
            }
            return matchedValue;
        }
        ts.findBestPatternMatch = findBestPatternMatch;
        function startsWith(str, prefix) {
            return str.lastIndexOf(prefix, 0) === 0;
        }
        ts.startsWith = startsWith;
        function removePrefix(str, prefix) {
            return startsWith(str, prefix) ? str.substr(prefix.length) : str;
        }
        ts.removePrefix = removePrefix;
        function tryRemovePrefix(str, prefix, getCanonicalFileName) {
            if (getCanonicalFileName === void 0) { getCanonicalFileName = identity; }
            return startsWith(getCanonicalFileName(str), getCanonicalFileName(prefix)) ? str.substring(prefix.length) : undefined;
        }
        ts.tryRemovePrefix = tryRemovePrefix;
        function isPatternMatch(_a, candidate) {
            var prefix = _a.prefix, suffix = _a.suffix;
            return candidate.length >= prefix.length + suffix.length &&
                startsWith(candidate, prefix) &&
                endsWith(candidate, suffix);
        }
        function and(f, g) {
            return function (arg) { return f(arg) && g(arg); };
        }
        ts.and = and;
        function or() {
            var fs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                fs[_i] = arguments[_i];
            }
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                for (var _a = 0, fs_1 = fs; _a < fs_1.length; _a++) {
                    var f = fs_1[_a];
                    if (f.apply(void 0, args)) {
                        return true;
                    }
                }
                return false;
            };
        }
        ts.or = or;
        function not(fn) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return !fn.apply(void 0, args);
            };
        }
        ts.not = not;
        function assertType(_) { }
        ts.assertType = assertType;
        function singleElementArray(t) {
            return t === undefined ? undefined : [t];
        }
        ts.singleElementArray = singleElementArray;
        function enumerateInsertsAndDeletes(newItems, oldItems, comparer, inserted, deleted, unchanged) {
            unchanged = unchanged || noop;
            var newIndex = 0;
            var oldIndex = 0;
            var newLen = newItems.length;
            var oldLen = oldItems.length;
            while (newIndex < newLen && oldIndex < oldLen) {
                var newItem = newItems[newIndex];
                var oldItem = oldItems[oldIndex];
                var compareResult = comparer(newItem, oldItem);
                if (compareResult === -1 /* LessThan */) {
                    inserted(newItem);
                    newIndex++;
                }
                else if (compareResult === 1 /* GreaterThan */) {
                    deleted(oldItem);
                    oldIndex++;
                }
                else {
                    unchanged(oldItem, newItem);
                    newIndex++;
                    oldIndex++;
                }
            }
            while (newIndex < newLen) {
                inserted(newItems[newIndex++]);
            }
            while (oldIndex < oldLen) {
                deleted(oldItems[oldIndex++]);
            }
        }
        ts.enumerateInsertsAndDeletes = enumerateInsertsAndDeletes;
        function fill(length, cb) {
            var result = Array(length);
            for (var i = 0; i < length; i++) {
                result[i] = cb(i);
            }
            return result;
        }
        ts.fill = fill;
        function cartesianProduct(arrays) {
            var result = [];
            cartesianProductWorker(arrays, result, /*outer*/ undefined, 0);
            return result;
        }
        ts.cartesianProduct = cartesianProduct;
        function cartesianProductWorker(arrays, result, outer, index) {
            for (var _i = 0, _a = arrays[index]; _i < _a.length; _i++) {
                var element = _a[_i];
                var inner = void 0;
                if (outer) {
                    inner = outer.slice();
                    inner.push(element);
                }
                else {
                    inner = [element];
                }
                if (index === arrays.length - 1) {
                    result.push(inner);
                }
                else {
                    cartesianProductWorker(arrays, result, inner, index + 1);
                }
            }
        }
        function padLeft(s, length) {
            while (s.length < length) {
                s = " " + s;
            }
            return s;
        }
        ts.padLeft = padLeft;
        function padRight(s, length) {
            while (s.length < length) {
                s = s + " ";
            }
            return s;
        }
        ts.padRight = padRight;
    })(ts || (ts = {}));
    /* @internal */
    var ts;
    (function (ts) {
        var Debug;
        (function (Debug) {
            var currentAssertionLevel = 0 /* None */;
            // eslint-disable-next-line prefer-const
            Debug.isDebugging = false;
            var assertionCache = {};
            function getAssertionLevel() {
                return currentAssertionLevel;
            }
            Debug.getAssertionLevel = getAssertionLevel;
            function setAssertionLevel(level) {
                var prevAssertionLevel = currentAssertionLevel;
                currentAssertionLevel = level;
                if (level > prevAssertionLevel) {
                    // restore assertion functions for the current assertion level (see `shouldAssertFunction`).
                    for (var _i = 0, _a = ts.getOwnKeys(assertionCache); _i < _a.length; _i++) {
                        var key = _a[_i];
                        var cachedFunc = assertionCache[key];
                        if (cachedFunc !== undefined && Debug[key] !== cachedFunc.assertion && level >= cachedFunc.level) {
                            Debug[key] = cachedFunc;
                            assertionCache[key] = undefined;
                        }
                    }
                }
            }
            Debug.setAssertionLevel = setAssertionLevel;
            function shouldAssert(level) {
                return currentAssertionLevel >= level;
            }
            Debug.shouldAssert = shouldAssert;
            /**
             * Tests whether an assertion function should be executed. If it shouldn't, it is cached and replaced with `ts.noop`.
             * Replaced assertion functions are restored when `Debug.setAssertionLevel` is set to a high enough level.
             * @param level The minimum assertion level required.
             * @param name The name of the current assertion function.
             */
            function shouldAssertFunction(level, name) {
                if (!shouldAssert(level)) {
                    assertionCache[name] = { level: level, assertion: Debug[name] };
                    Debug[name] = ts.noop;
                    return false;
                }
                return true;
            }
            function fail(message, stackCrawlMark) {
                debugger;
                var e = new Error(message ? "Debug Failure. " + message : "Debug Failure.");
                if (Error.captureStackTrace) {
                    Error.captureStackTrace(e, stackCrawlMark || fail);
                }
                throw e;
            }
            Debug.fail = fail;
            function failBadSyntaxKind(node, message, stackCrawlMark) {
                return fail((message || "Unexpected node.") + "\r\nNode " + formatSyntaxKind(node.kind) + " was unexpected.", stackCrawlMark || failBadSyntaxKind);
            }
            Debug.failBadSyntaxKind = failBadSyntaxKind;
            function assert(expression, message, verboseDebugInfo, stackCrawlMark) {
                if (!expression) {
                    message = message ? "False expression: " + message : "False expression.";
                    if (verboseDebugInfo) {
                        message += "\r\nVerbose Debug Information: " + (typeof verboseDebugInfo === "string" ? verboseDebugInfo : verboseDebugInfo());
                    }
                    fail(message, stackCrawlMark || assert);
                }
            }
            Debug.assert = assert;
            function assertEqual(a, b, msg, msg2, stackCrawlMark) {
                if (a !== b) {
                    var message = msg ? msg2 ? msg + " " + msg2 : msg : "";
                    fail("Expected " + a + " === " + b + ". " + message, stackCrawlMark || assertEqual);
                }
            }
            Debug.assertEqual = assertEqual;
            function assertLessThan(a, b, msg, stackCrawlMark) {
                if (a >= b) {
                    fail("Expected " + a + " < " + b + ". " + (msg || ""), stackCrawlMark || assertLessThan);
                }
            }
            Debug.assertLessThan = assertLessThan;
            function assertLessThanOrEqual(a, b, stackCrawlMark) {
                if (a > b) {
                    fail("Expected " + a + " <= " + b, stackCrawlMark || assertLessThanOrEqual);
                }
            }
            Debug.assertLessThanOrEqual = assertLessThanOrEqual;
            function assertGreaterThanOrEqual(a, b, stackCrawlMark) {
                if (a < b) {
                    fail("Expected " + a + " >= " + b, stackCrawlMark || assertGreaterThanOrEqual);
                }
            }
            Debug.assertGreaterThanOrEqual = assertGreaterThanOrEqual;
            function assertIsDefined(value, message, stackCrawlMark) {
                // eslint-disable-next-line no-null/no-null
                if (value === undefined || value === null) {
                    fail(message, stackCrawlMark || assertIsDefined);
                }
            }
            Debug.assertIsDefined = assertIsDefined;
            function checkDefined(value, message, stackCrawlMark) {
                assertIsDefined(value, message, stackCrawlMark || checkDefined);
                return value;
            }
            Debug.checkDefined = checkDefined;
            /**
             * @deprecated Use `checkDefined` to check whether a value is defined inline. Use `assertIsDefined` to check whether
             * a value is defined at the statement level.
             */
            Debug.assertDefined = checkDefined;
            function assertEachIsDefined(value, message, stackCrawlMark) {
                for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
                    var v = value_1[_i];
                    assertIsDefined(v, message, stackCrawlMark || assertEachIsDefined);
                }
            }
            Debug.assertEachIsDefined = assertEachIsDefined;
            function checkEachDefined(value, message, stackCrawlMark) {
                assertEachIsDefined(value, message, stackCrawlMark || checkEachDefined);
                return value;
            }
            Debug.checkEachDefined = checkEachDefined;
            /**
             * @deprecated Use `checkEachDefined` to check whether the elements of an array are defined inline. Use `assertEachIsDefined` to check whether
             * the elements of an array are defined at the statement level.
             */
            Debug.assertEachDefined = checkEachDefined;
            function assertNever(member, message, stackCrawlMark) {
                if (message === void 0) { message = "Illegal value:"; }
                var detail = typeof member === "object" && ts.hasProperty(member, "kind") && ts.hasProperty(member, "pos") && formatSyntaxKind ? "SyntaxKind: " + formatSyntaxKind(member.kind) : JSON.stringify(member);
                return fail(message + " " + detail, stackCrawlMark || assertNever);
            }
            Debug.assertNever = assertNever;
            function assertEachNode(nodes, test, message, stackCrawlMark) {
                if (shouldAssertFunction(1 /* Normal */, "assertEachNode")) {
                    assert(test === undefined || ts.every(nodes, test), message || "Unexpected node.", function () { return "Node array did not pass test '" + getFunctionName(test) + "'."; }, stackCrawlMark || assertEachNode);
                }
            }
            Debug.assertEachNode = assertEachNode;
            function assertNode(node, test, message, stackCrawlMark) {
                if (shouldAssertFunction(1 /* Normal */, "assertNode")) {
                    assert(node !== undefined && (test === undefined || test(node)), message || "Unexpected node.", function () { return "Node " + formatSyntaxKind(node.kind) + " did not pass test '" + getFunctionName(test) + "'."; }, stackCrawlMark || assertNode);
                }
            }
            Debug.assertNode = assertNode;
            function assertNotNode(node, test, message, stackCrawlMark) {
                if (shouldAssertFunction(1 /* Normal */, "assertNotNode")) {
                    assert(node === undefined || test === undefined || !test(node), message || "Unexpected node.", function () { return "Node " + formatSyntaxKind(node.kind) + " should not have passed test '" + getFunctionName(test) + "'."; }, stackCrawlMark || assertNotNode);
                }
            }
            Debug.assertNotNode = assertNotNode;
            function assertOptionalNode(node, test, message, stackCrawlMark) {
                if (shouldAssertFunction(1 /* Normal */, "assertOptionalNode")) {
                    assert(test === undefined || node === undefined || test(node), message || "Unexpected node.", function () { return "Node " + formatSyntaxKind(node.kind) + " did not pass test '" + getFunctionName(test) + "'."; }, stackCrawlMark || assertOptionalNode);
                }
            }
            Debug.assertOptionalNode = assertOptionalNode;
            function assertOptionalToken(node, kind, message, stackCrawlMark) {
                if (shouldAssertFunction(1 /* Normal */, "assertOptionalToken")) {
                    assert(kind === undefined || node === undefined || node.kind === kind, message || "Unexpected node.", function () { return "Node " + formatSyntaxKind(node.kind) + " was not a '" + formatSyntaxKind(kind) + "' token."; }, stackCrawlMark || assertOptionalToken);
                }
            }
            Debug.assertOptionalToken = assertOptionalToken;
            function assertMissingNode(node, message, stackCrawlMark) {
                if (shouldAssertFunction(1 /* Normal */, "assertMissingNode")) {
                    assert(node === undefined, message || "Unexpected node.", function () { return "Node " + formatSyntaxKind(node.kind) + " was unexpected'."; }, stackCrawlMark || assertMissingNode);
                }
            }
            Debug.assertMissingNode = assertMissingNode;
            function getFunctionName(func) {
                if (typeof func !== "function") {
                    return "";
                }
                else if (func.hasOwnProperty("name")) {
                    return func.name;
                }
                else {
                    var text = Function.prototype.toString.call(func);
                    var match = /^function\s+([\w\$]+)\s*\(/.exec(text);
                    return match ? match[1] : "";
                }
            }
            Debug.getFunctionName = getFunctionName;
            function formatSymbol(symbol) {
                return "{ name: " + ts.unescapeLeadingUnderscores(symbol.escapedName) + "; flags: " + formatSymbolFlags(symbol.flags) + "; declarations: " + ts.map(symbol.declarations, function (node) { return formatSyntaxKind(node.kind); }) + " }";
            }
            Debug.formatSymbol = formatSymbol;
            /**
             * Formats an enum value as a string for debugging and debug assertions.
             */
            function formatEnum(value, enumObject, isFlags) {
                if (value === void 0) { value = 0; }
                var members = getEnumMembers(enumObject);
                if (value === 0) {
                    return members.length > 0 && members[0][0] === 0 ? members[0][1] : "0";
                }
                if (isFlags) {
                    var result = "";
                    var remainingFlags = value;
                    for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {
                        var _a = members_1[_i], enumValue = _a[0], enumName = _a[1];
                        if (enumValue > value) {
                            break;
                        }
                        if (enumValue !== 0 && enumValue & value) {
                            result = "" + result + (result ? "|" : "") + enumName;
                            remainingFlags &= ~enumValue;
                        }
                    }
                    if (remainingFlags === 0) {
                        return result;
                    }
                }
                else {
                    for (var _b = 0, members_2 = members; _b < members_2.length; _b++) {
                        var _c = members_2[_b], enumValue = _c[0], enumName = _c[1];
                        if (enumValue === value) {
                            return enumName;
                        }
                    }
                }
                return value.toString();
            }
            Debug.formatEnum = formatEnum;
            function getEnumMembers(enumObject) {
                var result = [];
                for (var name in enumObject) {
                    var value = enumObject[name];
                    if (typeof value === "number") {
                        result.push([value, name]);
                    }
                }
                return ts.stableSort(result, function (x, y) { return ts.compareValues(x[0], y[0]); });
            }
            function formatSyntaxKind(kind) {
                return formatEnum(kind, ts.SyntaxKind, /*isFlags*/ false);
            }
            Debug.formatSyntaxKind = formatSyntaxKind;
            function formatNodeFlags(flags) {
                return formatEnum(flags, ts.NodeFlags, /*isFlags*/ true);
            }
            Debug.formatNodeFlags = formatNodeFlags;
            function formatModifierFlags(flags) {
                return formatEnum(flags, ts.ModifierFlags, /*isFlags*/ true);
            }
            Debug.formatModifierFlags = formatModifierFlags;
            function formatTransformFlags(flags) {
                return formatEnum(flags, ts.TransformFlags, /*isFlags*/ true);
            }
            Debug.formatTransformFlags = formatTransformFlags;
            function formatEmitFlags(flags) {
                return formatEnum(flags, ts.EmitFlags, /*isFlags*/ true);
            }
            Debug.formatEmitFlags = formatEmitFlags;
            function formatSymbolFlags(flags) {
                return formatEnum(flags, ts.SymbolFlags, /*isFlags*/ true);
            }
            Debug.formatSymbolFlags = formatSymbolFlags;
            function formatTypeFlags(flags) {
                return formatEnum(flags, ts.TypeFlags, /*isFlags*/ true);
            }
            Debug.formatTypeFlags = formatTypeFlags;
            function formatObjectFlags(flags) {
                return formatEnum(flags, ts.ObjectFlags, /*isFlags*/ true);
            }
            Debug.formatObjectFlags = formatObjectFlags;
            var isDebugInfoEnabled = false;
            var extendedDebugModule;
            function extendedDebug() {
                enableDebugInfo();
                if (!extendedDebugModule) {
                    throw new Error("Debugging helpers could not be loaded.");
                }
                return extendedDebugModule;
            }
            function printControlFlowGraph(flowNode) {
                return console.log(formatControlFlowGraph(flowNode));
            }
            Debug.printControlFlowGraph = printControlFlowGraph;
            function formatControlFlowGraph(flowNode) {
                return extendedDebug().formatControlFlowGraph(flowNode);
            }
            Debug.formatControlFlowGraph = formatControlFlowGraph;
            function attachFlowNodeDebugInfo(flowNode) {
                if (isDebugInfoEnabled) {
                    if (!("__debugFlowFlags" in flowNode)) { // eslint-disable-line no-in-operator
                        Object.defineProperties(flowNode, {
                            __debugFlowFlags: { get: function () { return formatEnum(this.flags, ts.FlowFlags, /*isFlags*/ true); } },
                            __debugToString: { value: function () { return formatControlFlowGraph(this); } }
                        });
                    }
                }
            }
            Debug.attachFlowNodeDebugInfo = attachFlowNodeDebugInfo;
            /**
             * Injects debug information into frequently used types.
             */
            function enableDebugInfo() {
                if (isDebugInfoEnabled)
                    return;
                // Add additional properties in debug mode to assist with debugging.
                Object.defineProperties(ts.objectAllocator.getSymbolConstructor().prototype, {
                    __debugFlags: { get: function () { return formatSymbolFlags(this.flags); } }
                });
                Object.defineProperties(ts.objectAllocator.getTypeConstructor().prototype, {
                    __debugFlags: { get: function () { return formatTypeFlags(this.flags); } },
                    __debugObjectFlags: { get: function () { return this.flags & 524288 /* Object */ ? formatObjectFlags(this.objectFlags) : ""; } },
                    __debugTypeToString: { value: function () { return this.checker.typeToString(this); } },
                });
                var nodeConstructors = [
                    ts.objectAllocator.getNodeConstructor(),
                    ts.objectAllocator.getIdentifierConstructor(),
                    ts.objectAllocator.getTokenConstructor(),
                    ts.objectAllocator.getSourceFileConstructor()
                ];
                for (var _i = 0, nodeConstructors_1 = nodeConstructors; _i < nodeConstructors_1.length; _i++) {
                    var ctor = nodeConstructors_1[_i];
                    if (!ctor.prototype.hasOwnProperty("__debugKind")) {
                        Object.defineProperties(ctor.prototype, {
                            __debugKind: { get: function () { return formatSyntaxKind(this.kind); } },
                            __debugNodeFlags: { get: function () { return formatNodeFlags(this.flags); } },
                            __debugModifierFlags: { get: function () { return formatModifierFlags(ts.getModifierFlagsNoCache(this)); } },
                            __debugTransformFlags: { get: function () { return formatTransformFlags(this.transformFlags); } },
                            __debugIsParseTreeNode: { get: function () { return ts.isParseTreeNode(this); } },
                            __debugEmitFlags: { get: function () { return formatEmitFlags(ts.getEmitFlags(this)); } },
                            __debugGetText: {
                                value: function (includeTrivia) {
                                    if (ts.nodeIsSynthesized(this))
                                        return "";
                                    var parseNode = ts.getParseTreeNode(this);
                                    var sourceFile = parseNode && ts.getSourceFileOfNode(parseNode);
                                    return sourceFile ? ts.getSourceTextOfNodeFromSourceFile(sourceFile, parseNode, includeTrivia) : "";
                                }
                            }
                        });
                    }
                }
                // attempt to load extended debugging information
                try {
                    if (ts.sys && ts.sys.require) {
                        var basePath = ts.getDirectoryPath(ts.resolvePath(ts.sys.getExecutingFilePath()));
                        var result = ts.sys.require(basePath, "./compiler-debug");
                        if (!result.error) {
                            result.module.init(ts);
                            extendedDebugModule = result.module;
                        }
                    }
                }
                catch (_a) {
                    // do nothing
                }
                isDebugInfoEnabled = true;
            }
            Debug.enableDebugInfo = enableDebugInfo;
        })(Debug = ts.Debug || (ts.Debug = {}));
    })(ts || (ts = {}));
    /*@internal*/
    var ts;
    (function (ts) {
        /** Gets a timestamp with (at least) ms resolution */
        ts.timestamp = typeof performance !== "undefined" && performance.now ? function () { return performance.now(); } : Date.now ? Date.now : function () { return +(new Date()); };
    })(ts || (ts = {}));
    /*@internal*/
    /** Performance measurements for the compiler. */
    var ts;
    (function (ts) {
        var performance;
        (function (performance) {
            // NOTE: cannot use ts.noop as core.ts loads after this
            var profilerEvent = typeof onProfilerEvent === "function" && onProfilerEvent.profiler === true ? onProfilerEvent : function () { };
            var enabled = false;
            var profilerStart = 0;
            var counts;
            var marks;
            var measures;
            function createTimerIf(condition, measureName, startMarkName, endMarkName) {
                return condition ? createTimer(measureName, startMarkName, endMarkName) : performance.nullTimer;
            }
            performance.createTimerIf = createTimerIf;
            function createTimer(measureName, startMarkName, endMarkName) {
                var enterCount = 0;
                return {
                    enter: enter,
                    exit: exit
                };
                function enter() {
                    if (++enterCount === 1) {
                        mark(startMarkName);
                    }
                }
                function exit() {
                    if (--enterCount === 0) {
                        mark(endMarkName);
                        measure(measureName, startMarkName, endMarkName);
                    }
                    else if (enterCount < 0) {
                        ts.Debug.fail("enter/exit count does not match.");
                    }
                }
            }
            performance.createTimer = createTimer;
            performance.nullTimer = { enter: ts.noop, exit: ts.noop };
            /**
             * Marks a performance event.
             *
             * @param markName The name of the mark.
             */
            function mark(markName) {
                if (enabled) {
                    marks.set(markName, ts.timestamp());
                    counts.set(markName, (counts.get(markName) || 0) + 1);
                    profilerEvent(markName);
                }
            }
            performance.mark = mark;
            /**
             * Adds a performance measurement with the specified name.
             *
             * @param measureName The name of the performance measurement.
             * @param startMarkName The name of the starting mark. If not supplied, the point at which the
             *      profiler was enabled is used.
             * @param endMarkName The name of the ending mark. If not supplied, the current timestamp is
             *      used.
             */
            function measure(measureName, startMarkName, endMarkName) {
                if (enabled) {
                    var end = endMarkName && marks.get(endMarkName) || ts.timestamp();
                    var start = startMarkName && marks.get(startMarkName) || profilerStart;
                    measures.set(measureName, (measures.get(measureName) || 0) + (end - start));
                }
            }
            performance.measure = measure;
            /**
             * Gets the number of times a marker was encountered.
             *
             * @param markName The name of the mark.
             */
            function getCount(markName) {
                return counts && counts.get(markName) || 0;
            }
            performance.getCount = getCount;
            /**
             * Gets the total duration of all measurements with the supplied name.
             *
             * @param measureName The name of the measure whose durations should be accumulated.
             */
            function getDuration(measureName) {
                return measures && measures.get(measureName) || 0;
            }
            performance.getDuration = getDuration;
            /**
             * Iterate over each measure, performing some action
             *
             * @param cb The action to perform for each measure
             */
            function forEachMeasure(cb) {
                measures.forEach(function (measure, key) {
                    cb(key, measure);
                });
            }
            performance.forEachMeasure = forEachMeasure;
            /** Enables (and resets) performance measurements for the compiler. */
            function enable() {
                counts = ts.createMap();
                marks = ts.createMap();
                measures = ts.createMap();
                enabled = true;
                profilerStart = ts.timestamp();
            }
            performance.enable = enable;
            /** Disables performance measurements for the compiler. */
            function disable() {
                enabled = false;
            }
            performance.disable = disable;
        })(performance = ts.performance || (ts.performance = {}));
    })(ts || (ts = {}));
    /* @internal */
    var ts;
    (function (ts) {
        var nullLogger = {
            logEvent: ts.noop,
            logErrEvent: ts.noop,
            logPerfEvent: ts.noop,
            logInfoEvent: ts.noop,
            logStartCommand: ts.noop,
            logStopCommand: ts.noop,
            logStartUpdateProgram: ts.noop,
            logStopUpdateProgram: ts.noop,
            logStartUpdateGraph: ts.noop,
            logStopUpdateGraph: ts.noop,
            logStartResolveModule: ts.noop,
            logStopResolveModule: ts.noop,
            logStartParseSourceFile: ts.noop,
            logStopParseSourceFile: ts.noop,
            logStartReadFile: ts.noop,
            logStopReadFile: ts.noop,
            logStartBindFile: ts.noop,
            logStopBindFile: ts.noop,
            logStartScheduledOperation: ts.noop,
            logStopScheduledOperation: ts.noop,
        };
        // Load optional module to enable Event Tracing for Windows
        // See https://github.com/microsoft/typescript-etw for more information
        var etwModule;
        try {
            // require() will throw an exception if the module is not installed
            // It may also return undefined if not installed properly
            etwModule = typescriptEtw;
        }
        catch (e) {
            etwModule = undefined;
        }
        /** Performance logger that will generate ETW events if possible - check for `logEvent` member, as `etwModule` will be `{}` when browserified */
        ts.perfLogger = etwModule && etwModule.logEvent ? etwModule : nullLogger;
    })(ts || (ts = {}));
    /* @internal */
    var ts;
    (function (ts) {
        // https://semver.org/#spec-item-2
        // > A normal version number MUST take the form X.Y.Z where X, Y, and Z are non-negative
        // > integers, and MUST NOT contain leading zeroes. X is the major version, Y is the minor
        // > version, and Z is the patch version. Each element MUST increase numerically.
        //
        // NOTE: We differ here in that we allow X and X.Y, with missing parts having the default
        // value of `0`.
        var versionRegExp = /^(0|[1-9]\d*)(?:\.(0|[1-9]\d*)(?:\.(0|[1-9]\d*)(?:\-([a-z0-9-.]+))?(?:\+([a-z0-9-.]+))?)?)?$/i;
        // https://semver.org/#spec-item-9
        // > A pre-release version MAY be denoted by appending a hyphen and a series of dot separated
        // > identifiers immediately following the patch version. Identifiers MUST comprise only ASCII
        // > alphanumerics and hyphen [0-9A-Za-z-]. Identifiers MUST NOT be empty. Numeric identifiers
        // > MUST NOT include leading zeroes.
        var prereleaseRegExp = /^(?:0|[1-9]\d*|[a-z-][a-z0-9-]*)(?:\.(?:0|[1-9]\d*|[a-z-][a-z0-9-]*))*$/i;
        // https://semver.org/#spec-item-10
        // > Build metadata MAY be denoted by appending a plus sign and a series of dot separated
        // > identifiers immediately following the patch or pre-release version. Identifiers MUST
        // > comprise only ASCII alphanumerics and hyphen [0-9A-Za-z-]. Identifiers MUST NOT be empty.
        var buildRegExp = /^[a-z0-9-]+(?:\.[a-z0-9-]+)*$/i;
        // https://semver.org/#spec-item-9
        // > Numeric identifiers MUST NOT include leading zeroes.
        var numericIdentifierRegExp = /^(0|[1-9]\d*)$/;
        /**
         * Describes a precise semantic version number, https://semver.org
         */
        var Version = /** @class */ (function () {
            function Version(major, minor, patch, prerelease, build) {
                if (minor === void 0) { minor = 0; }
                if (patch === void 0) { patch = 0; }
                if (prerelease === void 0) { prerelease = ""; }
                if (build === void 0) { build = ""; }
                if (typeof major === "string") {
                    var result = ts.Debug.checkDefined(tryParseComponents(major), "Invalid version");
                    (major = result.major, minor = result.minor, patch = result.patch, prerelease = result.prerelease, build = result.build);
                }
                ts.Debug.assert(major >= 0, "Invalid argument: major");
                ts.Debug.assert(minor >= 0, "Invalid argument: minor");
                ts.Debug.assert(patch >= 0, "Invalid argument: patch");
                ts.Debug.assert(!prerelease || prereleaseRegExp.test(prerelease), "Invalid argument: prerelease");
                ts.Debug.assert(!build || buildRegExp.test(build), "Invalid argument: build");
                this.major = major;
                this.minor = minor;
                this.patch = patch;
                this.prerelease = prerelease ? prerelease.split(".") : ts.emptyArray;
                this.build = build ? build.split(".") : ts.emptyArray;
            }
            Version.tryParse = function (text) {
                var result = tryParseComponents(text);
                if (!result)
                    return undefined;
                var major = result.major, minor = result.minor, patch = result.patch, prerelease = result.prerelease, build = result.build;
                return new Version(major, minor, patch, prerelease, build);
            };
            Version.prototype.compareTo = function (other) {
                // https://semver.org/#spec-item-11
                // > Precedence is determined by the first difference when comparing each of these
                // > identifiers from left to right as follows: Major, minor, and patch versions are
                // > always compared numerically.
                //
                // https://semver.org/#spec-item-11
                // > Precedence for two pre-release versions with the same major, minor, and patch version
                // > MUST be determined by comparing each dot separated identifier from left to right until
                // > a difference is found [...]
                //
                // https://semver.org/#spec-item-11
                // > Build metadata does not figure into precedence
                if (this === other)
                    return 0 /* EqualTo */;
                if (other === undefined)
                    return 1 /* GreaterThan */;
                return ts.compareValues(this.major, other.major)
                    || ts.compareValues(this.minor, other.minor)
                    || ts.compareValues(this.patch, other.patch)
                    || comparePrerelaseIdentifiers(this.prerelease, other.prerelease);
            };
            Version.prototype.increment = function (field) {
                switch (field) {
                    case "major": return new Version(this.major + 1, 0, 0);
                    case "minor": return new Version(this.major, this.minor + 1, 0);
                    case "patch": return new Version(this.major, this.minor, this.patch + 1);
                    default: return ts.Debug.assertNever(field);
                }
            };
            Version.prototype.toString = function () {
                var result = this.major + "." + this.minor + "." + this.patch;
                if (ts.some(this.prerelease))
                    result += "-" + this.prerelease.join(".");
                if (ts.some(this.build))
                    result += "+" + this.build.join(".");
                return result;
            };
            Version.zero = new Version(0, 0, 0);
            return Version;
        }());
        ts.Version = Version;
        function tryParseComponents(text) {
            var match = versionRegExp.exec(text);
            if (!match)
                return undefined;
            var major = match[1], _a = match[2], minor = _a === void 0 ? "0" : _a, _b = match[3], patch = _b === void 0 ? "0" : _b, _c = match[4], prerelease = _c === void 0 ? "" : _c, _d = match[5], build = _d === void 0 ? "" : _d;
            if (prerelease && !prereleaseRegExp.test(prerelease))
                return undefined;
            if (build && !buildRegExp.test(build))
                return undefined;
            return {
                major: parseInt(major, 10),
                minor: parseInt(minor, 10),
                patch: parseInt(patch, 10),
                prerelease: prerelease,
                build: build
            };
        }
        function comparePrerelaseIdentifiers(left, right) {
            // https://semver.org/#spec-item-11
            // > When major, minor, and patch are equal, a pre-release version has lower precedence
            // > than a normal version.
            if (left === right)
                return 0 /* EqualTo */;
            if (left.length === 0)
                return right.length === 0 ? 0 /* EqualTo */ : 1 /* GreaterThan */;
            if (right.length === 0)
                return -1 /* LessThan */;
            // https://semver.org/#spec-item-11
            // > Precedence for two pre-release versions with the same major, minor, and patch version
            // > MUST be determined by comparing each dot separated identifier from left to right until
            // > a difference is found [...]
            var length = Math.min(left.length, right.length);
            for (var i = 0; i < length; i++) {
                var leftIdentifier = left[i];
                var rightIdentifier = right[i];
                if (leftIdentifier === rightIdentifier)
                    continue;
                var leftIsNumeric = numericIdentifierRegExp.test(leftIdentifier);
                var rightIsNumeric = numericIdentifierRegExp.test(rightIdentifier);
                if (leftIsNumeric || rightIsNumeric) {
                    // https://semver.org/#spec-item-11
                    // > Numeric identifiers always have lower precedence than non-numeric identifiers.
                    if (leftIsNumeric !== rightIsNumeric)
                        return leftIsNumeric ? -1 /* LessThan */ : 1 /* GreaterThan */;
                    // https://semver.org/#spec-item-11
                    // > identifiers consisting of only digits are compared numerically
                    var result = ts.compareValues(+leftIdentifier, +rightIdentifier);
                    if (result)
                        return result;
                }
                else {
                    // https://semver.org/#spec-item-11
                    // > identifiers with letters or hyphens are compared lexically in ASCII sort order.
                    var result = ts.compareStringsCaseSensitive(leftIdentifier, rightIdentifier);
                    if (result)
                        return result;
                }
            }
            // https://semver.org/#spec-item-11
            // > A larger set of pre-release fields has a higher precedence than a smaller set, if all
            // > of the preceding identifiers are equal.
            return ts.compareValues(left.length, right.length);
        }
        /**
         * Describes a semantic version range, per https://github.com/npm/node-semver#ranges
         */
        var VersionRange = /** @class */ (function () {
            function VersionRange(spec) {
                this._alternatives = spec ? ts.Debug.checkDefined(parseRange(spec), "Invalid range spec.") : ts.emptyArray;
            }
            VersionRange.tryParse = function (text) {
                var sets = parseRange(text);
                if (sets) {
                    var range = new VersionRange("");
                    range._alternatives = sets;
                    return range;
                }
                return undefined;
            };
            VersionRange.prototype.test = function (version) {
                if (typeof version === "string")
                    version = new Version(version);
                return testDisjunction(version, this._alternatives);
            };
            VersionRange.prototype.toString = function () {
                return formatDisjunction(this._alternatives);
            };
            return VersionRange;
        }());
        ts.VersionRange = VersionRange;
        // https://github.com/npm/node-semver#range-grammar
        //
        // range-set    ::= range ( logical-or range ) *
        // range        ::= hyphen | simple ( ' ' simple ) * | ''
        // logical-or   ::= ( ' ' ) * '||' ( ' ' ) *
        var logicalOrRegExp = /\s*\|\|\s*/g;
        var whitespaceRegExp = /\s+/g;
        // https://github.com/npm/node-semver#range-grammar
        //
        // partial      ::= xr ( '.' xr ( '.' xr qualifier ? )? )?
        // xr           ::= 'x' | 'X' | '*' | nr
        // nr           ::= '0' | ['1'-'9'] ( ['0'-'9'] ) *
        // qualifier    ::= ( '-' pre )? ( '+' build )?
        // pre          ::= parts
        // build        ::= parts
        // parts        ::= part ( '.' part ) *
        // part         ::= nr | [-0-9A-Za-z]+
        var partialRegExp = /^([xX*0]|[1-9]\d*)(?:\.([xX*0]|[1-9]\d*)(?:\.([xX*0]|[1-9]\d*)(?:-([a-z0-9-.]+))?(?:\+([a-z0-9-.]+))?)?)?$/i;
        // https://github.com/npm/node-semver#range-grammar
        //
        // hyphen       ::= partial ' - ' partial
        var hyphenRegExp = /^\s*([a-z0-9-+.*]+)\s+-\s+([a-z0-9-+.*]+)\s*$/i;
        // https://github.com/npm/node-semver#range-grammar
        //
        // simple       ::= primitive | partial | tilde | caret
        // primitive    ::= ( '<' | '>' | '>=' | '<=' | '=' ) partial
        // tilde        ::= '~' partial
        // caret        ::= '^' partial
        var rangeRegExp = /^\s*(~|\^|<|<=|>|>=|=)?\s*([a-z0-9-+.*]+)$/i;
        function parseRange(text) {
            var alternatives = [];
            for (var _i = 0, _a = text.trim().split(logicalOrRegExp); _i < _a.length; _i++) {
                var range = _a[_i];
                if (!range)
                    continue;
                var comparators = [];
                var match = hyphenRegExp.exec(range);
                if (match) {
                    if (!parseHyphen(match[1], match[2], comparators))
                        return undefined;
                }
                else {
                    for (var _b = 0, _c = range.split(whitespaceRegExp); _b < _c.length; _b++) {
                        var simple = _c[_b];
                        var match_1 = rangeRegExp.exec(simple);
                        if (!match_1 || !parseComparator(match_1[1], match_1[2], comparators))
                            return undefined;
                    }
                }
                alternatives.push(comparators);
            }
            return alternatives;
        }
        function parsePartial(text) {
            var match = partialRegExp.exec(text);
            if (!match)
                return undefined;
            var major = match[1], _a = match[2], minor = _a === void 0 ? "*" : _a, _b = match[3], patch = _b === void 0 ? "*" : _b, prerelease = match[4], build = match[5];
            var version = new Version(isWildcard(major) ? 0 : parseInt(major, 10), isWildcard(major) || isWildcard(minor) ? 0 : parseInt(minor, 10), isWildcard(major) || isWildcard(minor) || isWildcard(patch) ? 0 : parseInt(patch, 10), prerelease, build);
            return { version: version, major: major, minor: minor, patch: patch };
        }
        function parseHyphen(left, right, comparators) {
            var leftResult = parsePartial(left);
            if (!leftResult)
                return false;
            var rightResult = parsePartial(right);
            if (!rightResult)
                return false;
            if (!isWildcard(leftResult.major)) {
                comparators.push(createComparator(">=", leftResult.version));
            }
            if (!isWildcard(rightResult.major)) {
                comparators.push(isWildcard(rightResult.minor) ? createComparator("<", rightResult.version.increment("major")) :
                    isWildcard(rightResult.patch) ? createComparator("<", rightResult.version.increment("minor")) :
                        createComparator("<=", rightResult.version));
            }
            return true;
        }
        function parseComparator(operator, text, comparators) {
            var result = parsePartial(text);
            if (!result)
                return false;
            var version = result.version, major = result.major, minor = result.minor, patch = result.patch;
            if (!isWildcard(major)) {
                switch (operator) {
                    case "~":
                        comparators.push(createComparator(">=", version));
                        comparators.push(createComparator("<", version.increment(isWildcard(minor) ? "major" :
                            "minor")));
                        break;
                    case "^":
                        comparators.push(createComparator(">=", version));
                        comparators.push(createComparator("<", version.increment(version.major > 0 || isWildcard(minor) ? "major" :
                            version.minor > 0 || isWildcard(patch) ? "minor" :
                                "patch")));
                        break;
                    case "<":
                    case ">=":
                        comparators.push(createComparator(operator, version));
                        break;
                    case "<=":
                    case ">":
                        comparators.push(isWildcard(minor) ? createComparator(operator === "<=" ? "<" : ">=", version.increment("major")) :
                            isWildcard(patch) ? createComparator(operator === "<=" ? "<" : ">=", version.increment("minor")) :
                                createComparator(operator, version));
                        break;
                    case "=":
                    case undefined:
                        if (isWildcard(minor) || isWildcard(patch)) {
                            comparators.push(createComparator(">=", version));
                            comparators.push(createComparator("<", version.increment(isWildcard(minor) ? "major" : "minor")));
                        }
                        else {
                            comparators.push(createComparator("=", version));
                        }
                        break;
                    default:
                        // unrecognized
                        return false;
                }
            }
            else if (operator === "<" || operator === ">") {
                comparators.push(createComparator("<", Version.zero));
            }
            return true;
        }
        function isWildcard(part) {
            return part === "*" || part === "x" || part === "X";
        }
        function createComparator(operator, operand) {
            return { operator: operator, operand: operand };
        }
        function testDisjunction(version, alternatives) {
            // an empty disjunction is treated as "*" (all versions)
            if (alternatives.length === 0)
                return true;
            for (var _i = 0, alternatives_1 = alternatives; _i < alternatives_1.length; _i++) {
                var alternative = alternatives_1[_i];
                if (testAlternative(version, alternative))
                    return true;
            }
            return false;
        }
        function testAlternative(version, comparators) {
            for (var _i = 0, comparators_1 = comparators; _i < comparators_1.length; _i++) {
                var comparator = comparators_1[_i];
                if (!testComparator(version, comparator.operator, comparator.operand))
                    return false;
            }
            return true;
        }
        function testComparator(version, operator, operand) {
            var cmp = version.compareTo(operand);
            switch (operator) {
                case "<": return cmp < 0;
                case "<=": return cmp <= 0;
                case ">": return cmp > 0;
                case ">=": return cmp >= 0;
                case "=": return cmp === 0;
                default: return ts.Debug.assertNever(operator);
            }
        }
        function formatDisjunction(alternatives) {
            return ts.map(alternatives, formatAlternative).join(" || ") || "*";
        }
        function formatAlternative(comparators) {
            return ts.map(comparators, formatComparator).join(" ");
        }
        function formatComparator(comparator) {
            return "" + comparator.operator + comparator.operand;
        }
    })(ts || (ts = {}));
    var ts;
    (function (ts) {
        // token > SyntaxKind.Identifier => token is a keyword
        // Also, If you add a new SyntaxKind be sure to keep the `Markers` section at the bottom in sync
        var SyntaxKind;
        (function (SyntaxKind) {
            SyntaxKind[SyntaxKind["Unknown"] = 0] = "Unknown";
            SyntaxKind[SyntaxKind["EndOfFileToken"] = 1] = "EndOfFileToken";
            SyntaxKind[SyntaxKind["SingleLineCommentTrivia"] = 2] = "SingleLineCommentTrivia";
            SyntaxKind[SyntaxKind["MultiLineCommentTrivia"] = 3] = "MultiLineCommentTrivia";
            SyntaxKind[SyntaxKind["NewLineTrivia"] = 4] = "NewLineTrivia";
            SyntaxKind[SyntaxKind["WhitespaceTrivia"] = 5] = "WhitespaceTrivia";
            // We detect and preserve #! on the first line
            SyntaxKind[SyntaxKind["ShebangTrivia"] = 6] = "ShebangTrivia";
            // We detect and provide better error recovery when we encounter a git merge marker.  This
            // allows us to edit files with git-conflict markers in them in a much more pleasant manner.
            SyntaxKind[SyntaxKind["ConflictMarkerTrivia"] = 7] = "ConflictMarkerTrivia";
            // Literals
            SyntaxKind[SyntaxKind["NumericLiteral"] = 8] = "NumericLiteral";
            SyntaxKind[SyntaxKind["BigIntLiteral"] = 9] = "BigIntLiteral";
            SyntaxKind[SyntaxKind["StringLiteral"] = 10] = "StringLiteral";
            SyntaxKind[SyntaxKind["JsxText"] = 11] = "JsxText";
            SyntaxKind[SyntaxKind["JsxTextAllWhiteSpaces"] = 12] = "JsxTextAllWhiteSpaces";
            SyntaxKind[SyntaxKind["RegularExpressionLiteral"] = 13] = "RegularExpressionLiteral";
            SyntaxKind[SyntaxKind["NoSubstitutionTemplateLiteral"] = 14] = "NoSubstitutionTemplateLiteral";
            // Pseudo-literals
            SyntaxKind[SyntaxKind["TemplateHead"] = 15] = "TemplateHead";
            SyntaxKind[SyntaxKind["TemplateMiddle"] = 16] = "TemplateMiddle";
            SyntaxKind[SyntaxKind["TemplateTail"] = 17] = "TemplateTail";
            // Punctuation
            SyntaxKind[SyntaxKind["OpenBraceToken"] = 18] = "OpenBraceToken";
            SyntaxKind[SyntaxKind["CloseBraceToken"] = 19] = "CloseBraceToken";
            SyntaxKind[SyntaxKind["OpenParenToken"] = 20] = "OpenParenToken";
            SyntaxKind[SyntaxKind["CloseParenToken"] = 21] = "CloseParenToken";
            SyntaxKind[SyntaxKind["OpenBracketToken"] = 22] = "OpenBracketToken";
            SyntaxKind[SyntaxKind["CloseBracketToken"] = 23] = "CloseBracketToken";
            SyntaxKind[SyntaxKind["DotToken"] = 24] = "DotToken";
            SyntaxKind[SyntaxKind["DotDotDotToken"] = 25] = "DotDotDotToken";
            SyntaxKind[SyntaxKind["SemicolonToken"] = 26] = "SemicolonToken";
            SyntaxKind[SyntaxKind["CommaToken"] = 27] = "CommaToken";
            SyntaxKind[SyntaxKind["QuestionDotToken"] = 28] = "QuestionDotToken";
            SyntaxKind[SyntaxKind["LessThanToken"] = 29] = "LessThanToken";
            SyntaxKind[SyntaxKind["LessThanSlashToken"] = 30] = "LessThanSlashToken";
            SyntaxKind[SyntaxKind["GreaterThanToken"] = 31] = "GreaterThanToken";
            SyntaxKind[SyntaxKind["LessThanEqualsToken"] = 32] = "LessThanEqualsToken";
            SyntaxKind[SyntaxKind["GreaterThanEqualsToken"] = 33] = "GreaterThanEqualsToken";
            SyntaxKind[SyntaxKind["EqualsEqualsToken"] = 34] = "EqualsEqualsToken";
            SyntaxKind[SyntaxKind["ExclamationEqualsToken"] = 35] = "ExclamationEqualsToken";
            SyntaxKind[SyntaxKind["EqualsEqualsEqualsToken"] = 36] = "EqualsEqualsEqualsToken";
            SyntaxKind[SyntaxKind["ExclamationEqualsEqualsToken"] = 37] = "ExclamationEqualsEqualsToken";
            SyntaxKind[SyntaxKind["EqualsGreaterThanToken"] = 38] = "EqualsGreaterThanToken";
            SyntaxKind[SyntaxKind["PlusToken"] = 39] = "PlusToken";
            SyntaxKind[SyntaxKind["MinusToken"] = 40] = "MinusToken";
            SyntaxKind[SyntaxKind["AsteriskToken"] = 41] = "AsteriskToken";
            SyntaxKind[SyntaxKind["AsteriskAsteriskToken"] = 42] = "AsteriskAsteriskToken";
            SyntaxKind[SyntaxKind["SlashToken"] = 43] = "SlashToken";
            SyntaxKind[SyntaxKind["PercentToken"] = 44] = "PercentToken";
            SyntaxKind[SyntaxKind["PlusPlusToken"] = 45] = "PlusPlusToken";
            SyntaxKind[SyntaxKind["MinusMinusToken"] = 46] = "MinusMinusToken";
            SyntaxKind[SyntaxKind["LessThanLessThanToken"] = 47] = "LessThanLessThanToken";
            SyntaxKind[SyntaxKind["GreaterThanGreaterThanToken"] = 48] = "GreaterThanGreaterThanToken";
            SyntaxKind[SyntaxKind["GreaterThanGreaterThanGreaterThanToken"] = 49] = "GreaterThanGreaterThanGreaterThanToken";
            SyntaxKind[SyntaxKind["AmpersandToken"] = 50] = "AmpersandToken";
            SyntaxKind[SyntaxKind["BarToken"] = 51] = "BarToken";
            SyntaxKind[SyntaxKind["CaretToken"] = 52] = "CaretToken";
            SyntaxKind[SyntaxKind["ExclamationToken"] = 53] = "ExclamationToken";
            SyntaxKind[SyntaxKind["TildeToken"] = 54] = "TildeToken";
            SyntaxKind[SyntaxKind["AmpersandAmpersandToken"] = 55] = "AmpersandAmpersandToken";
            SyntaxKind[SyntaxKind["BarBarToken"] = 56] = "BarBarToken";
            SyntaxKind[SyntaxKind["QuestionToken"] = 57] = "QuestionToken";
            SyntaxKind[SyntaxKind["ColonToken"] = 58] = "ColonToken";
            SyntaxKind[SyntaxKind["AtToken"] = 59] = "AtToken";
            SyntaxKind[SyntaxKind["QuestionQuestionToken"] = 60] = "QuestionQuestionToken";
            /** Only the JSDoc scanner produces BacktickToken. The normal scanner produces NoSubstitutionTemplateLiteral and related kinds. */
            SyntaxKind[SyntaxKind["BacktickToken"] = 61] = "BacktickToken";
            // Assignments
            SyntaxKind[SyntaxKind["EqualsToken"] = 62] = "EqualsToken";
            SyntaxKind[SyntaxKind["PlusEqualsToken"] = 63] = "PlusEqualsToken";
            SyntaxKind[SyntaxKind["MinusEqualsToken"] = 64] = "MinusEqualsToken";
            SyntaxKind[SyntaxKind["AsteriskEqualsToken"] = 65] = "AsteriskEqualsToken";
            SyntaxKind[SyntaxKind["AsteriskAsteriskEqualsToken"] = 66] = "AsteriskAsteriskEqualsToken";
            SyntaxKind[SyntaxKind["SlashEqualsToken"] = 67] = "SlashEqualsToken";
            SyntaxKind[SyntaxKind["PercentEqualsToken"] = 68] = "PercentEqualsToken";
            SyntaxKind[SyntaxKind["LessThanLessThanEqualsToken"] = 69] = "LessThanLessThanEqualsToken";
            SyntaxKind[SyntaxKind["GreaterThanGreaterThanEqualsToken"] = 70] = "GreaterThanGreaterThanEqualsToken";
            SyntaxKind[SyntaxKind["GreaterThanGreaterThanGreaterThanEqualsToken"] = 71] = "GreaterThanGreaterThanGreaterThanEqualsToken";
            SyntaxKind[SyntaxKind["AmpersandEqualsToken"] = 72] = "AmpersandEqualsToken";
            SyntaxKind[SyntaxKind["BarEqualsToken"] = 73] = "BarEqualsToken";
            SyntaxKind[SyntaxKind["CaretEqualsToken"] = 74] = "CaretEqualsToken";
            // Identifiers and PrivateIdentifiers
            SyntaxKind[SyntaxKind["Identifier"] = 75] = "Identifier";
            SyntaxKind[SyntaxKind["PrivateIdentifier"] = 76] = "PrivateIdentifier";
            // Reserved words
            SyntaxKind[SyntaxKind["BreakKeyword"] = 77] = "BreakKeyword";
            SyntaxKind[SyntaxKind["CaseKeyword"] = 78] = "CaseKeyword";
            SyntaxKind[SyntaxKind["CatchKeyword"] = 79] = "CatchKeyword";
            SyntaxKind[SyntaxKind["ClassKeyword"] = 80] = "ClassKeyword";
            SyntaxKind[SyntaxKind["ConstKeyword"] = 81] = "ConstKeyword";
            SyntaxKind[SyntaxKind["ContinueKeyword"] = 82] = "ContinueKeyword";
            SyntaxKind[SyntaxKind["DebuggerKeyword"] = 83] = "DebuggerKeyword";
            SyntaxKind[SyntaxKind["DefaultKeyword"] = 84] = "DefaultKeyword";
            SyntaxKind[SyntaxKind["DeleteKeyword"] = 85] = "DeleteKeyword";
            SyntaxKind[SyntaxKind["DoKeyword"] = 86] = "DoKeyword";
            SyntaxKind[SyntaxKind["ElseKeyword"] = 87] = "ElseKeyword";
            SyntaxKind[SyntaxKind["EnumKeyword"] = 88] = "EnumKeyword";
            SyntaxKind[SyntaxKind["ExportKeyword"] = 89] = "ExportKeyword";
            SyntaxKind[SyntaxKind["ExtendsKeyword"] = 90] = "ExtendsKeyword";
            SyntaxKind[SyntaxKind["FalseKeyword"] = 91] = "FalseKeyword";
            SyntaxKind[SyntaxKind["FinallyKeyword"] = 92] = "FinallyKeyword";
            SyntaxKind[SyntaxKind["ForKeyword"] = 93] = "ForKeyword";
            SyntaxKind[SyntaxKind["FunctionKeyword"] = 94] = "FunctionKeyword";
            SyntaxKind[SyntaxKind["IfKeyword"] = 95] = "IfKeyword";
            SyntaxKind[SyntaxKind["ImportKeyword"] = 96] = "ImportKeyword";
            SyntaxKind[SyntaxKind["InKeyword"] = 97] = "InKeyword";
            SyntaxKind[SyntaxKind["InstanceOfKeyword"] = 98] = "InstanceOfKeyword";
            SyntaxKind[SyntaxKind["NewKeyword"] = 99] = "NewKeyword";
            SyntaxKind[SyntaxKind["NullKeyword"] = 100] = "NullKeyword";
            SyntaxKind[SyntaxKind["ReturnKeyword"] = 101] = "ReturnKeyword";
            SyntaxKind[SyntaxKind["SuperKeyword"] = 102] = "SuperKeyword";
            SyntaxKind[SyntaxKind["SwitchKeyword"] = 103] = "SwitchKeyword";
            SyntaxKind[SyntaxKind["ThisKeyword"] = 104] = "ThisKeyword";
            SyntaxKind[SyntaxKind["ThrowKeyword"] = 105] = "ThrowKeyword";
            SyntaxKind[SyntaxKind["TrueKeyword"] = 106] = "TrueKeyword";
            SyntaxKind[SyntaxKind["TryKeyword"] = 107] = "TryKeyword";
            SyntaxKind[SyntaxKind["TypeOfKeyword"] = 108] = "TypeOfKeyword";
            SyntaxKind[SyntaxKind["VarKeyword"] = 109] = "VarKeyword";
            SyntaxKind[SyntaxKind["VoidKeyword"] = 110] = "VoidKeyword";
            SyntaxKind[SyntaxKind["WhileKeyword"] = 111] = "WhileKeyword";
            SyntaxKind[SyntaxKind["WithKeyword"] = 112] = "WithKeyword";
            // Strict mode reserved words
            SyntaxKind[SyntaxKind["ImplementsKeyword"] = 113] = "ImplementsKeyword";
            SyntaxKind[SyntaxKind["InterfaceKeyword"] = 114] = "InterfaceKeyword";
            SyntaxKind[SyntaxKind["LetKeyword"] = 115] = "LetKeyword";
            SyntaxKind[SyntaxKind["PackageKeyword"] = 116] = "PackageKeyword";
            SyntaxKind[SyntaxKind["PrivateKeyword"] = 117] = "PrivateKeyword";
            SyntaxKind[SyntaxKind["ProtectedKeyword"] = 118] = "ProtectedKeyword";
            SyntaxKind[SyntaxKind["PublicKeyword"] = 119] = "PublicKeyword";
            SyntaxKind[SyntaxKind["StaticKeyword"] = 120] = "StaticKeyword";
            SyntaxKind[SyntaxKind["YieldKeyword"] = 121] = "YieldKeyword";
            // Contextual keywords
            SyntaxKind[SyntaxKind["AbstractKeyword"] = 122] = "AbstractKeyword";
            SyntaxKind[SyntaxKind["AsKeyword"] = 123] = "AsKeyword";
            SyntaxKind[SyntaxKind["AssertsKeyword"] = 124] = "AssertsKeyword";
            SyntaxKind[SyntaxKind["AnyKeyword"] = 125] = "AnyKeyword";
            SyntaxKind[SyntaxKind["AsyncKeyword"] = 126] = "AsyncKeyword";
            SyntaxKind[SyntaxKind["AwaitKeyword"] = 127] = "AwaitKeyword";
            SyntaxKind[SyntaxKind["BooleanKeyword"] = 128] = "BooleanKeyword";
            SyntaxKind[SyntaxKind["ConstructorKeyword"] = 129] = "ConstructorKeyword";
            SyntaxKind[SyntaxKind["DeclareKeyword"] = 130] = "DeclareKeyword";
            SyntaxKind[SyntaxKind["GetKeyword"] = 131] = "GetKeyword";
            SyntaxKind[SyntaxKind["InferKeyword"] = 132] = "InferKeyword";
            SyntaxKind[SyntaxKind["IsKeyword"] = 133] = "IsKeyword";
            SyntaxKind[SyntaxKind["KeyOfKeyword"] = 134] = "KeyOfKeyword";
            SyntaxKind[SyntaxKind["ModuleKeyword"] = 135] = "ModuleKeyword";
            SyntaxKind[SyntaxKind["NamespaceKeyword"] = 136] = "NamespaceKeyword";
            SyntaxKind[SyntaxKind["NeverKeyword"] = 137] = "NeverKeyword";
            SyntaxKind[SyntaxKind["ReadonlyKeyword"] = 138] = "ReadonlyKeyword";
            SyntaxKind[SyntaxKind["RequireKeyword"] = 139] = "RequireKeyword";
            SyntaxKind[SyntaxKind["NumberKeyword"] = 140] = "NumberKeyword";
            SyntaxKind[SyntaxKind["ObjectKeyword"] = 141] = "ObjectKeyword";
            SyntaxKind[SyntaxKind["SetKeyword"] = 142] = "SetKeyword";
            SyntaxKind[SyntaxKind["StringKeyword"] = 143] = "StringKeyword";
            SyntaxKind[SyntaxKind["SymbolKeyword"] = 144] = "SymbolKeyword";
            SyntaxKind[SyntaxKind["TypeKeyword"] = 145] = "TypeKeyword";
            SyntaxKind[SyntaxKind["UndefinedKeyword"] = 146] = "UndefinedKeyword";
            SyntaxKind[SyntaxKind["UniqueKeyword"] = 147] = "UniqueKeyword";
            SyntaxKind[SyntaxKind["UnknownKeyword"] = 148] = "UnknownKeyword";
            SyntaxKind[SyntaxKind["FromKeyword"] = 149] = "FromKeyword";
            SyntaxKind[SyntaxKind["GlobalKeyword"] = 150] = "GlobalKeyword";
            SyntaxKind[SyntaxKind["BigIntKeyword"] = 151] = "BigIntKeyword";
            SyntaxKind[SyntaxKind["OfKeyword"] = 152] = "OfKeyword";
            // Parse tree nodes
            // Names
            SyntaxKind[SyntaxKind["QualifiedName"] = 153] = "QualifiedName";
            SyntaxKind[SyntaxKind["ComputedPropertyName"] = 154] = "ComputedPropertyName";
            // Signature elements
            SyntaxKind[SyntaxKind["TypeParameter"] = 155] = "TypeParameter";
            SyntaxKind[SyntaxKind["Parameter"] = 156] = "Parameter";
            SyntaxKind[SyntaxKind["Decorator"] = 157] = "Decorator";
            // TypeMember
            SyntaxKind[SyntaxKind["PropertySignature"] = 158] = "PropertySignature";
            SyntaxKind[SyntaxKind["PropertyDeclaration"] = 159] = "PropertyDeclaration";
            SyntaxKind[SyntaxKind["MethodSignature"] = 160] = "MethodSignature";
            SyntaxKind[SyntaxKind["MethodDeclaration"] = 161] = "MethodDeclaration";
            SyntaxKind[SyntaxKind["Constructor"] = 162] = "Constructor";
            SyntaxKind[SyntaxKind["GetAccessor"] = 163] = "GetAccessor";
            SyntaxKind[SyntaxKind["SetAccessor"] = 164] = "SetAccessor";
            SyntaxKind[SyntaxKind["CallSignature"] = 165] = "CallSignature";
            SyntaxKind[SyntaxKind["ConstructSignature"] = 166] = "ConstructSignature";
            SyntaxKind[SyntaxKind["IndexSignature"] = 167] = "IndexSignature";
            // Type
            SyntaxKind[SyntaxKind["TypePredicate"] = 168] = "TypePredicate";
            SyntaxKind[SyntaxKind["TypeReference"] = 169] = "TypeReference";
            SyntaxKind[SyntaxKind["FunctionType"] = 170] = "FunctionType";
            SyntaxKind[SyntaxKind["ConstructorType"] = 171] = "ConstructorType";
            SyntaxKind[SyntaxKind["TypeQuery"] = 172] = "TypeQuery";
            SyntaxKind[SyntaxKind["TypeLiteral"] = 173] = "TypeLiteral";
            SyntaxKind[SyntaxKind["ArrayType"] = 174] = "ArrayType";
            SyntaxKind[SyntaxKind["TupleType"] = 175] = "TupleType";
            SyntaxKind[SyntaxKind["OptionalType"] = 176] = "OptionalType";
            SyntaxKind[SyntaxKind["RestType"] = 177] = "RestType";
            SyntaxKind[SyntaxKind["UnionType"] = 178] = "UnionType";
            SyntaxKind[SyntaxKind["IntersectionType"] = 179] = "IntersectionType";
            SyntaxKind[SyntaxKind["ConditionalType"] = 180] = "ConditionalType";
            SyntaxKind[SyntaxKind["InferType"] = 181] = "InferType";
            SyntaxKind[SyntaxKind["ParenthesizedType"] = 182] = "ParenthesizedType";
            SyntaxKind[SyntaxKind["ThisType"] = 183] = "ThisType";
            SyntaxKind[SyntaxKind["TypeOperator"] = 184] = "TypeOperator";
            SyntaxKind[SyntaxKind["IndexedAccessType"] = 185] = "IndexedAccessType";
            SyntaxKind[SyntaxKind["MappedType"] = 186] = "MappedType";
            SyntaxKind[SyntaxKind["LiteralType"] = 187] = "LiteralType";
            SyntaxKind[SyntaxKind["ImportType"] = 188] = "ImportType";
            // Binding patterns
            SyntaxKind[SyntaxKind["ObjectBindingPattern"] = 189] = "ObjectBindingPattern";
            SyntaxKind[SyntaxKind["ArrayBindingPattern"] = 190] = "ArrayBindingPattern";
            SyntaxKind[SyntaxKind["BindingElement"] = 191] = "BindingElement";
            // Expression
            SyntaxKind[SyntaxKind["ArrayLiteralExpression"] = 192] = "ArrayLiteralExpression";
            SyntaxKind[SyntaxKind["ObjectLiteralExpression"] = 193] = "ObjectLiteralExpression";
            SyntaxKind[SyntaxKind["PropertyAccessExpression"] = 194] = "PropertyAccessExpression";
            SyntaxKind[SyntaxKind["ElementAccessExpression"] = 195] = "ElementAccessExpression";
            SyntaxKind[SyntaxKind["CallExpression"] = 196] = "CallExpression";
            SyntaxKind[SyntaxKind["NewExpression"] = 197] = "NewExpression";
            SyntaxKind[SyntaxKind["TaggedTemplateExpression"] = 198] = "TaggedTemplateExpression";
            SyntaxKind[SyntaxKind["TypeAssertionExpression"] = 199] = "TypeAssertionExpression";
            SyntaxKind[SyntaxKind["ParenthesizedExpression"] = 200] = "ParenthesizedExpression";
            SyntaxKind[SyntaxKind["FunctionExpression"] = 201] = "FunctionExpression";
            SyntaxKind[SyntaxKind["ArrowFunction"] = 202] = "ArrowFunction";
            SyntaxKind[SyntaxKind["DeleteExpression"] = 203] = "DeleteExpression";
            SyntaxKind[SyntaxKind["TypeOfExpression"] = 204] = "TypeOfExpression";
            SyntaxKind[SyntaxKind["VoidExpression"] = 205] = "VoidExpression";
            SyntaxKind[SyntaxKind["AwaitExpression"] = 206] = "AwaitExpression";
            SyntaxKind[SyntaxKind["PrefixUnaryExpression"] = 207] = "PrefixUnaryExpression";
            SyntaxKind[SyntaxKind["PostfixUnaryExpression"] = 208] = "PostfixUnaryExpression";
            SyntaxKind[SyntaxKind["BinaryExpression"] = 209] = "BinaryExpression";
            SyntaxKind[SyntaxKind["ConditionalExpression"] = 210] = "ConditionalExpression";
            SyntaxKind[SyntaxKind["TemplateExpression"] = 211] = "TemplateExpression";
            SyntaxKind[SyntaxKind["YieldExpression"] = 212] = "YieldExpression";
            SyntaxKind[SyntaxKind["SpreadElement"] = 213] = "SpreadElement";
            SyntaxKind[SyntaxKind["ClassExpression"] = 214] = "ClassExpression";
            SyntaxKind[SyntaxKind["OmittedExpression"] = 215] = "OmittedExpression";
            SyntaxKind[SyntaxKind["ExpressionWithTypeArguments"] = 216] = "ExpressionWithTypeArguments";
            SyntaxKind[SyntaxKind["AsExpression"] = 217] = "AsExpression";
            SyntaxKind[SyntaxKind["NonNullExpression"] = 218] = "NonNullExpression";
            SyntaxKind[SyntaxKind["MetaProperty"] = 219] = "MetaProperty";
            SyntaxKind[SyntaxKind["SyntheticExpression"] = 220] = "SyntheticExpression";
            // Misc
            SyntaxKind[SyntaxKind["TemplateSpan"] = 221] = "TemplateSpan";
            SyntaxKind[SyntaxKind["SemicolonClassElement"] = 222] = "SemicolonClassElement";
            // Element
            SyntaxKind[SyntaxKind["Block"] = 223] = "Block";
            SyntaxKind[SyntaxKind["EmptyStatement"] = 224] = "EmptyStatement";
            SyntaxKind[SyntaxKind["VariableStatement"] = 225] = "VariableStatement";
            SyntaxKind[SyntaxKind["ExpressionStatement"] = 226] = "ExpressionStatement";
            SyntaxKind[SyntaxKind["IfStatement"] = 227] = "IfStatement";
            SyntaxKind[SyntaxKind["DoStatement"] = 228] = "DoStatement";
            SyntaxKind[SyntaxKind["WhileStatement"] = 229] = "WhileStatement";
            SyntaxKind[SyntaxKind["ForStatement"] = 230] = "ForStatement";
            SyntaxKind[SyntaxKind["ForInStatement"] = 231] = "ForInStatement";
            SyntaxKind[SyntaxKind["ForOfStatement"] = 232] = "ForOfStatement";
            SyntaxKind[SyntaxKind["ContinueStatement"] = 233] = "ContinueStatement";
            SyntaxKind[SyntaxKind["BreakStatement"] = 234] = "BreakStatement";
            SyntaxKind[SyntaxKind["ReturnStatement"] = 235] = "ReturnStatement";
            SyntaxKind[SyntaxKind["WithStatement"] = 236] = "WithStatement";
            SyntaxKind[SyntaxKind["SwitchStatement"] = 237] = "SwitchStatement";
            SyntaxKind[SyntaxKind["LabeledStatement"] = 238] = "LabeledStatement";
            SyntaxKind[SyntaxKind["ThrowStatement"] = 239] = "ThrowStatement";
            SyntaxKind[SyntaxKind["TryStatement"] = 240] = "TryStatement";
            SyntaxKind[SyntaxKind["DebuggerStatement"] = 241] = "DebuggerStatement";
            SyntaxKind[SyntaxKind["VariableDeclaration"] = 242] = "VariableDeclaration";
            SyntaxKind[SyntaxKind["VariableDeclarationList"] = 243] = "VariableDeclarationList";
            SyntaxKind[SyntaxKind["FunctionDeclaration"] = 244] = "FunctionDeclaration";
            SyntaxKind[SyntaxKind["ClassDeclaration"] = 245] = "ClassDeclaration";
            SyntaxKind[SyntaxKind["InterfaceDeclaration"] = 246] = "InterfaceDeclaration";
            SyntaxKind[SyntaxKind["TypeAliasDeclaration"] = 247] = "TypeAliasDeclaration";
            SyntaxKind[SyntaxKind["EnumDeclaration"] = 248] = "EnumDeclaration";
            SyntaxKind[SyntaxKind["ModuleDeclaration"] = 249] = "ModuleDeclaration";
            SyntaxKind[SyntaxKind["ModuleBlock"] = 250] = "ModuleBlock";
            SyntaxKind[SyntaxKind["CaseBlock"] = 251] = "CaseBlock";
            SyntaxKind[SyntaxKind["NamespaceExportDeclaration"] = 252] = "NamespaceExportDeclaration";
            SyntaxKind[SyntaxKind["ImportEqualsDeclaration"] = 253] = "ImportEqualsDeclaration";
            SyntaxKind[SyntaxKind["ImportDeclaration"] = 254] = "ImportDeclaration";
            SyntaxKind[SyntaxKind["ImportClause"] = 255] = "ImportClause";
            SyntaxKind[SyntaxKind["NamespaceImport"] = 256] = "NamespaceImport";
            SyntaxKind[SyntaxKind["NamedImports"] = 257] = "NamedImports";
            SyntaxKind[SyntaxKind["ImportSpecifier"] = 258] = "ImportSpecifier";
            SyntaxKind[SyntaxKind["ExportAssignment"] = 259] = "ExportAssignment";
            SyntaxKind[SyntaxKind["ExportDeclaration"] = 260] = "ExportDeclaration";
            SyntaxKind[SyntaxKind["NamedExports"] = 261] = "NamedExports";
            SyntaxKind[SyntaxKind["NamespaceExport"] = 262] = "NamespaceExport";
            SyntaxKind[SyntaxKind["ExportSpecifier"] = 263] = "ExportSpecifier";
            SyntaxKind[SyntaxKind["MissingDeclaration"] = 264] = "MissingDeclaration";
            // Module references
            SyntaxKind[SyntaxKind["ExternalModuleReference"] = 265] = "ExternalModuleReference";
            // JSX
            SyntaxKind[SyntaxKind["JsxElement"] = 266] = "JsxElement";
            SyntaxKind[SyntaxKind["JsxSelfClosingElement"] = 267] = "JsxSelfClosingElement";
            SyntaxKind[SyntaxKind["JsxOpeningElement"] = 268] = "JsxOpeningElement";
            SyntaxKind[SyntaxKind["JsxClosingElement"] = 269] = "JsxClosingElement";
            SyntaxKind[SyntaxKind["JsxFragment"] = 270] = "JsxFragment";
            SyntaxKind[SyntaxKind["JsxOpeningFragment"] = 271] = "JsxOpeningFragment";
            SyntaxKind[SyntaxKind["JsxClosingFragment"] = 272] = "JsxClosingFragment";
            SyntaxKind[SyntaxKind["JsxAttribute"] = 273] = "JsxAttribute";
            SyntaxKind[SyntaxKind["JsxAttributes"] = 274] = "JsxAttributes";
            SyntaxKind[SyntaxKind["JsxSpreadAttribute"] = 275] = "JsxSpreadAttribute";
            SyntaxKind[SyntaxKind["JsxExpression"] = 276] = "JsxExpression";
            // Clauses
            SyntaxKind[SyntaxKind["CaseClause"] = 277] = "CaseClause";
            SyntaxKind[SyntaxKind["DefaultClause"] = 278] = "DefaultClause";
            SyntaxKind[SyntaxKind["HeritageClause"] = 279] = "HeritageClause";
            SyntaxKind[SyntaxKind["CatchClause"] = 280] = "CatchClause";
            // Property assignments
            SyntaxKind[SyntaxKind["PropertyAssignment"] = 281] = "PropertyAssignment";
            SyntaxKind[SyntaxKind["ShorthandPropertyAssignment"] = 282] = "ShorthandPropertyAssignment";
            SyntaxKind[SyntaxKind["SpreadAssignment"] = 283] = "SpreadAssignment";
            // Enum
            SyntaxKind[SyntaxKind["EnumMember"] = 284] = "EnumMember";
            // Unparsed
            SyntaxKind[SyntaxKind["UnparsedPrologue"] = 285] = "UnparsedPrologue";
            SyntaxKind[SyntaxKind["UnparsedPrepend"] = 286] = "UnparsedPrepend";
            SyntaxKind[SyntaxKind["UnparsedText"] = 287] = "UnparsedText";
            SyntaxKind[SyntaxKind["UnparsedInternalText"] = 288] = "UnparsedInternalText";
            SyntaxKind[SyntaxKind["UnparsedSyntheticReference"] = 289] = "UnparsedSyntheticReference";
            // Top-level nodes
            SyntaxKind[SyntaxKind["SourceFile"] = 290] = "SourceFile";
            SyntaxKind[SyntaxKind["Bundle"] = 291] = "Bundle";
            SyntaxKind[SyntaxKind["UnparsedSource"] = 292] = "UnparsedSource";
            SyntaxKind[SyntaxKind["InputFiles"] = 293] = "InputFiles";
            // JSDoc nodes
            SyntaxKind[SyntaxKind["JSDocTypeExpression"] = 294] = "JSDocTypeExpression";
            // The * type
            SyntaxKind[SyntaxKind["JSDocAllType"] = 295] = "JSDocAllType";
            // The ? type
            SyntaxKind[SyntaxKind["JSDocUnknownType"] = 296] = "JSDocUnknownType";
            SyntaxKind[SyntaxKind["JSDocNullableType"] = 297] = "JSDocNullableType";
            SyntaxKind[SyntaxKind["JSDocNonNullableType"] = 298] = "JSDocNonNullableType";
            SyntaxKind[SyntaxKind["JSDocOptionalType"] = 299] = "JSDocOptionalType";
            SyntaxKind[SyntaxKind["JSDocFunctionType"] = 300] = "JSDocFunctionType";
            SyntaxKind[SyntaxKind["JSDocVariadicType"] = 301] = "JSDocVariadicType";
            // https://jsdoc.app/about-namepaths.html
            SyntaxKind[SyntaxKind["JSDocNamepathType"] = 302] = "JSDocNamepathType";
            SyntaxKind[SyntaxKind["JSDocComment"] = 303] = "JSDocComment";
            SyntaxKind[SyntaxKind["JSDocTypeLiteral"] = 304] = "JSDocTypeLiteral";
            SyntaxKind[SyntaxKind["JSDocSignature"] = 305] = "JSDocSignature";
            SyntaxKind[SyntaxKind["JSDocTag"] = 306] = "JSDocTag";
            SyntaxKind[SyntaxKind["JSDocAugmentsTag"] = 307] = "JSDocAugmentsTag";
            SyntaxKind[SyntaxKind["JSDocImplementsTag"] = 308] = "JSDocImplementsTag";
            SyntaxKind[SyntaxKind["JSDocAuthorTag"] = 309] = "JSDocAuthorTag";
            SyntaxKind[SyntaxKind["JSDocClassTag"] = 310] = "JSDocClassTag";
            SyntaxKind[SyntaxKind["JSDocPublicTag"] = 311] = "JSDocPublicTag";
            SyntaxKind[SyntaxKind["JSDocPrivateTag"] = 312] = "JSDocPrivateTag";
            SyntaxKind[SyntaxKind["JSDocProtectedTag"] = 313] = "JSDocProtectedTag";
            SyntaxKind[SyntaxKind["JSDocReadonlyTag"] = 314] = "JSDocReadonlyTag";
            SyntaxKind[SyntaxKind["JSDocCallbackTag"] = 315] = "JSDocCallbackTag";
            SyntaxKind[SyntaxKind["JSDocEnumTag"] = 316] = "JSDocEnumTag";
            SyntaxKind[SyntaxKind["JSDocParameterTag"] = 317] = "JSDocParameterTag";
            SyntaxKind[SyntaxKind["JSDocReturnTag"] = 318] = "JSDocReturnTag";
            SyntaxKind[SyntaxKind["JSDocThisTag"] = 319] = "JSDocThisTag";
            SyntaxKind[SyntaxKind["JSDocTypeTag"] = 320] = "JSDocTypeTag";
            SyntaxKind[SyntaxKind["JSDocTemplateTag"] = 321] = "JSDocTemplateTag";
            SyntaxKind[SyntaxKind["JSDocTypedefTag"] = 322] = "JSDocTypedefTag";
            SyntaxKind[SyntaxKind["JSDocPropertyTag"] = 323] = "JSDocPropertyTag";
            // Synthesized list
            SyntaxKind[SyntaxKind["SyntaxList"] = 324] = "SyntaxList";
            // Transformation nodes
            SyntaxKind[SyntaxKind["NotEmittedStatement"] = 325] = "NotEmittedStatement";
            SyntaxKind[SyntaxKind["PartiallyEmittedExpression"] = 326] = "PartiallyEmittedExpression";
            SyntaxKind[SyntaxKind["CommaListExpression"] = 327] = "CommaListExpression";
            SyntaxKind[SyntaxKind["MergeDeclarationMarker"] = 328] = "MergeDeclarationMarker";
            SyntaxKind[SyntaxKind["EndOfDeclarationMarker"] = 329] = "EndOfDeclarationMarker";
            SyntaxKind[SyntaxKind["SyntheticReferenceExpression"] = 330] = "SyntheticReferenceExpression";
            // Enum value count
            SyntaxKind[SyntaxKind["Count"] = 331] = "Count";
            // Markers
            SyntaxKind[SyntaxKind["FirstAssignment"] = 62] = "FirstAssignment";
            SyntaxKind[SyntaxKind["LastAssignment"] = 74] = "LastAssignment";
            SyntaxKind[SyntaxKind["FirstCompoundAssignment"] = 63] = "FirstCompoundAssignment";
            SyntaxKind[SyntaxKind["LastCompoundAssignment"] = 74] = "LastCompoundAssignment";
            SyntaxKind[SyntaxKind["FirstReservedWord"] = 77] = "FirstReservedWord";
            SyntaxKind[SyntaxKind["LastReservedWord"] = 112] = "LastReservedWord";
            SyntaxKind[SyntaxKind["FirstKeyword"] = 77] = "FirstKeyword";
            SyntaxKind[SyntaxKind["LastKeyword"] = 152] = "LastKeyword";
            SyntaxKind[SyntaxKind["FirstFutureReservedWord"] = 113] = "FirstFutureReservedWord";
            SyntaxKind[SyntaxKind["LastFutureReservedWord"] = 121] = "LastFutureReservedWord";
            SyntaxKind[SyntaxKind["FirstTypeNode"] = 168] = "FirstTypeNode";
            SyntaxKind[SyntaxKind["LastTypeNode"] = 188] = "LastTypeNode";
            SyntaxKind[SyntaxKind["FirstPunctuation"] = 18] = "FirstPunctuation";
            SyntaxKind[SyntaxKind["LastPunctuation"] = 74] = "LastPunctuation";
            SyntaxKind[SyntaxKind["FirstToken"] = 0] = "FirstToken";
            SyntaxKind[SyntaxKind["LastToken"] = 152] = "LastToken";
            SyntaxKind[SyntaxKind["FirstTriviaToken"] = 2] = "FirstTriviaToken";
            SyntaxKind[SyntaxKind["LastTriviaToken"] = 7] = "LastTriviaToken";
            SyntaxKind[SyntaxKind["FirstLiteralToken"] = 8] = "FirstLiteralToken";
            SyntaxKind[SyntaxKind["LastLiteralToken"] = 14] = "LastLiteralToken";
            SyntaxKind[SyntaxKind["FirstTemplateToken"] = 14] = "FirstTemplateToken";
            SyntaxKind[SyntaxKind["LastTemplateToken"] = 17] = "LastTemplateToken";
            SyntaxKind[SyntaxKind["FirstBinaryOperator"] = 29] = "FirstBinaryOperator";
            SyntaxKind[SyntaxKind["LastBinaryOperator"] = 74] = "LastBinaryOperator";
            SyntaxKind[SyntaxKind["FirstStatement"] = 225] = "FirstStatement";
            SyntaxKind[SyntaxKind["LastStatement"] = 241] = "LastStatement";
            SyntaxKind[SyntaxKind["FirstNode"] = 153] = "FirstNode";
            SyntaxKind[SyntaxKind["FirstJSDocNode"] = 294] = "FirstJSDocNode";
            SyntaxKind[SyntaxKind["LastJSDocNode"] = 323] = "LastJSDocNode";
            SyntaxKind[SyntaxKind["FirstJSDocTagNode"] = 306] = "FirstJSDocTagNode";
            SyntaxKind[SyntaxKind["LastJSDocTagNode"] = 323] = "LastJSDocTagNode";
            /* @internal */ SyntaxKind[SyntaxKind["FirstContextualKeyword"] = 122] = "FirstContextualKeyword";
            /* @internal */ SyntaxKind[SyntaxKind["LastContextualKeyword"] = 152] = "LastContextualKeyword";
        })(SyntaxKind = ts.SyntaxKind || (ts.SyntaxKind = {}));
        var NodeFlags;
        (function (NodeFlags) {
            NodeFlags[NodeFlags["None"] = 0] = "None";
            NodeFlags[NodeFlags["Let"] = 1] = "Let";
            NodeFlags[NodeFlags["Const"] = 2] = "Const";
            NodeFlags[NodeFlags["NestedNamespace"] = 4] = "NestedNamespace";
            NodeFlags[NodeFlags["Synthesized"] = 8] = "Synthesized";
            NodeFlags[NodeFlags["Namespace"] = 16] = "Namespace";
            NodeFlags[NodeFlags["OptionalChain"] = 32] = "OptionalChain";
            NodeFlags[NodeFlags["ExportContext"] = 64] = "ExportContext";
            NodeFlags[NodeFlags["ContainsThis"] = 128] = "ContainsThis";
            NodeFlags[NodeFlags["HasImplicitReturn"] = 256] = "HasImplicitReturn";
            NodeFlags[NodeFlags["HasExplicitReturn"] = 512] = "HasExplicitReturn";
            NodeFlags[NodeFlags["GlobalAugmentation"] = 1024] = "GlobalAugmentation";
            NodeFlags[NodeFlags["HasAsyncFunctions"] = 2048] = "HasAsyncFunctions";
            NodeFlags[NodeFlags["DisallowInContext"] = 4096] = "DisallowInContext";
            NodeFlags[NodeFlags["YieldContext"] = 8192] = "YieldContext";
            NodeFlags[NodeFlags["DecoratorContext"] = 16384] = "DecoratorContext";
            NodeFlags[NodeFlags["AwaitContext"] = 32768] = "AwaitContext";
            NodeFlags[NodeFlags["ThisNodeHasError"] = 65536] = "ThisNodeHasError";
            NodeFlags[NodeFlags["JavaScriptFile"] = 131072] = "JavaScriptFile";
            NodeFlags[NodeFlags["ThisNodeOrAnySubNodesHasError"] = 262144] = "ThisNodeOrAnySubNodesHasError";
            NodeFlags[NodeFlags["HasAggregatedChildData"] = 524288] = "HasAggregatedChildData";
            // These flags will be set when the parser encounters a dynamic import expression or 'import.meta' to avoid
            // walking the tree if the flags are not set. However, these flags are just a approximation
            // (hence why it's named "PossiblyContainsDynamicImport") because once set, the flags never get cleared.
            // During editing, if a dynamic import is removed, incremental parsing will *NOT* clear this flag.
            // This means that the tree will always be traversed during module resolution, or when looking for external module indicators.
            // However, the removal operation should not occur often and in the case of the
            // removal, it is likely that users will add the import anyway.
            // The advantage of this approach is its simplicity. For the case of batch compilation,
            // we guarantee that users won't have to pay the price of walking the tree if a dynamic import isn't used.
            /* @internal */ NodeFlags[NodeFlags["PossiblyContainsDynamicImport"] = 1048576] = "PossiblyContainsDynamicImport";
            /* @internal */ NodeFlags[NodeFlags["PossiblyContainsImportMeta"] = 2097152] = "PossiblyContainsImportMeta";
            NodeFlags[NodeFlags["JSDoc"] = 4194304] = "JSDoc";
            /* @internal */ NodeFlags[NodeFlags["Ambient"] = 8388608] = "Ambient";
            /* @internal */ NodeFlags[NodeFlags["InWithStatement"] = 16777216] = "InWithStatement";
            NodeFlags[NodeFlags["JsonFile"] = 33554432] = "JsonFile";
            /* @internal */ NodeFlags[NodeFlags["TypeCached"] = 67108864] = "TypeCached";
            NodeFlags[NodeFlags["BlockScoped"] = 3] = "BlockScoped";
            NodeFlags[NodeFlags["ReachabilityCheckFlags"] = 768] = "ReachabilityCheckFlags";
            NodeFlags[NodeFlags["ReachabilityAndEmitFlags"] = 2816] = "ReachabilityAndEmitFlags";
            // Parsing context flags
            NodeFlags[NodeFlags["ContextFlags"] = 25358336] = "ContextFlags";
            // Exclude these flags when parsing a Type
            NodeFlags[NodeFlags["TypeExcludesFlags"] = 40960] = "TypeExcludesFlags";
            // Represents all flags that are potentially set once and
            // never cleared on SourceFiles which get re-used in between incremental parses.
            // See the comment above on `PossiblyContainsDynamicImport` and `PossiblyContainsImportMeta`.
            /* @internal */ NodeFlags[NodeFlags["PermanentlySetIncrementalFlags"] = 3145728] = "PermanentlySetIncrementalFlags";
        })(NodeFlags = ts.NodeFlags || (ts.NodeFlags = {}));
        var ModifierFlags;
        (function (ModifierFlags) {
            ModifierFlags[ModifierFlags["None"] = 0] = "None";
            ModifierFlags[ModifierFlags["Export"] = 1] = "Export";
            ModifierFlags[ModifierFlags["Ambient"] = 2] = "Ambient";
            ModifierFlags[ModifierFlags["Public"] = 4] = "Public";
            ModifierFlags[ModifierFlags["Private"] = 8] = "Private";
            ModifierFlags[ModifierFlags["Protected"] = 16] = "Protected";
            ModifierFlags[ModifierFlags["Static"] = 32] = "Static";
            ModifierFlags[ModifierFlags["Readonly"] = 64] = "Readonly";
            ModifierFlags[ModifierFlags["Abstract"] = 128] = "Abstract";
            ModifierFlags[ModifierFlags["Async"] = 256] = "Async";
            ModifierFlags[ModifierFlags["Default"] = 512] = "Default";
            ModifierFlags[ModifierFlags["Const"] = 2048] = "Const";
            ModifierFlags[ModifierFlags["HasComputedFlags"] = 536870912] = "HasComputedFlags";
            ModifierFlags[ModifierFlags["AccessibilityModifier"] = 28] = "AccessibilityModifier";
            // Accessibility modifiers and 'readonly' can be attached to a parameter in a constructor to make it a property.
            ModifierFlags[ModifierFlags["ParameterPropertyModifier"] = 92] = "ParameterPropertyModifier";
            ModifierFlags[ModifierFlags["NonPublicAccessibilityModifier"] = 24] = "NonPublicAccessibilityModifier";
            ModifierFlags[ModifierFlags["TypeScriptModifier"] = 2270] = "TypeScriptModifier";
            ModifierFlags[ModifierFlags["ExportDefault"] = 513] = "ExportDefault";
            ModifierFlags[ModifierFlags["All"] = 3071] = "All";
        })(ModifierFlags = ts.ModifierFlags || (ts.ModifierFlags = {}));
        var JsxFlags;
        (function (JsxFlags) {
            JsxFlags[JsxFlags["None"] = 0] = "None";
            /** An element from a named property of the JSX.IntrinsicElements interface */
            JsxFlags[JsxFlags["IntrinsicNamedElement"] = 1] = "IntrinsicNamedElement";
            /** An element inferred from the string index signature of the JSX.IntrinsicElements interface */
            JsxFlags[JsxFlags["IntrinsicIndexedElement"] = 2] = "IntrinsicIndexedElement";
            JsxFlags[JsxFlags["IntrinsicElement"] = 3] = "IntrinsicElement";
        })(JsxFlags = ts.JsxFlags || (ts.JsxFlags = {}));
        /* @internal */
        var RelationComparisonResult;
        (function (RelationComparisonResult) {
            RelationComparisonResult[RelationComparisonResult["Succeeded"] = 1] = "Succeeded";
            RelationComparisonResult[RelationComparisonResult["Failed"] = 2] = "Failed";
            RelationComparisonResult[RelationComparisonResult["Reported"] = 4] = "Reported";
            RelationComparisonResult[RelationComparisonResult["ReportsUnmeasurable"] = 8] = "ReportsUnmeasurable";
            RelationComparisonResult[RelationComparisonResult["ReportsUnreliable"] = 16] = "ReportsUnreliable";
            RelationComparisonResult[RelationComparisonResult["ReportsMask"] = 24] = "ReportsMask";
        })(RelationComparisonResult = ts.RelationComparisonResult || (ts.RelationComparisonResult = {}));
        /*@internal*/
        var GeneratedIdentifierFlags;
        (function (GeneratedIdentifierFlags) {
            // Kinds
            GeneratedIdentifierFlags[GeneratedIdentifierFlags["None"] = 0] = "None";
            GeneratedIdentifierFlags[GeneratedIdentifierFlags["Auto"] = 1] = "Auto";
            GeneratedIdentifierFlags[GeneratedIdentifierFlags["Loop"] = 2] = "Loop";
            GeneratedIdentifierFlags[GeneratedIdentifierFlags["Unique"] = 3] = "Unique";
            GeneratedIdentifierFlags[GeneratedIdentifierFlags["Node"] = 4] = "Node";
            GeneratedIdentifierFlags[GeneratedIdentifierFlags["KindMask"] = 7] = "KindMask";
            // Flags
            GeneratedIdentifierFlags[GeneratedIdentifierFlags["ReservedInNestedScopes"] = 8] = "ReservedInNestedScopes";
            GeneratedIdentifierFlags[GeneratedIdentifierFlags["Optimistic"] = 16] = "Optimistic";
            GeneratedIdentifierFlags[GeneratedIdentifierFlags["FileLevel"] = 32] = "FileLevel";
        })(GeneratedIdentifierFlags = ts.GeneratedIdentifierFlags || (ts.GeneratedIdentifierFlags = {}));
        var TokenFlags;
        (function (TokenFlags) {
            TokenFlags[TokenFlags["None"] = 0] = "None";
            /* @internal */
            TokenFlags[TokenFlags["PrecedingLineBreak"] = 1] = "PrecedingLineBreak";
            /* @internal */
            TokenFlags[TokenFlags["PrecedingJSDocComment"] = 2] = "PrecedingJSDocComment";
            /* @internal */
            TokenFlags[TokenFlags["Unterminated"] = 4] = "Unterminated";
            /* @internal */
            TokenFlags[TokenFlags["ExtendedUnicodeEscape"] = 8] = "ExtendedUnicodeEscape";
            TokenFlags[TokenFlags["Scientific"] = 16] = "Scientific";
            TokenFlags[TokenFlags["Octal"] = 32] = "Octal";
            TokenFlags[TokenFlags["HexSpecifier"] = 64] = "HexSpecifier";
            TokenFlags[TokenFlags["BinarySpecifier"] = 128] = "BinarySpecifier";
            TokenFlags[TokenFlags["OctalSpecifier"] = 256] = "OctalSpecifier";
            /* @internal */
            TokenFlags[TokenFlags["ContainsSeparator"] = 512] = "ContainsSeparator";
            /* @internal */
            TokenFlags[TokenFlags["UnicodeEscape"] = 1024] = "UnicodeEscape";
            /* @internal */
            TokenFlags[TokenFlags["ContainsInvalidEscape"] = 2048] = "ContainsInvalidEscape";
            /* @internal */
            TokenFlags[TokenFlags["BinaryOrOctalSpecifier"] = 384] = "BinaryOrOctalSpecifier";
            /* @internal */
            TokenFlags[TokenFlags["NumericLiteralFlags"] = 1008] = "NumericLiteralFlags";
        })(TokenFlags = ts.TokenFlags || (ts.TokenFlags = {}));
        // NOTE: Ensure this is up-to-date with src/debug/debug.ts
        var FlowFlags;
        (function (FlowFlags) {
            FlowFlags[FlowFlags["Unreachable"] = 1] = "Unreachable";
            FlowFlags[FlowFlags["Start"] = 2] = "Start";
            FlowFlags[FlowFlags["BranchLabel"] = 4] = "BranchLabel";
            FlowFlags[FlowFlags["LoopLabel"] = 8] = "LoopLabel";
            FlowFlags[FlowFlags["Assignment"] = 16] = "Assignment";
            FlowFlags[FlowFlags["TrueCondition"] = 32] = "TrueCondition";
            FlowFlags[FlowFlags["FalseCondition"] = 64] = "FalseCondition";
            FlowFlags[FlowFlags["SwitchClause"] = 128] = "SwitchClause";
            FlowFlags[FlowFlags["ArrayMutation"] = 256] = "ArrayMutation";
            FlowFlags[FlowFlags["Call"] = 512] = "Call";
            FlowFlags[FlowFlags["ReduceLabel"] = 1024] = "ReduceLabel";
            FlowFlags[FlowFlags["Referenced"] = 2048] = "Referenced";
            FlowFlags[FlowFlags["Shared"] = 4096] = "Shared";
            FlowFlags[FlowFlags["Label"] = 12] = "Label";
            FlowFlags[FlowFlags["Condition"] = 96] = "Condition";
        })(FlowFlags = ts.FlowFlags || (ts.FlowFlags = {}));
        /* @internal */
        var CommentDirectiveType;
        (function (CommentDirectiveType) {
            CommentDirectiveType[CommentDirectiveType["ExpectError"] = 0] = "ExpectError";
            CommentDirectiveType[CommentDirectiveType["Ignore"] = 1] = "Ignore";
        })(CommentDirectiveType = ts.CommentDirectiveType || (ts.CommentDirectiveType = {}));
        var OperationCanceledException = /** @class */ (function () {
            function OperationCanceledException() {
            }
            return OperationCanceledException;
        }());
        ts.OperationCanceledException = OperationCanceledException;
        /*@internal*/
        var RefFileKind;
        (function (RefFileKind) {
            RefFileKind[RefFileKind["Import"] = 0] = "Import";
            RefFileKind[RefFileKind["ReferenceFile"] = 1] = "ReferenceFile";
            RefFileKind[RefFileKind["TypeReferenceDirective"] = 2] = "TypeReferenceDirective";
        })(RefFileKind = ts.RefFileKind || (ts.RefFileKind = {}));
        /* @internal */
        var StructureIsReused;
        (function (StructureIsReused) {
            StructureIsReused[StructureIsReused["Not"] = 0] = "Not";
            StructureIsReused[StructureIsReused["SafeModules"] = 1] = "SafeModules";
            StructureIsReused[StructureIsReused["Completely"] = 2] = "Completely";
        })(StructureIsReused = ts.StructureIsReused || (ts.StructureIsReused = {}));
        /** Return code used by getEmitOutput function to indicate status of the function */
        var ExitStatus;
        (function (ExitStatus) {
            // Compiler ran successfully.  Either this was a simple do-nothing compilation (for example,
            // when -version or -help was provided, or this was a normal compilation, no diagnostics
            // were produced, and all outputs were generated successfully.
            ExitStatus[ExitStatus["Success"] = 0] = "Success";
            // Diagnostics were produced and because of them no code was generated.
            ExitStatus[ExitStatus["DiagnosticsPresent_OutputsSkipped"] = 1] = "DiagnosticsPresent_OutputsSkipped";
            // Diagnostics were produced and outputs were generated in spite of them.
            ExitStatus[ExitStatus["DiagnosticsPresent_OutputsGenerated"] = 2] = "DiagnosticsPresent_OutputsGenerated";
            // When build skipped because passed in project is invalid
            ExitStatus[ExitStatus["InvalidProject_OutputsSkipped"] = 3] = "InvalidProject_OutputsSkipped";
            // When build is skipped because project references form cycle
            ExitStatus[ExitStatus["ProjectReferenceCycle_OutputsSkipped"] = 4] = "ProjectReferenceCycle_OutputsSkipped";
            /** @deprecated Use ProjectReferenceCycle_OutputsSkipped instead. */
            E