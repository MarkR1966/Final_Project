{"ast":null,"code":"import _classCallCheck from \"/home/ubuntu/spring-petclinic-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ubuntu/spring-petclinic-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/ubuntu/spring-petclinic-angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/ubuntu/spring-petclinic-angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ubuntu/spring-petclinic-angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/ubuntu/spring-petclinic-angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Inject, Injectable, Optional, InjectionToken, NgModule } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE, MAT_DATE_FORMATS } from '@angular/material/core';\nimport * as _rollupMoment from 'moment';\nimport _rollupMoment__default from 'moment';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as Éµngcc0 from '@angular/core';\nvar moment = _rollupMoment__default || _rollupMoment;\n/**\n * InjectionToken for moment date adapter to configure options.\n * @type {?}\n */\n\nvar MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken('MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n  providedIn: 'root',\n  factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\n\nfunction MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY() {\n  return {\n    useUtc: false\n  };\n}\n/**\n * Creates an array and fills it with values.\n * @template T\n * @param {?} length\n * @param {?} valueFunction\n * @return {?}\n */\n\n\nfunction range(length, valueFunction) {\n  /** @type {?} */\n  var valuesArray = Array(length);\n\n  for (var i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n\n  return valuesArray;\n}\n/**\n * Adapts Moment.js Dates for use with Angular Material.\n */\n\n\nvar MomentDateAdapter = /*#__PURE__*/function (_DateAdapter) {\n  _inherits(MomentDateAdapter, _DateAdapter);\n\n  var _super = _createSuper(MomentDateAdapter);\n\n  /**\n   * @param {?} dateLocale\n   * @param {?=} _options\n   */\n  function MomentDateAdapter(dateLocale, _options) {\n    var _this;\n\n    _classCallCheck(this, MomentDateAdapter);\n\n    _this = _super.call(this);\n    _this._options = _options;\n\n    _this.setLocale(dateLocale || moment.locale());\n\n    return _this;\n  }\n  /**\n   * @param {?} locale\n   * @return {?}\n   */\n\n\n  _createClass(MomentDateAdapter, [{\n    key: \"setLocale\",\n    value: function setLocale(locale) {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(MomentDateAdapter.prototype), \"setLocale\", this).call(this, locale);\n      /** @type {?} */\n\n\n      var momentLocaleData = moment.localeData(locale);\n      this._localeData = {\n        firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n        longMonths: momentLocaleData.months(),\n        shortMonths: momentLocaleData.monthsShort(),\n        dates: range(31,\n        /**\n        * @param {?} i\n        * @return {?}\n        */\n        function (i) {\n          return _this2.createDate(2017, 0, i + 1).format('D');\n        }),\n        longDaysOfWeek: momentLocaleData.weekdays(),\n        shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n        narrowDaysOfWeek: momentLocaleData.weekdaysMin()\n      };\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"getYear\",\n    value: function getYear(date) {\n      return this.clone(date).year();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"getMonth\",\n    value: function getMonth(date) {\n      return this.clone(date).month();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDate\",\n    value: function getDate(date) {\n      return this.clone(date).date();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDayOfWeek\",\n    value: function getDayOfWeek(date) {\n      return this.clone(date).day();\n    }\n    /**\n     * @param {?} style\n     * @return {?}\n     */\n\n  }, {\n    key: \"getMonthNames\",\n    value: function getMonthNames(style) {\n      // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n      return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDateNames\",\n    value: function getDateNames() {\n      return this._localeData.dates;\n    }\n    /**\n     * @param {?} style\n     * @return {?}\n     */\n\n  }, {\n    key: \"getDayOfWeekNames\",\n    value: function getDayOfWeekNames(style) {\n      if (style == 'long') {\n        return this._localeData.longDaysOfWeek;\n      }\n\n      if (style == 'short') {\n        return this._localeData.shortDaysOfWeek;\n      }\n\n      return this._localeData.narrowDaysOfWeek;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"getYearName\",\n    value: function getYearName(date) {\n      return this.clone(date).format('YYYY');\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"getFirstDayOfWeek\",\n    value: function getFirstDayOfWeek() {\n      return this._localeData.firstDayOfWeek;\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"getNumDaysInMonth\",\n    value: function getNumDaysInMonth(date) {\n      return this.clone(date).daysInMonth();\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone(date) {\n      return date.clone().locale(this.locale);\n    }\n    /**\n     * @param {?} year\n     * @param {?} month\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"createDate\",\n    value: function createDate(year, month, date) {\n      // Moment.js will create an invalid date if any of the components are out of bounds, but we\n      // explicitly check each case so we can throw more descriptive errors.\n      if (month < 0 || month > 11) {\n        throw Error(\"Invalid month index \\\"\".concat(month, \"\\\". Month index has to be between 0 and 11.\"));\n      }\n\n      if (date < 1) {\n        throw Error(\"Invalid date \\\"\".concat(date, \"\\\". Date has to be greater than 0.\"));\n      }\n      /** @type {?} */\n\n\n      var result = this._createMoment({\n        year: year,\n        month: month,\n        date: date\n      }).locale(this.locale); // If the result isn't valid, the date must have been out of bounds for this month.\n\n\n      if (!result.isValid()) {\n        throw Error(\"Invalid date \\\"\".concat(date, \"\\\" for month with index \\\"\").concat(month, \"\\\".\"));\n      }\n\n      return result;\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"today\",\n    value: function today() {\n      return this._createMoment().locale(this.locale);\n    }\n    /**\n     * @param {?} value\n     * @param {?} parseFormat\n     * @return {?}\n     */\n\n  }, {\n    key: \"parse\",\n    value: function parse(value, parseFormat) {\n      if (value && typeof value == 'string') {\n        return this._createMoment(value, parseFormat, this.locale);\n      }\n\n      return value ? this._createMoment(value).locale(this.locale) : null;\n    }\n    /**\n     * @param {?} date\n     * @param {?} displayFormat\n     * @return {?}\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(date, displayFormat) {\n      date = this.clone(date);\n\n      if (!this.isValid(date)) {\n        throw Error('MomentDateAdapter: Cannot format invalid date.');\n      }\n\n      return date.format(displayFormat);\n    }\n    /**\n     * @param {?} date\n     * @param {?} years\n     * @return {?}\n     */\n\n  }, {\n    key: \"addCalendarYears\",\n    value: function addCalendarYears(date, years) {\n      return this.clone(date).add({\n        years: years\n      });\n    }\n    /**\n     * @param {?} date\n     * @param {?} months\n     * @return {?}\n     */\n\n  }, {\n    key: \"addCalendarMonths\",\n    value: function addCalendarMonths(date, months) {\n      return this.clone(date).add({\n        months: months\n      });\n    }\n    /**\n     * @param {?} date\n     * @param {?} days\n     * @return {?}\n     */\n\n  }, {\n    key: \"addCalendarDays\",\n    value: function addCalendarDays(date, days) {\n      return this.clone(date).add({\n        days: days\n      });\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"toIso8601\",\n    value: function toIso8601(date) {\n      return this.clone(date).format();\n    }\n    /**\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n     * string into null. Returns an invalid date for all other values.\n     * @param {?} value\n     * @return {?}\n     */\n\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(value) {\n      /** @type {?} */\n      var date;\n\n      if (value instanceof Date) {\n        date = this._createMoment(value).locale(this.locale);\n      } else if (this.isDateInstance(value)) {\n        // Note: assumes that cloning also sets the correct locale.\n        return this.clone(value);\n      }\n\n      if (typeof value === 'string') {\n        if (!value) {\n          return null;\n        }\n\n        date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n      }\n\n      if (date && this.isValid(date)) {\n        return this._createMoment(date).locale(this.locale);\n      }\n\n      return _get(_getPrototypeOf(MomentDateAdapter.prototype), \"deserialize\", this).call(this, value);\n    }\n    /**\n     * @param {?} obj\n     * @return {?}\n     */\n\n  }, {\n    key: \"isDateInstance\",\n    value: function isDateInstance(obj) {\n      return moment.isMoment(obj);\n    }\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid(date) {\n      return this.clone(date).isValid();\n    }\n    /**\n     * @return {?}\n     */\n\n  }, {\n    key: \"invalid\",\n    value: function invalid() {\n      return moment.invalid();\n    }\n    /**\n     * Creates a Moment instance while respecting the current UTC settings.\n     * @private\n     * @param {...?} args\n     * @return {?}\n     */\n\n  }, {\n    key: \"_createMoment\",\n    value: function _createMoment() {\n      return this._options && this._options.useUtc ? moment.utc.apply(moment, arguments) : moment.apply(void 0, arguments);\n    }\n  }]);\n\n  return MomentDateAdapter;\n}(DateAdapter);\n\nMomentDateAdapter.Éµfac = function MomentDateAdapter_Factory(t) {\n  return new (t || MomentDateAdapter)(Éµngcc0.ÉµÉµinject(MAT_DATE_LOCALE, 8), Éµngcc0.ÉµÉµinject(MAT_MOMENT_DATE_ADAPTER_OPTIONS, 8));\n};\n\nMomentDateAdapter.Éµprov = Éµngcc0.ÉµÉµdefineInjectable({\n  token: MomentDateAdapter,\n  factory: MomentDateAdapter.Éµfac\n});\n/** @nocollapse */\n\nMomentDateAdapter.ctorParameters = function () {\n  return [{\n    type: String,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_DATE_LOCALE]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(MomentDateAdapter, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: String,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_DATE_LOCALE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar MAT_MOMENT_DATE_FORMATS = {\n  parse: {\n    dateInput: 'l'\n  },\n  display: {\n    dateInput: 'l',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY'\n  }\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nvar MomentDateModule = function MomentDateModule() {\n  _classCallCheck(this, MomentDateModule);\n};\n\nMomentDateModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: MomentDateModule\n});\nMomentDateModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function MomentDateModule_Factory(t) {\n    return new (t || MomentDateModule)();\n  },\n  providers: [{\n    provide: DateAdapter,\n    useClass: MomentDateAdapter,\n    deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n  }]\n});\n/*@__PURE__*/\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(MomentDateModule, [{\n    type: NgModule,\n    args: [{\n      providers: [{\n        provide: DateAdapter,\n        useClass: MomentDateAdapter,\n        deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n      }]\n    }]\n  }], null, null);\n})();\n\nvar Éµ0 = MAT_MOMENT_DATE_FORMATS;\n\nvar MatMomentDateModule = function MatMomentDateModule() {\n  _classCallCheck(this, MatMomentDateModule);\n};\n\nMatMomentDateModule.Éµmod = Éµngcc0.ÉµÉµdefineNgModule({\n  type: MatMomentDateModule\n});\nMatMomentDateModule.Éµinj = Éµngcc0.ÉµÉµdefineInjector({\n  factory: function MatMomentDateModule_Factory(t) {\n    return new (t || MatMomentDateModule)();\n  },\n  providers: [{\n    provide: MAT_DATE_FORMATS,\n    useValue: Éµ0\n  }],\n  imports: [[MomentDateModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && Éµngcc0.ÉµÉµsetNgModuleScope(MatMomentDateModule, {\n    imports: [MomentDateModule]\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  Éµngcc0.ÉµsetClassMetadata(MatMomentDateModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MomentDateModule],\n      providers: [{\n        provide: MAT_DATE_FORMATS,\n        useValue: Éµ0\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { MomentDateModule, MatMomentDateModule, MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY, MAT_MOMENT_DATE_ADAPTER_OPTIONS, MomentDateAdapter, MAT_MOMENT_DATE_FORMATS };","map":{"version":3,"sources":["../../src/material-moment-adapter/adapter/moment-date-adapter.ts","../../src/material-moment-adapter/adapter/moment-date-formats.ts","../../src/material-moment-adapter/adapter/index.ts"],"names":["_rollupMoment"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Optional, InjectionToken} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from '@angular/material/core';\n// Depending on whether rollup is used, moment needs to be imported differently.\n// Since Moment.js doesn't have a default export, we normally need to import using the `* as`\n// syntax. However, rollup creates a synthetic default module and we thus need to import it using\n// the `default as` syntax.\n// TODO(mmalerba): See if we can clean this up at some point.\nimport * as _moment from 'moment';\n// tslint:disable-next-line:no-duplicate-imports\nimport {default as _rollupMoment, Moment} from 'moment';\n\nconst moment = _rollupMoment || _moment;\n\n/** Configurable options for {@see MomentDateAdapter}. */\nexport interface MatMomentDateAdapterOptions {\n  /**\n   * Turns the use of utc dates on or off.\n   * Changing this will change how Angular Material components like DatePicker output dates.\n   * {@default false}\n   */\n  useUtc: boolean;\n}\n\n/** InjectionToken for moment date adapter to configure options. */\nexport const MAT_MOMENT_DATE_ADAPTER_OPTIONS = new InjectionToken<MatMomentDateAdapterOptions>(\n  'MAT_MOMENT_DATE_ADAPTER_OPTIONS', {\n    providedIn: 'root',\n    factory: MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY\n});\n\n\n/** @docs-private */\nexport function MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY(): MatMomentDateAdapterOptions {\n  return {\n    useUtc: false\n  };\n}\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n\n/** Adapts Moment.js Dates for use with Angular Material. */\n@Injectable()\nexport class MomentDateAdapter extends DateAdapter<Moment> {\n  // Note: all of the methods that accept a `Moment` input parameter immediately call `this.clone`\n  // on it. This is to ensure that we're working with a `Moment` that has the correct locale setting\n  // while avoiding mutating the original object passed to us. Just calling `.locale(...)` on the\n  // input would mutate the object.\n\n  private _localeData: {\n    firstDayOfWeek: number,\n    longMonths: string[],\n    shortMonths: string[],\n    dates: string[],\n    longDaysOfWeek: string[],\n    shortDaysOfWeek: string[],\n    narrowDaysOfWeek: string[]\n  };\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) dateLocale: string,\n    @Optional() @Inject(MAT_MOMENT_DATE_ADAPTER_OPTIONS)\n    private _options?: MatMomentDateAdapterOptions) {\n\n    super();\n    this.setLocale(dateLocale || moment.locale());\n  }\n\n  setLocale(locale: string) {\n    super.setLocale(locale);\n\n    let momentLocaleData = moment.localeData(locale);\n    this._localeData = {\n      firstDayOfWeek: momentLocaleData.firstDayOfWeek(),\n      longMonths: momentLocaleData.months(),\n      shortMonths: momentLocaleData.monthsShort(),\n      dates: range(31, (i) => this.createDate(2017, 0, i + 1).format('D')),\n      longDaysOfWeek: momentLocaleData.weekdays(),\n      shortDaysOfWeek: momentLocaleData.weekdaysShort(),\n      narrowDaysOfWeek: momentLocaleData.weekdaysMin(),\n    };\n  }\n\n  getYear(date: Moment): number {\n    return this.clone(date).year();\n  }\n\n  getMonth(date: Moment): number {\n    return this.clone(date).month();\n  }\n\n  getDate(date: Moment): number {\n    return this.clone(date).date();\n  }\n\n  getDayOfWeek(date: Moment): number {\n    return this.clone(date).day();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    // Moment.js doesn't support narrow month names, so we just use short if narrow is requested.\n    return style == 'long' ? this._localeData.longMonths : this._localeData.shortMonths;\n  }\n\n  getDateNames(): string[] {\n    return this._localeData.dates;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (style == 'long') {\n      return this._localeData.longDaysOfWeek;\n    }\n    if (style == 'short') {\n      return this._localeData.shortDaysOfWeek;\n    }\n    return this._localeData.narrowDaysOfWeek;\n  }\n\n  getYearName(date: Moment): string {\n    return this.clone(date).format('YYYY');\n  }\n\n  getFirstDayOfWeek(): number {\n    return this._localeData.firstDayOfWeek;\n  }\n\n  getNumDaysInMonth(date: Moment): number {\n    return this.clone(date).daysInMonth();\n  }\n\n  clone(date: Moment): Moment {\n    return date.clone().locale(this.locale);\n  }\n\n  createDate(year: number, month: number, date: number): Moment {\n    // Moment.js will create an invalid date if any of the components are out of bounds, but we\n    // explicitly check each case so we can throw more descriptive errors.\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    const result = this._createMoment({year, month, date}).locale(this.locale);\n\n    // If the result isn't valid, the date must have been out of bounds for this month.\n    if (!result.isValid()) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Moment {\n    return this._createMoment().locale(this.locale);\n  }\n\n  parse(value: any, parseFormat: string | string[]): Moment | null {\n    if (value && typeof value == 'string') {\n      return this._createMoment(value, parseFormat, this.locale);\n    }\n    return value ? this._createMoment(value).locale(this.locale) : null;\n  }\n\n  format(date: Moment, displayFormat: string): string {\n    date = this.clone(date);\n    if (!this.isValid(date)) {\n      throw Error('MomentDateAdapter: Cannot format invalid date.');\n    }\n    return date.format(displayFormat);\n  }\n\n  addCalendarYears(date: Moment, years: number): Moment {\n    return this.clone(date).add({years});\n  }\n\n  addCalendarMonths(date: Moment, months: number): Moment {\n    return this.clone(date).add({months});\n  }\n\n  addCalendarDays(date: Moment, days: number): Moment {\n    return this.clone(date).add({days});\n  }\n\n  toIso8601(date: Moment): string {\n    return this.clone(date).format();\n  }\n\n  /**\n   * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\n   * string into null. Returns an invalid date for all other values.\n   */\n  deserialize(value: any): Moment | null {\n    let date;\n    if (value instanceof Date) {\n      date = this._createMoment(value).locale(this.locale);\n    } else if (this.isDateInstance(value)) {\n      // Note: assumes that cloning also sets the correct locale.\n      return this.clone(value);\n    }\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      date = this._createMoment(value, moment.ISO_8601).locale(this.locale);\n    }\n    if (date && this.isValid(date)) {\n      return this._createMoment(date).locale(this.locale);\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any): boolean {\n    return moment.isMoment(obj);\n  }\n\n  isValid(date: Moment): boolean {\n    return this.clone(date).isValid();\n  }\n\n  invalid(): Moment {\n    return moment.invalid();\n  }\n\n  /** Creates a Moment instance while respecting the current UTC settings. */\n  private _createMoment(...args: any[]): Moment {\n    return (this._options && this._options.useUtc) ? moment.utc(...args) : moment(...args);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from '@angular/material/core';\n\n\nexport const MAT_MOMENT_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: 'l',\n  },\n  display: {\n    dateInput: 'l',\n    monthYearLabel: 'MMM YYYY',\n    dateA11yLabel: 'LL',\n    monthYearA11yLabel: 'MMMM YYYY',\n  },\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE} from '@angular/material/core';\nimport {MAT_MOMENT_DATE_ADAPTER_OPTIONS, MomentDateAdapter} from './moment-date-adapter';\nimport {MAT_MOMENT_DATE_FORMATS} from './moment-date-formats';\n\nexport * from './moment-date-adapter';\nexport * from './moment-date-formats';\n\n@NgModule({\n  providers: [\n    {\n      provide: DateAdapter,\n      useClass: MomentDateAdapter,\n      deps: [MAT_DATE_LOCALE, MAT_MOMENT_DATE_ADAPTER_OPTIONS]\n    }\n  ],\n})\nexport class MomentDateModule {}\n\n\n@NgModule({\n  imports: [MomentDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_MOMENT_DATE_FORMATS}],\n})\nexport class MatMomentDateModule {}\n"]},"metadata":{},"sourceType":"module"}